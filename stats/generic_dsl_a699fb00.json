{
  "f_ofcolor": {
    "calls": 4,
    "execution_time": 0.0,
    "call_sites": {
      "solvers.py:567": {
        "count": 2,
        "signatures": [
          {
            "type_signature": "f_ofcolor(tuple, int)",
            "value_signature": "f_ofcolor(tuple(len=10), 1)"
          },
          {
            "type_signature": "f_ofcolor(tuple, int)",
            "value_signature": "f_ofcolor(((1, 0, 1, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), 1)"
          }
        ],
        "code_context": "x1 = f_ofcolor(I, ONE)"
      }
    },
    "type_signatures": [
      "f_ofcolor(tuple, int)"
    ],
    "value_signatures": [
      "f_ofcolor(((1, 0, 1, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), 1)",
      "f_ofcolor(tuple(len=10), 1)"
    ]
  },
  "shift": {
    "calls": 8,
    "execution_time": 0.0,
    "call_sites": {
      "solvers.py:568": {
        "count": 4,
        "signatures": [
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=10), (0, 1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset({(3, 1), (0, 2), (3, 3), (0, 0)}), (0, 1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=11), (0, 1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=12), (0, 1))"
          }
        ],
        "code_context": "x2 = shift(x1, RIGHT)"
      },
      "solvers.py:569": {
        "count": 4,
        "signatures": [
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=10), (0, -1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset({(3, 1), (0, 2), (3, 3), (0, 0)}), (0, -1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=11), (0, -1))"
          },
          {
            "type_signature": "shift(frozenset, tuple)",
            "value_signature": "shift(frozenset(len=12), (0, -1))"
          }
        ],
        "code_context": "x3 = shift(x1, LEFT)"
      }
    },
    "type_signatures": [
      "shift(frozenset, tuple)"
    ],
    "value_signatures": [
      "shift(frozenset({(3, 1), (0, 2), (3, 3), (0, 0)}), (0, 1))",
      "shift(frozenset(len=10), (0, 1))",
      "shift(frozenset(len=11), (0, -1))",
      "shift(frozenset(len=12), (0, -1))",
      "shift(frozenset(len=10), (0, -1))",
      "shift(frozenset(len=12), (0, 1))",
      "shift(frozenset({(3, 1), (0, 2), (3, 3), (0, 0)}), (0, -1))",
      "shift(frozenset(len=11), (0, 1))"
    ]
  },
  "intersection": {
    "calls": 4,
    "execution_time": 0.0,
    "call_sites": {
      "solvers.py:570": {
        "count": 4,
        "signatures": [
          {
            "type_signature": "intersection(frozenset, frozenset)",
            "value_signature": "intersection(frozenset(len=10), frozenset(len=10))"
          },
          {
            "type_signature": "intersection(frozenset, frozenset)",
            "value_signature": "intersection(frozenset({(0, 1), (3, 2), (0, 3), (3, 4)}), frozenset({(0, 1), (3, 2), (0, -1), (3, 0)}))"
          },
          {
            "type_signature": "intersection(frozenset, frozenset)",
            "value_signature": "intersection(frozenset(len=11), frozenset(len=11))"
          },
          {
            "type_signature": "intersection(frozenset, frozenset)",
            "value_signature": "intersection(frozenset(len=12), frozenset(len=12))"
          }
        ],
        "code_context": "x4 = intersection(x2, x3)"
      }
    },
    "type_signatures": [
      "intersection(frozenset, frozenset)"
    ],
    "value_signatures": [
      "intersection(frozenset({(0, 1), (3, 2), (0, 3), (3, 4)}), frozenset({(0, 1), (3, 2), (0, -1), (3, 0)}))",
      "intersection(frozenset(len=10), frozenset(len=10))",
      "intersection(frozenset(len=11), frozenset(len=11))",
      "intersection(frozenset(len=12), frozenset(len=12))"
    ]
  },
  "fill": {
    "calls": 4,
    "execution_time": 0.0,
    "call_sites": {
      "solvers.py:571": {
        "count": 3,
        "signatures": [
          {
            "type_signature": "fill(tuple, int, frozenset)",
            "value_signature": "fill(tuple(len=10), 2, frozenset(len=6))"
          },
          {
            "type_signature": "fill(tuple, int, frozenset)",
            "value_signature": "fill(((1, 0, 1, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), 2, frozenset({(0, 1), (3, 2)}))"
          },
          {
            "type_signature": "fill(tuple, int, frozenset)",
            "value_signature": "fill(tuple(len=10), 2, frozenset(len=7))"
          }
        ],
        "code_context": "O = fill(I, TWO, x4)"
      }
    },
    "type_signatures": [
      "fill(tuple, int, frozenset)"
    ],
    "value_signatures": [
      "fill(((1, 0, 1, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), 2, frozenset({(0, 1), (3, 2)}))",
      "fill(tuple(len=10), 2, frozenset(len=7))",
      "fill(tuple(len=10), 2, frozenset(len=6))"
    ]
  },
  "toindices": {
    "calls": 4,
    "execution_time": 0.0,
    "call_sites": {
      "solvers.py:571": {
        "count": 3,
        "signatures": [
          {
            "type_signature": "toindices(frozenset)",
            "value_signature": "toindices(frozenset(len=6))"
          },
          {
            "type_signature": "toindices(frozenset)",
            "value_signature": "toindices(frozenset({(0, 1), (3, 2)}))"
          },
          {
            "type_signature": "toindices(frozenset)",
            "value_signature": "toindices(frozenset(len=7))"
          }
        ],
        "code_context": "O = fill(I, TWO, x4)"
      }
    },
    "type_signatures": [
      "toindices(frozenset)"
    ],
    "value_signatures": [
      "toindices(frozenset(len=6))",
      "toindices(frozenset(len=7))",
      "toindices(frozenset({(0, 1), (3, 2)}))"
    ]
  }
}