{
  "summary": {
    "total_functions": 9,
    "dsl_functions": 9,
    "non_dsl_functions": 0,
    "functions_with_t_variants": 3,
    "functions_with_f_variants": 3,
    "threshold_percent": 100.0
  },
  "specialized_functions": [
    {
      "name": "mapply",
      "total_calls": 6,
      "tuple_percent": 0.0,
      "has_tuple_variant": true,
      "frozenset_percent": 0.0,
      "has_frozenset_variant": true,
      "meets_threshold": false,
      "call_sites": {
        "solvers.py:658": {
          "count": 3,
          "code_context": "x3 = mapply(dneighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 0
        },
        "solvers.py:659": {
          "count": 3,
          "code_context": "x4 = mapply(ineighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 0
        }
      }
    },
    {
      "name": "apply",
      "total_calls": 6,
      "tuple_percent": 0.0,
      "has_tuple_variant": true,
      "frozenset_percent": 0.0,
      "has_frozenset_variant": true,
      "meets_threshold": false,
      "call_sites": {
        "solvers.py:658": {
          "count": 3,
          "code_context": "x3 = mapply(dneighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 0
        },
        "solvers.py:659": {
          "count": 3,
          "code_context": "x4 = mapply(ineighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 0
        }
      }
    },
    {
      "name": "merge",
      "total_calls": 6,
      "tuple_percent": 0.0,
      "has_tuple_variant": true,
      "frozenset_percent": 100.0,
      "has_frozenset_variant": true,
      "meets_threshold": true,
      "call_sites": {
        "solvers.py:658": {
          "count": 3,
          "code_context": "x3 = mapply(dneighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 3
        },
        "solvers.py:659": {
          "count": 3,
          "code_context": "x4 = mapply(ineighbors, x1)",
          "tuple_calls": 0,
          "frozenset_calls": 3
        }
      }
    }
  ],
  "high_impact_opportunities": [],
  "perfect_matches": [
    {
      "name": "merge",
      "variant": "merge_f",
      "type": "frozenset",
      "calls": 6,
      "call_sites": {
        "solvers.py:658": {
          "count": 3,
          "code_context": "x3 = mapply(dneighbors, x1)"
        },
        "solvers.py:659": {
          "count": 3,
          "code_context": "x4 = mapply(ineighbors, x1)"
        }
      }
    }
  ],
  "analyzed_functions": [
    "f_ofcolor",
    "replace",
    "mapply",
    "apply",
    "dneighbors",
    "merge",
    "ineighbors",
    "fill",
    "toindices"
  ]
}