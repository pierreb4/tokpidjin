def solve_28e73c20_one(S, I):
    return power(fork(vconcat, compose(lbind(hupscale, canvas(THREE, UNITY)), height_t), fork(vconcat, compose(rbind(hconcat, canvas(THREE, UNITY)), chain(lbind(hupscale, canvas(ZERO, UNITY)), decrement, height_t)), rbind(mir_rot_t, R4))), subtract(width_t(I), FOUR))(branch(even(width_t(I)), fill(upscale_t(canvas(THREE, UNITY), FOUR), ZERO, insert(astuple(TWO, TWO), insert(astuple(ONE, TWO), insert(UNITY, initset(DOWN))))), fill(hupscale(vupscale(canvas(THREE, UNITY), FIVE), THREE), ZERO, insert(astuple(THREE, ONE), insert(astuple(TWO, ONE), insert(UNITY, initset(DOWN)))))))


def solve_28e73c20(S, I):
    x1 = canvas(THREE, UNITY)
    x2 = lbind(hupscale, x1)
    x3 = compose(x2, height_t)
    x4 = rbind(hconcat, x1)
    x5 = canvas(ZERO, UNITY)
    x6 = lbind(hupscale, x5)
    x7 = chain(x6, decrement, height_t)
    x8 = compose(x4, x7)
    x9 = rbind(mir_rot_t, R4)
    x10 = fork(vconcat, x8, x9)
    x11 = fork(vconcat, x3, x10)
    x12 = width_t(I)
    x13 = subtract(x12, FOUR)
    x14 = power(x11, x13)
    x15 = even(x12)
    x16 = upscale_t(x1, FOUR)
    x17 = astuple(TWO, TWO)
    x18 = astuple(ONE, TWO)
    x19 = initset(DOWN)
    x20 = insert(UNITY, x19)
    x21 = insert(x18, x20)
    x22 = insert(x17, x21)
    x23 = fill(x16, ZERO, x22)
    x24 = vupscale(x1, FIVE)
    x25 = hupscale(x24, THREE)
    x26 = astuple(THREE, ONE)
    x27 = astuple(TWO, ONE)
    x28 = insert(x27, x20)
    x29 = insert(x26, x28)
    x30 = fill(x25, ZERO, x29)
    x31 = branch(x15, x23, x30)
    O = x14(x31)
    return O
