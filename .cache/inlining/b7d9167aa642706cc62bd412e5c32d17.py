def solve(S, I, C):
    return fill(fill(I, branch(equality(get_color_rank_f(toobject(neighbors(center(get_nth_f(sizefilter(o_g(I, R4), ONE), F0))), I), F0), get_nth_f(apply(color, difference(o_g(I, R4), sizefilter(o_g(I, R4), ONE))), F0)), color(get_nth_f(sizefilter(o_g(I, R4), ONE), F0)), other_f(apply(color, sizefilter(o_g(I, R4), ONE)), color(get_nth_f(sizefilter(o_g(I, R4), ONE), F0)))), intersection(f_ofcolor(I, get_nth_f(apply(color, difference(o_g(I, R4), sizefilter(o_g(I, R4), ONE))), F0)), mapply(compose(fork(combine, fork(combine, rbind(shoot, UNITY), rbind(shoot, NEG_UNITY)), fork(combine, rbind(shoot, DOWN_LEFT), rbind(shoot, UP_RIGHT))), center), sizefilter(o_g(I, R4), ONE)))), branch(equality(get_color_rank_f(toobject(neighbors(center(get_nth_f(sizefilter(o_g(I, R4), ONE), F0))), I), F0), get_nth_f(apply(color, difference(o_g(I, R4), sizefilter(o_g(I, R4), ONE))), F0)), other_f(apply(color, sizefilter(o_g(I, R4), ONE)), color(get_nth_f(sizefilter(o_g(I, R4), ONE), F0))), color(get_nth_f(sizefilter(o_g(I, R4), ONE), F0))), intersection(f_ofcolor(I, divide(width_t(subgrid(get_arg_rank_f(o_g(I, R3), size, F0), I)), width_t(subgrid(get_arg_rank_f(o_g(I, R3), size, L1), I)))(apply(color, difference(o_g(I, R4), sizefilter(o_g(I, R4), ONE))), L1)), mapply(compose(fork(combine, fork(combine, rbind(shoot, UNITY), rbind(shoot, NEG_UNITY)), fork(combine, rbind(shoot, DOWN_LEFT), rbind(shoot, UP_RIGHT))), center), sizefilter(o_g(I, R4), ONE))))