def solve(S, I, C):
    return vconcat(hconcat(chain(rbind(subgrid, I), lbind(extract, get_nth_f(asindices(I)(I, R7), F0)), lbind(compose, matcher(lbind(index, I), ZERO)))(rbind(corner, R3)), chain(rbind(subgrid, I), lbind(extract, get_nth_f(asindices(I)(I, R7), F0)), lbind(compose, matcher(lbind(index, I), ZERO)))(rbind(corner, R2))), hconcat(chain(rbind(subgrid, I), lbind(extract, get_nth_f(asindices(I)(I, R7), F0)), lbind(compose, matcher(lbind(index, I), ZERO)))(rbind(corner, R1)), chain(rbind(subgrid, I), lbind(extract, get_nth_f(asindices(I)(I, R7), F0)), lbind(compose, matcher(lbind(index, I), ZERO)))(fill(fill(I, CYAN, mapply(lbind(shift, asobject(canvas(GRAY, TWO_BY_TWO))), occurrences(I, asobject(canvas(GRAY, TWO_BY_TWO))))), get_nth_t(difference_tuple(dedupe(mapply(p_g(apply(second(S)))))()(dedupe(mapply(p_g(apply(first(S)))))()))(F1)), mapply(lbind(shift, asobject(vconcat(canvas(get_nth_t(difference_tuple(dedupe(mapply(p_g(apply(second(S)))))()(dedupe(mapply(p_g(apply(first(S)))))()))(F0)), astuple(TWO, ONE)), canvas(GRAY, UNITY)))), uppermost_o)))))