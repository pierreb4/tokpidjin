candidates = {'Callable': {('compose(rbind(add, ZERO_BY_TWO), a1)', "('Callable',)"), ('fork(gravitate, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('chain(a1, lbind(rbind, manhattan), initset)', "('Callable',)"), ('chain(a1, a2, fork(shift, identity, a3))', "('Callable', 'Callable', 'Callable')"), ('mapply(compose(a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(intersection, compose(backdrop, a1), a2)', "('Callable', 'Callable')"), ('mapply(compose(box, a1), a2)', "('Callable', 'Container[Container]')"), ('apply(compose(a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('fork(rbind(get_arg_rank, L1), a1, a2)', "('Callable', 'Callable')"), ('chain(even, rbind(get_rank, F0), a1)', "('Callable',)"), ('chain(a1, rbind(toobject, a2), neighbors)', "('Callable', 'Any')"), ('mapply(rbind(shoot, UNITY), a1)', "('Container[Container]',)"), ('compose(rbind(greater, ONE), size)', '()'), ('extract(a1, rbind(adjacent, a2))', "('Container', 'Any')"), ('compose(flip, matcher(a1, a2))', "('Callable', 'Any')"), ('rbind(mir_rot_f, R0)', '()'), ('compose(lbind(hupscale, a1), height_t)', "('Any',)"), ('insert(rbind(mir_rot_f, R0), a1)', "('FrozenSet',)"), ('sfilter_f(a1, compose(flip, a2))', "('FrozenSet', 'Callable')"), ('fork(astuple, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('sfilter_f(a1, compose(vline_i, a2))', "('FrozenSet', 'Callable')"), ('lbind(canvas, ZERO)', '()'), ('branch(a1, a2, compose(a3, a4))', "('bool', 'Any', 'Callable', 'Callable')"), ('mapply(fork(intersection, toindices, a1), a2)', "('Callable', 'Container[Container]')"), ('chain(rbind(compose, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('rbind(get_color_rank_f, L1)', '()'), ('fork(rbind(interval, ONE), a1, a2)', "('Callable', 'Callable')"), ('chain(rbind(colorcount_f, ZERO), a1, dneighbors)', "('Callable',)"), ('rbind(add, UP_RIGHT)', '()'), ('rbind(shoot, DOWN)', '()'), ('apply(fork(astuple, a1, identity), a2)', "('Callable', 'Container')"), ('compose(size, a1)(vline_o)', "('Callable',)"), ('fork(shift, a1, fork(multiply, shape_f, a2))', "('Callable', 'Callable')"), ('chain(a1, size, compose(dedupe, totuple))', "('Callable',)"), ('chain(positive, decrement, compose(decrement, width_f))', '()'), ('fork(equality, a1, rbind(col_row, R1))', "('Callable',)"), ('power(trim, TWO)', '()'), ('fork(recolor_i, a1, chain(initset, center, a2))', "('Callable', 'Callable')"), ('apply(rbind(subgrid, a1), a2)', "('Any', 'Container')"), ('compose(compose(asobject, a1), a2)', "('Callable', 'Callable')"), ('rbind(sfilter, chain(a1, a2, dneighbors))', "('Callable', 'Callable')"), ('chain(rbind(colorcount_f, a1), a2, neighbors)', "('Any', 'Callable')"), ('rbind(corner, R0)', '()'), ('fork(connect, a1, rbind(corner, R1))', "('Callable',)"), ('chain(fork(add, a1, a2), a3, a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('rbind(order, identity)', '()'), ('compose(a1, fork(manhattan, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(a1, size, rbind(intersection, a2))', "('Callable', 'Any')"), ('sfilter_f(a1, chain(a2, a3, a4))', "('FrozenSet', 'Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(corner, R3), F0)', "('FrozenSet',)"), ('fork(recolor_o, compose(color, a1), identity)', "('Callable',)"), ('compose(normalize, toindices)', '()'), ('rbind(get_color_rank_f, F0)', '()'), ('a1(rbind(corner, R3))', "('Callable',)"), ('fork(equality, toindices, box)', '()'), ('fork(combine, a1, rbind(shoot, NEG_UNITY))', "('Callable',)"), ('mapply(chain(a1, vfrontier, center), a2)', "('Callable', 'Container[Container]')"), ('chain(a1, a2, chain(a3, a4, initset))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(shift, a1, rbind(corner, R0))', "('Callable',)"), ('fork(mapply, a1, fork(apply, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('lbind(mapply, neighbors)', '()'), ('fork(shift, identity, fork(gravitate, identity, a1))', "('Callable',)"), ('compose(a1, compose(halve, width_f))', "('Callable',)"), ('fork(connect, a1, rbind(corner, R3))', "('Callable',)"), ('fork(add, compose(center, a1), a2)', "('Callable', 'Callable')"), ('mapply(chain(outbox, outbox, initset), a1)', "('Container[Container]',)"), ('compose(neighbors, center)', '()'), ('fork(add, height_f, width_f)', '()'), ('chain(initset, a1, chain(a2, a3, initset))', "('Callable', 'Callable', 'Callable')"), ('apply(rbind(corner, R3), a1)', "('Container',)"), ('astuple(a1, rbind(mir_rot_f, R2))', "('int',)"), ('chain(a1, a2, a3)(ONE)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, a2, lbind(rbind, equality))', "('Callable', 'Callable')"), ('extract(a1, rbind(get_nth_f, L1))', "('Container',)"), ('chain(chain(a1, a2, palette_f), a3, outbox)', "('Callable', 'Callable', 'Callable')"), ('astuple(a1, rbind(mir_rot_f, R1))', "('int',)"), ('compose(a1, rbind(mir_rot_f, R2))', "('Callable',)"), ('fork(combine, identity, compose(a1, outbox))', "('Callable',)"), ('chain(a1, rbind(mir_rot_f, R1), merge)', "('Callable',)"), ('apply(compose(a1, toindices), a2)', "('Callable', 'Container')"), ('fork(both, a1, chain(flip, a1, a2))', "('Callable', 'Callable')"), ('mfilter_f(a1, fork(equality, size, a2))', "('FrozenSet', 'Callable')"), ('fork(a1, fork(sfilter, identity, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, rbind(sfilter, a2), toindices)', "('Callable', 'Any')"), ('sfilter_f(a1, fork(vmatching, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('fork(intersection, a1(a2), a3)', "('Callable', 'Any', 'Callable')"), ('fork(add, a1, compose(double, a2))', "('Callable', 'Callable')"), ('fork(intersection, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('compose(rbind(get_rank, F0), a1)', "('Callable',)"), ('compose(rbind(bordering, a1), initset)', "('Any',)"), ('compose(invert, chain(decrement, a1, shape_f))', "('Callable',)"), ('fork(mapply, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('power(outbox, THREE)', '()'), ('mapply(rbind(shoot, LEFT), a1)', "('Container[Container]',)"), ('compose(fork(either, a1, a2), initset)', "('Callable', 'Callable')"), ('fork(insert, rbind(subtract, TWO_BY_ZERO), a1)', "('Callable',)"), ('compose(chain(even, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(lbind(greater, a1), a2)', "('Any', 'Callable')"), ('chain(flip, matcher(a1, ZERO), a2)', "('Callable', 'Callable')"), ('fork(sfilter, identity, chain(a1, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(tojvec, a1, fork(position, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('sfilter(a1, compose(a2, numcolors_f))', "('Container', 'Callable')"), ('compose(lbind(matcher, a1), a1)', "('Any',)"), ('rbind(shoot, NEG_UNITY)', '()'), ('sfilter_t(a1, rbind(get_nth_f, F0))', "('Tuple',)"), ('fork(either, lbind(hmatching, a1), a2)', "('Any', 'Callable')"), ('fork(paint, rbind(subgrid, a1), a2)', "('Any', 'Callable')"), ('mfilter_f(a1, matcher(size, SIX))', "('FrozenSet',)"), ('fork(connect, center, fork(add, center, a1))', "('Callable',)"), ('rbind(shoot, UNITY)', '()'), ('fork(equality, power(a1, TWO), a2)', "('Callable', 'Callable')"), ('apply(rbind(f_ofcolor, ZERO), a1)', "('Container',)"), ('compose(rbind(shoot, RIGHT), center)', '()'), ('fork(mapply, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('sfilter_f(a1, fork(equality, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('rbind(sfilter, compose(even, a1))', "('Callable',)"), ('get_arg_rank_f(a1, fork(subtract, a2, a3), F0)', "('FrozenSet', 'Callable', 'Callable')"), ('fork(either, a1, lbind(vmatching, a2))', "('Callable', 'Any')"), ('extract(a1, matcher(color, FIVE))', "('Container',)"), ('chain(a1, rbind(a2, a3), a4)', "('Callable', 'Callable', 'Any', 'Callable')"), ('fork(intersection, toindices, fork(shift, a1, a2))', "('Callable', 'Callable')"), ('fork(both, fork(greater, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(apply, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('sfilter(a1, compose(a2, a3))', "('Container', 'Callable', 'Callable')"), ('compose(a1, rbind(get_nth_f, F0))', "('Callable',)"), ('fork(shift, a1(a2), a3)', "('Callable', 'Any', 'Callable')"), ('apply(rbind(get_common_rank, F0), a1)', "('Container',)"), ('fork(combine, fork(recolor_o, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('mapply(fork(sfilter, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(vconcat, fork(canvas, color, a1), a2)', "('Callable', 'Callable')"), ('fork(difference, chain(a1, corners, outbox), outbox)', "('Callable',)"), ('fork(multiply, height_f, width_f)', '()'), ('rbind(a1, rbind(col_row, R3))', "('Callable',)"), ('chain(rbind(mir_rot_t, R1), merge, a1)', "('Callable',)"), ('chain(even, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('matcher(rbind(get_nth_f, L1), a1)', "('Any',)"), ('fork(recolor_i, color, backdrop)', '()'), ('compose(normalize, rbind(f_ofcolor, ONE))', '()'), ('fork(add, a1, compose(crement, a2))', "('Callable', 'Callable')"), ('fork(gravitate, identity, chain(a1, a2, color))', "('Callable', 'Callable')"), ('power(rbind(get_nth_f, L1), TWO)', '()'), ('mapply(fork(combine, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(mapply, a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('chain(a1, lbind(rbind, adjacent), a2)', "('Callable', 'Callable')"), ('apply(fork(product, a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('fork(both, rbind(adjacent, a1), a2)', "('Any', 'Callable')"), ('sfilter_t(a1, compose(a2, a3))', "('Tuple', 'Callable', 'Callable')"), ('fork(sfilter, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(contained, a1), color)', "('Any',)"), ('get_arg_rank_f(a1, rbind(colorcount_f, ONE), F0)', "('FrozenSet',)"), ('fork(both, a1, compose(a2, initset))', "('Callable', 'Callable')"), ('chain(a1, a2, fork(difference, a3, outbox))', "('Callable', 'Callable', 'Callable')"), ('fork(recolor_i, a1, fork(connect, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(rbind(a1, a2), a3, a4)', "('Callable', 'Any', 'Callable', 'Callable')"), ('fork(equality, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(shift, identity, a1(ONE))', "('Callable',)"), ('lbind(compose, compose(even, a1))', "('Callable',)"), ('rbind(add, ZERO_BY_TWO)', '()'), ('astuple(rbind(mir_rot_f, R3), a1)', "('int',)"), ('compose(lbind(apply, toivec), a1)', "('Callable',)"), ('fork(combine, a1, fork(recolor_o, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(toobject, a1, identity)(a2)', "('Callable', 'Any')"), ('chain(a1, a2, lbind(lbind, occurrences))', "('Callable', 'Callable')"), ('fork(recolor_i, color, compose(hfrontier, center))', '()'), ('mapply(fork(shift, identity, a1), a2)', "('Callable', 'Container[Container]')"), ('mapply(rbind(get_nth_f, F0), a1)', "('Container[Container]',)"), ('fork(shift, identity, chain(halve, a1, shape_f))', "('Callable',)"), ('matcher(compose(halve, width_f), THREE)', '()'), ('compose(rbind(add, DOWN), a1)', "('Callable',)"), ('fork(connect, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('chain(a1, lbind(lbind, shift), a2)', "('Callable', 'Callable')"), ('chain(lbind(lbind, shift), a1, a2)', "('Callable', 'Callable')"), ('compose(flip, matcher(a1, TWO))', "('Callable',)"), ('compose(lbind(lbind, shift), normalize)', '()'), ('lbind(compose, fork(both, a1, a2))', "('Callable', 'Callable')"), ('fork(combine, a1, fork(connect, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('matcher(compose(normalize, toindices), a1)', "('Any',)"), ('power(compose(a1, a2), TWO)', "('Callable', 'Callable')"), ('chain(a1, a2, lbind(lbind, astuple))', "('Callable', 'Callable')"), ('apply(fork(add, a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('lbind(compose, toindices)', '()'), ('lbind(contained, TWO)', '()'), ('compose(lbind(mapply, a1), toindices)', "('Any',)"), ('compose(a1, rbind(col_row, R1))', "('Callable',)"), ('compose(a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('compose(rbind(get_nth_f, F0), delta)', '()'), ('lbind(apply, rbind(get_rank, F0))', '()'), ('compose(lbind(lbind, manhattan), initset)', '()'), ('get_arg_rank_f(a1, chain(a2, a3, a4), F0)', "('FrozenSet', 'Callable', 'Callable', 'Callable')"), ('power(fork(astuple, a1, a2), a3)', "('Callable', 'Callable', 'int')"), ('chain(lbind(rbind, subtract), a1, a2)', "('Callable', 'Callable')"), ('fork(hmatching, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('fork(vconcat, identity, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(a1, chain(palette_t, trim, a2))', "('Callable', 'Callable')"), ('chain(outbox, outbox, a1)(a2)', "('Callable', 'Any')"), ('fork(subtract, a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('rbind(rbind(get_arg_rank, L1), a1)', "('Any',)"), ('apply(rbind(add, DOWN_LEFT), a1)', "('Container',)"), ('chain(a1, lbind(extract, a2), a3)', "('Callable', 'Any', 'Callable')"), ('chain(a1, lbind(subtract, a2), size)', "('Callable', 'Any')"), ('rbind(shift, NEG_UNITY)', '()'), ('chain(rbind(colorcount_f, a1), a2, dneighbors)', "('Any', 'Callable')"), ('compose(chain(size, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(shoot, compose(a1, delta), a2)', "('Callable', 'Callable')"), ('fork(subtract, fork(add, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(sfilter, a1), a2)', "('Any', 'Callable')"), ('fork(mapply, a1, chain(a2, corners, a3))', "('Callable', 'Callable', 'Callable')"), ('lbind(rbind(get_arg_rank, F0), a1)', "('Any',)"), ('mapply(chain(a1, asobject, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(connect, a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('fork(a1, compose(a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(col_row, R1), F0)', "('FrozenSet',)"), ('lbind(lbind, contained)', '()'), ('fork(combine, vfrontier, hfrontier)(a1)', "('Any',)"), ('chain(flip, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('fork(add, a1, compose(invert, a2))', "('Callable', 'Callable')"), ('lbind(add, NEG_UNITY)', '()'), ('rbind(mir_rot_f, R2)', '()'), ('lbind(fork, greater)', '()'), ('apply(rbind(add, UP_RIGHT), a1)', "('Container',)"), ('mapply(fork(connect, a1, centerofmass), a2)', "('Callable', 'Container[Container]')"), ('compose(lbind(apply, a1), a2)', "('Any', 'Callable')"), ('matcher(rbind(get_nth_f, F0), FIVE)', '()'), ('compose(numcolors_f, chain(a1, corners, outbox))', "('Callable',)"), ('fork(shift, chain(normalize, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(add, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('compose(rbind(a1, a2), toindices)', "('Callable', 'Any')"), ('mapply(fork(recolor_i, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('chain(color, merge, frontiers)', '()'), ('get_arg_rank_f(a1, rbind(col_row, R1), L1)', "('FrozenSet',)"), ('sfilter_f(a1, compose(a2, color))', "('FrozenSet', 'Callable')"), ('compose(a1, lbind(lbind, intersection))', "('Callable',)"), ('fork(rbind(get_arg_rank, F0), a1, a2)', "('Callable', 'Callable')"), ('chain(toivec, decrement, double)', '()'), ('a1(fork(position, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('apply(fork(compose, a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('compose(lbind(apply, tojvec), a1)', "('Callable',)"), ('fork(insert, identity, neighbors)', '()'), ('chain(a1, lbind(rbind, equality), a2)', "('Callable', 'Callable')"), ('rbind(get_rank, F0)', '()'), ('chain(rbind(compose, initset), a1, a2)', "('Callable', 'Callable')"), ('compose(lbind(contained, ZERO), a1)', "('Callable',)"), ('chain(rbind(get_nth_f, F0), a1, palette_f)', "('Callable',)"), ('compose(rbind(col_row, R3), a1)', "('Callable',)"), ('rbind(astuple, ONE)', '()'), ('chain(a1, delta, fork(insert, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(add, TWO_BY_ZERO)', '()'), ('power(trim, TWO)(a1)', "('Any',)"), ('mfilter_f(a1, rbind(bordering, a2))', "('FrozenSet', 'Any')"), ('compose(merge, a1)(THREE)', "('Callable',)"), ('rbind(sfilter, compose(flip, a1))', "('Callable',)"), ('lbind(colorfilter, a1)(THREE)', "('Any',)"), ('fork(both, a1, chain(positive, size, a2))', "('Callable', 'Callable')"), ('lbind(rbind, subtract)', '()'), ('fork(equality, size, compose(decrement, a1))', "('Callable',)"), ('chain(toivec, a1, rbind(col_row, R0))', "('Callable',)"), ('chain(halve, lbind(subtract, a1), shape_f)', "('Any',)"), ('lbind(apply, increment)', '()'), ('chain(a1, fork(combine, identity, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('mapply(fork(recolor_o, color, a1), a2)', "('Callable', 'Container[Container]')"), ('chain(lbind(occurrences, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('compose(merge, a1)(FOUR)', "('Callable',)"), ('compose(a1, chain(a2, a3, neighbors))', "('Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(col_row, R2), F0)', "('FrozenSet',)"), ('fork(shift, identity, compose(crement, a1))', "('Callable',)"), ('rbind(subtract, ZERO_BY_TWO)', '()'), ('compose(even, fork(subtract, a1, a2))', "('Callable', 'Callable')"), ('fork(occurrences, rbind(get_nth_f, L1), a1)', "('Callable',)"), ('chain(compose(a1, a2), a3, normalize)', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(colorcount_f, a1), a2)', "('Any', 'Callable')"), ('compose(rbind(occurrences, a1), a2)', "('Any', 'Callable')"), ('lbind(remove, TWO)(a1)', "('Any',)"), ('rbind(order, invert)', '()'), ('branch(a1, a2, rbind(col_row, R3))', "('bool', 'Any')"), ('fork(shift, rbind(mir_rot_f, R0), a1)', "('Callable',)"), ('branch(a1, rbind(mir_rot_t, R2), a2)', "('bool', 'Any')"), ('chain(a1, rbind(toobject, a2), outbox)', "('Callable', 'Any')"), ('lbind(contained, ZERO)', '()'), ('mapply(rbind(shoot, DOWN), a1)', "('Container[Container]',)"), ('compose(lbind(matcher, a1), a2)', "('Any', 'Callable')"), ('fork(recolor_i, color, fork(shift, a1, a2))', "('Callable', 'Callable')"), ('chain(flip, a1, chain(a2, a3, palette_f))', "('Callable', 'Callable', 'Callable')"), ('lbind(apply, initset)', '()'), ('fork(astuple, fork(combine, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(col_row, R2), L1)', "('FrozenSet',)"), ('apply(rbind(corner, R0), a1)', "('Container',)"), ('rbind(sfilter, chain(a1, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(toindices, fork(shift, a1, a2))', "('Callable', 'Callable')"), ('lbind(mapply, vfrontier)', '()'), ('compose(crement, invert)', '()'), ('mapply(fork(shoot, center, a1), a2)', "('Callable', 'Container[Container]')"), ('chain(invert, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(combine, dneighbors, fork(insert, a1, a2))', "('Callable', 'Callable')"), ('fork(difference, identity, fork(sfilter, identity, a1))', "('Callable',)"), ('compose(lbind(compose, a1), a2)', "('Any', 'Callable')"), ('chain(a1, a2, chain(a3, ineighbors, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(recolor_o, color, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(a1, dedupe)(a2)', "('Callable', 'Any')"), ('compose(rbind(col_row, R0), a1)', "('Callable',)"), ('fork(recolor_i, compose(a1, color), outbox)', "('Callable',)"), ('compose(lbind(greater, FIVE), a1)', "('Callable',)"), ('apply(rbind(get_nth_f, L1), a1)', "('Container',)"), ('compose(a1, rbind(toobject, a2))', "('Callable', 'Any')"), ('chain(a1, compose(asobject, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, lbind(lbind, manhattan), initset)', "('Callable',)"), ('chain(positive, size, rbind(difference, a1))', "('Any',)"), ('get_arg_rank_f(a1, fork(multiply, height_f, width_f), F0)', "('FrozenSet',)"), ('fork(subtract, identity, crement)', '()'), ('compose(rbind(mir_rot_t, R3), a1)', "('Callable',)"), ('chain(a1, a2, fork(combine, dneighbors, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(add, THREE)', '()'), ('chain(double, decrement, width_f)(a1)', "('Any',)"), ('lbind(rbind, gravitate)', '()'), ('fork(either, vline_o, hline_o)', '()'), ('compose(backdrop, inbox)(a1)', "('Any',)"), ('chain(size, a1, lbind(sfilter, a2))', "('Callable', 'Any')"), ('fork(shoot, a1, fork(subtract, a1, a2))', "('Callable', 'Callable')"), ('chain(a1, lbind(rbind, intersection), toindices)', "('Callable',)"), ('compose(lbind(a1, ZERO), a2)', "('Callable', 'Callable')"), ('chain(a1, a2, a3)(a4)', "('Callable', 'Callable', 'Callable', 'Any')"), ('mapply(fork(combine, hfrontier, vfrontier), a1)', "('Container[Container]',)"), ('chain(size, rbind(difference, a1), a2)', "('Any', 'Callable')"), ('fork(combine, identity, rbind(mir_rot_f, R2))', '()'), ('chain(lbind(a1, a2), a3, initset)', "('Callable', 'Any', 'Callable')"), ('mapply(fork(connect, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(combine, hfrontier, vfrontier)', '()'), ('matcher(compose(a1, a2), UNITY)', "('Callable', 'Callable')"), ('compose(lbind(occurrences, a1), a2)', "('Any', 'Callable')"), ('fork(subtract, fork(subtract, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(canvas, UNITY), a1)', "('Callable',)"), ('fork(equality, size, fork(multiply, height_f, width_f))', '()'), ('fork(astuple, a1, fork(add, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(shoot, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('sfilter(a1, matcher(a2, EIGHT))', "('Container', 'Callable')"), ('chain(even, rbind(manhattan, a1), initset)', "('Any',)"), ('fork(both, compose(a1, size), a2)', "('Callable', 'Callable')"), ('sfilter_f(a1, compose(a2, size))', "('FrozenSet', 'Callable')"), ('fork(a1, a2, chain(a3, a4, toindices))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('apply(lbind(astuple, a1), a2)', "('Any', 'Container')"), ('fork(connect, compose(center, a1), a2)', "('Callable', 'Callable')"), ('rbind(colorcount_f, ZERO)', '()'), ('compose(a1, fork(sfilter, identity, a2))', "('Callable', 'Callable')"), ('compose(initset, rbind(mir_rot_f, R2))', '()'), ('fork(position, a1, fork(difference, identity, a1))', "('Callable',)"), ('fork(add, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(recolor_o, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(gravitate, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('rbind(add, DOWN)', '()'), ('fork(sfilter, a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('chain(toivec, lbind(subtract, a1), a2)', "('Any', 'Callable')"), ('lbind(rbind(fork, a1), multiply)', "('Any',)"), ('rbind(col_row, R1)', '()'), ('compose(rbind(mir_rot_f, R0), a1)', "('Callable',)"), ('fork(equality, rbind(mir_rot_t, R1), identity)', '()'), ('fork(difference, box, corners)(a1)', "('Any',)"), ('apply(lbind(multiply, a1), a2)', "('Any', 'Container')"), ('sfilter_f(a1, chain(positive, size, a2))', "('FrozenSet', 'Callable')"), ('mapply(fork(recolor_i, color, backdrop), a1)', "('Container[Container]',)"), ('fork(shoot, identity, chain(invert, a1, a2))', "('Callable', 'Callable')"), ('compose(a1, fork(insert, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(palette_t, trim, rbind(subgrid, a1))', "('Any',)"), ('compose(invert, lbind(colorcount_t, a1))', "('Any',)"), ('chain(color, merge, frontiers)(a1)', "('Any',)"), ('matcher(rbind(get_nth_f, F0), THREE)', '()'), ('chain(a1, a2, fork(subtract, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(astuple, a1, power(a2, TWO))', "('Callable', 'Callable')"), ('fork(extract, fork(sfilter, identity, a1), a2)', "('Callable', 'Callable')"), ('compose(center, rbind(get_nth_f, F0))', '()'), ('rbind(multiply, TEN)', '()'), ('compose(a1, compose(toivec, a2))', "('Callable', 'Callable')"), ('compose(merge, lbind(sizefilter, a1))', "('Any',)"), ('rbind(colorcount_f, ONE)', '()'), ('order(a1, compose(a2, center))', "('Container', 'Callable')"), ('lbind(lbind(chain, backdrop), inbox)', '()'), ('compose(a1, lbind(lbind, contained))', "('Callable',)"), ('matcher(rbind(colorcount_f, SIX), TWO)', '()'), ('compose(a1, rbind(f_ofcolor, ZERO))', "('Callable',)"), ('get_arg_rank_f(a1, rbind(colorcount_t, a2), F0)', "('FrozenSet', 'Any')"), ('fork(connect, a1, rbind(subtract, a2))', "('Callable', 'Any')"), ('fork(insert, rbind(mir_rot_f, R3), a1)', "('Callable',)"), ('lbind(colorfilter, a1)(SEVEN)', "('Any',)"), ('compose(a1, fork(a2, identity, identity))', "('Callable', 'Callable')"), ('rbind(other, FIVE)', '()'), ('compose(rbind(mir_rot_t, R1), a1)', "('Callable',)"), ('chain(initset, lbind(a1, a2), a3)', "('Callable', 'Any', 'Callable')"), ('fork(mapply, lbind(lbind, shift), a1)', "('Callable',)"), ('get_arg_rank_f(a1, lbind(intersection, a2), F0)', "('FrozenSet', 'Any')"), ('chain(a1, lbind(sfilter, a2), a3)', "('Callable', 'Any', 'Callable')"), ('rbind(f_ofcolor, FOUR)', '()'), ('lbind(shift, a1(a2))', "('Callable', 'Any')"), ('apply(compose(toindices, normalize), a1)', "('Container',)"), ('compose(a1, rbind(vsplit, a2))', "('Callable', 'Any')"), ('get_arg_rank_f(a1, chain(numcolors_t, lefthalf, tophalf), F0)', "('FrozenSet',)"), ('sfilter_f(a1, rbind(adjacent, a2))', "('FrozenSet', 'Any')"), ('fork(recolor_o, a1, fork(shift, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('power(outbox, TWO)', '()'), ('a1(fork(combine, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(insert, rbind(mir_rot_f, R1), a1)', "('Callable',)"), ('mfilter_f(a1, compose(a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('branch(a1, identity, rbind(mir_rot_t, R2))', "('bool',)"), ('compose(lbind(a1, inbox), a2)', "('Callable', 'Callable')"), ('branch(a1, a2, rbind(col_row, R1))', "('bool', 'Any')"), ('chain(a1, rbind(f_ofcolor, ZERO), a2)', "('Callable', 'Callable')"), ('fork(add, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('rbind(mir_rot_f, R1)', '()'), ('mapply(rbind(shoot, UP), a1)', "('Container[Container]',)"), ('chain(a1, a2, fork(a3, a4, a5))', "('Callable', 'Callable', 'Callable', 'Callable', 'Callable')"), ('fork(sfilter, fork(shoot, identity, a1), a2)', "('Callable', 'Callable')"), ('fork(difference, compose(toindices, a1), a2)', "('Callable', 'Callable')"), ('fork(recolor_i, color, fork(connect, center, a1))', "('Callable',)"), ('apply(fork(astuple, a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('fork(subtract, a1, compose(center, a2))', "('Callable', 'Callable')"), ('rbind(sfilter, chain(flip, a1, a2))', "('Callable', 'Callable')"), ('lbind(rbind(get_arg_rank, L1), a1)', "('Any',)"), ('fork(multiply, shape_f, fork(position, a1, a2))', "('Callable', 'Callable')"), ('matcher(rbind(colorcount_f, a1), TWO)', "('Any',)"), ('rbind(rbind(interval, a1), a2)', "('Any', 'Any')"), ('fork(equality, a1, rbind(col_row, R0))', "('Callable',)"), ('extract(a1, compose(a2, a3))', "('Container', 'Callable', 'Callable')"), ('fork(either, a1, matcher(a2, a3))', "('Callable', 'Callable', 'Any')"), ('lbind(lbind, colorcount_f)', '()'), ('apply(rbind(corner, R1), a1)', "('Container',)"), ('compose(a1, fork(shoot, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(recolor_o, chain(a1, a2, outbox), a3)', "('Callable', 'Callable', 'Callable')"), ('branch(a1, a2, rbind(mir_rot_t, R0))', "('bool', 'Any')"), ('chain(a1, rbind(sfilter, a2), normalize)', "('Callable', 'Any')"), ('compose(a1, rbind(corner, R2))', "('Callable',)"), ('compose(lbind(shift, a1), a2)', "('Any', 'Callable')"), ('lbind(rbind, adjacent)', '()'), ('fork(lbind(prapply, connect), a1, a1)', "('Callable',)"), ('chain(a1, a2, lbind(rbind, astuple))', "('Callable', 'Callable')"), ('apply(fork(recolor_i, color, a1), a2)', "('Callable', 'Container')"), ('mapply(compose(a1, tojvec), a2)', "('Callable', 'Container[Container]')"), ('fork(vconcat, compose(a1, height_t), a2)', "('Callable', 'Callable')"), ('compose(lbind(mapply, hfrontier), a1)', "('Callable',)"), ('compose(a1, lbind(rbind, sfilter))', "('Callable',)"), ('chain(a1, a2, lbind(lbind, contained))', "('Callable', 'Callable')"), ('compose(decrement, width_f)', '()'), ('fork(vconcat, a1, fork(vconcat, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('a1(lbind(contained, TWO))', "('Callable',)"), ('branch(a1, rbind(col_row, R0), a2)', "('bool', 'Any')"), ('chain(rbind(sfilter, a1), vfrontier, center)', "('Any',)"), ('fork(sfilter, identity, compose(a1, a2))', "('Callable', 'Callable')"), ('lbind(matcher, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(fork(a1, identity, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(decrement, fork(add, height_f, width_f))', '()'), ('chain(lbind(a1, size), a2, toindices)', "('Callable', 'Callable')"), ('compose(lbind(add, RIGHT), a1)', "('Callable',)"), ('chain(rbind(get_nth_f, F0), a1, color)', "('Callable',)"), ('matcher(numcolors_f, ONE)', '()'), ('fork(equality, identity, compose(a1, a2))', "('Callable', 'Callable')"), ('fork(shift, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('insert(rbind(mir_rot_f, R3), a1)', "('FrozenSet',)"), ('fork(recolor_i, compose(color, a1), a2)', "('Callable', 'Callable')"), ('compose(normalize, toindices)(a1)', "('Any',)"), ('compose(lbind(remove, ZERO), a1)', "('Callable',)"), ('compose(rbind(contained, a1), a2)', "('Any', 'Callable')"), ('matcher(numcolors_f, TWO)', '()'), ('chain(a1, palette_f, chain(a2, corners, outbox))', "('Callable', 'Callable')"), ('fork(add, chain(a1, size, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(combine, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(decrement, rbind(get_nth_f, F0), rbind(get_nth_f, F0))', '()'), ('compose(backdrop, compose(a1, a2))', "('Callable', 'Callable')"), ('fork(intersection, a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('compose(color, rbind(get_nth_f, F0))', '()'), ('mapply(fork(intersection, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('chain(a1, rbind(intersection, a2), a3)', "('Callable', 'Any', 'Callable')"), ('mfilter_f(a1, matcher(a2, a3))', "('FrozenSet', 'Callable', 'Any')"), ('chain(a1, lbind(remove, TWO), palette_f)', "('Callable',)"), ('fork(shoot, a1, fork(subtract, a2, a1))', "('Callable', 'Callable')"), ('lbind(contained, a1(a2))', "('Callable', 'Any')"), ('extract(a1, matcher(size, ONE))', "('Container',)"), ('matcher(color, ZERO)', '()'), ('chain(a1, a2, lbind(matcher, normalize))', "('Callable', 'Callable')"), ('chain(rbind(apply, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('apply(fork(insert, identity, neighbors), a1)', "('Container',)"), ('branch(a1, rbind(col_row, R2), a2)', "('bool', 'Any')"), ('lbind(prapply, manhattan)', '()'), ('compose(hfrontier, center)', '()'), ('sfilter_f(a1, compose(a2, initset))', "('FrozenSet', 'Callable')"), ('mapply(fork(recolor_o, a1, identity), a2)', "('Callable', 'Container[Container]')"), ('compose(lbind(recolor_i, a1), a2)', "('Any', 'Callable')"), ('rbind(col_row, R3)', '()'), ('chain(size, rbind(intersection, a1), delta)', "('Any',)"), ('rbind(greater, TWO)', '()'), ('get_val_rank_f(a1, compose(a2, a3), F0)', "('FrozenSet', 'Callable', 'Callable')"), ('fork(position, fork(sfilter, identity, a1), a2)', "('Callable', 'Callable')"), ('lbind(chain, compose(positive, size))', '()'), ('lbind(rbind, astuple)', '()'), ('rbind(f_ofcolor, ZERO)', '()'), ('lbind(rbind, equality)', '()'), ('chain(a1, lbind(remove, ZERO), palette_f)', "('Callable',)"), ('sfilter_f(a1, lbind(hmatching, a2))', "('FrozenSet', 'Any')"), ('rbind(mir_rot_t, R0)', '()'), ('chain(size, rbind(intersection, a1), a2)', "('Any', 'Callable')"), ('lbind(apply, tojvec)', '()'), ('fork(mapply, a1, fork(occurrences, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(astuple, power(a1, TWO), a2)', "('Callable', 'Callable')"), ('compose(rbind(get_nth_f, F0), toindices)', '()'), ('lbind(compose, toindices)(a1)', "('Any',)"), ('compose(rbind(hconcat, a1), a2)', "('Any', 'Callable')"), ('chain(a1, double, matcher(a2, UNITY))', "('Callable', 'Callable')"), ('chain(flip, rbind(contained, a1), a2)', "('Any', 'Callable')"), ('fork(connect, a1, power(a2, TWO))', "('Callable', 'Callable')"), ('compose(lbind(greater, FOUR), numcolors_t)', '()'), ('chain(lbind(occurrences, a1), a2, normalize)', "('Any', 'Callable')"), ('fork(manhattan, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('compose(toindices, normalize)', '()'), ('fork(difference, box, corners)', '()'), ('compose(lbind(greater, SIX), size)', '()'), ('mapply(fork(recolor_o, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('compose(a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('branch(a1, identity, rbind(mir_rot_t, R0))', "('bool',)"), ('chain(lbind(a1, multiply), a2, a3)', "('Callable', 'Callable', 'Callable')"), ('fork(recolor_o, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('sfilter_f(a1, compose(a2, palette_f))', "('FrozenSet', 'Callable')"), ('rbind(divide, THREE)', '()'), ('sfilter_f(a1, fork(either, vline_i, hline_i))', "('FrozenSet',)"), ('rbind(colorcount_t, ZERO)', '()'), ('chain(a1, rbind(colorcount_f, a2), a3)', "('Callable', 'Any', 'Callable')"), ('fork(subtract, a1, rbind(get_nth_f, F0))', "('Callable',)"), ('sfilter_f(a1, compose(a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('fork(combine, identity, a1)(a2)', "('Callable', 'Any')"), ('compose(rbind(mir_rot_t, R1), dedupe)', '()'), ('chain(a1, a2, rbind(subgrid, a3))', "('Callable', 'Callable', 'Any')"), ('fork(recolor_i, color, fork(intersection, a1, a2))', "('Callable', 'Callable')"), ('compose(merge, a1)(TWO)', "('Callable',)"), ('compose(lbind(colorfilter, a1), color)', "('Any',)"), ('apply(rbind(get_nth_f, F0), a1)', "('Container',)"), ('mapply(fork(shoot, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('order(a1, compose(invert, a2))', "('Container', 'Callable')"), ('fork(a1, identity, rbind(add, THREE))', "('Callable',)"), ('compose(fork(combine, a1, a2), center)', "('Callable', 'Callable')"), ('fork(remove, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('compose(a1, rbind(a2, a3))', "('Callable', 'Callable', 'Any')"), ('fork(both, fork(either, hline_i, vline_i), a1)', "('Callable',)"), ('rbind(shoot, RIGHT)', '()'), ('lbind(rbind, multiply)', '()'), ('fork(multiply, shape_f, chain(tojvec, a1, a2))', "('Callable', 'Callable')"), ('compose(a1, fork(difference, identity, a2))', "('Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(colorcount_f, TWO), F0)', "('FrozenSet',)"), ('compose(a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(subtract, compose(a1, delta), a2)', "('Callable', 'Callable')"), ('fork(shift, rbind(mir_rot_f, R2), a1)', "('Callable',)"), ('chain(increment, lbind(subtract, a1), width_f)', "('Any',)"), ('rbind(get_rank, L1)', '()'), ('fork(vconcat, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('lbind(matcher, rbind(get_nth_f, F0))', '()'), ('compose(chain(a1, palette_f, a2), dneighbors)', "('Callable', 'Callable')"), ('compose(size, rbind(f_ofcolor, ZERO))', '()'), ('compose(toindices, normalize)(a1)', "('Any',)"), ('rbind(compose, initset)', '()'), ('compose(vline_i, fork(shoot, a1, a2))', "('Callable', 'Callable')"), ('matcher(compose(toindices, normalize), a1)', "('Any',)"), ('fork(apply, a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('chain(positive, size, compose(a1, a2))', "('Callable', 'Callable')"), ('matcher(a1, a1(a2))', "('Callable', 'Any')"), ('rbind(contained, a1(a2))', "('Callable', 'Any')"), ('chain(a1, size, rbind(difference, a2))', "('Callable', 'Any')"), ('chain(lbind(contained, a1), palette_f, a2)', "('Any', 'Callable')"), ('chain(increment, a1, rbind(get_nth_f, F0))', "('Callable',)"), ('chain(a1, rbind(get_rank, L1), a2)', "('Callable', 'Callable')"), ('apply(rbind(toobject, a1), a2)', "('Any', 'Container')"), ('extract(a1, compose(flip, a2))', "('Container', 'Callable')"), ('lbind(rbind, add)', '()'), ('lbind(compose, matcher(a1, ZERO))', "('Callable',)"), ('matcher(size, ZERO)', '()'), ('chain(lbind(apply, initset), corners, a1)', "('Callable',)"), ('compose(a1, rbind(get_color_rank_f, F0))', "('Callable',)"), ('chain(a1, lbind(lbind, a2), a3)', "('Callable', 'Any', 'Callable')"), ('compose(a1, lbind(rbind, astuple))', "('Callable',)"), ('fork(combine, a1, chain(a2, delta, a1))', "('Callable', 'Callable')"), ('chain(size, dedupe, a1)(a2)', "('Callable', 'Any')"), ('fork(lbind(prapply, manhattan), identity, identity)', '()'), ('fork(product, identity, identity)', '()'), ('compose(rbind(multiply, THREE), a1)', "('Callable',)"), ('chain(rbind(compose, initset), a1, initset)', "('Callable',)"), ('power(fork(vconcat, a1, a2), a3)', "('Callable', 'Callable', 'int')"), ('chain(rbind(corner, R0), a1, a2)', "('Callable', 'Callable')"), ('fork(combine, vfrontier, hfrontier)', '()'), ('matcher(rbind(get_nth_f, F0), ZERO)', '()'), ('compose(halve, width_f)', '()'), ('sfilter_f(a1, matcher(a2, THREE))', "('FrozenSet', 'Callable')"), ('compose(fork(product, identity, identity), a1)', "('Callable',)"), ('compose(rbind(shoot, DOWN), center)', '()'), ('compose(chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('rbind(get_arg_rank, F0)', '()'), ('chain(size, lbind(remove, a1), palette_t)', "('Any',)"), ('sfilter_t(a1, rbind(get_nth_f, L1))', "('Tuple',)"), ('fork(apply, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('compose(rbind(get_nth_f, F0), a1)', "('Callable',)"), ('rbind(mir_rot_t, R4)', '()'), ('chain(a1, lbind(occurrences, a2), a3)', "('Callable', 'Any', 'Callable')"), ('compose(rbind(add, a1), a2)', "('Any', 'Callable')"), ('fork(intersection, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(add, compose(double, a1), a2)', "('Callable', 'Callable')"), ('chain(a1, a2, lbind(colorfilter, a3))', "('Callable', 'Callable', 'Any')"), ('fork(greater, a1, chain(decrement, a2, a2))', "('Callable', 'Callable')"), ('fork(either, a1, rbind(hmatching, a2))', "('Callable', 'Any')"), ('fork(either, hline_i, vline_i)', '()'), ('extract(a1, matcher(a2, ZERO))', "('Container', 'Callable')"), ('lbind(remove, TWO)', '()'), ('compose(a1, fork(apply, a2, palette_f))', "('Callable', 'Callable')"), ('mapply(fork(shift, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('branch(a1, a2, rbind(col_row, R2))', "('bool', 'Any')"), ('fork(shift, identity, a1(TWO))', "('Callable',)"), ('fork(shoot, center, lbind(position, a1))', "('Any',)"), ('chain(fork(a1, positive, decrement), a2, a3)', "('Callable', 'Callable', 'Callable')"), ('a1(rbind(corner, R0))', "('Callable',)"), ('compose(lbind(lbind, shift), a1)', "('Callable',)"), ('chain(power(double, TWO), double, a1)', "('Callable',)"), ('compose(lbind(contained, THREE), a1)', "('Callable',)"), ('compose(lbind(greater, EIGHT), size)', '()'), ('sfilter(a1, chain(a2, size, a3))', "('Container', 'Callable', 'Callable')"), ('fork(multiply, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('chain(size, a1, chain(toindices, a2, normalize))', "('Callable', 'Callable')"), ('fork(combine, fork(connect, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('rbind(multiply, THREE)', '()'), ('fork(both, a1, fork(either, vline_i, hline_i))', "('Callable',)"), ('fork(both, a1, fork(greater, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(color, chain(a1, corners, outbox))', "('Callable',)"), ('fork(equality, compose(a1, a2), a1)', "('Callable', 'Callable')"), ('fork(either, matcher(a1, a2), a3)', "('Callable', 'Any', 'Callable')"), ('chain(increment, lbind(subtract, a1), height_f)', "('Any',)"), ('chain(flip, a1, lbind(add, NEG_UNITY))', "('Callable',)"), ('fork(add, compose(invert, a1), a2)', "('Callable', 'Callable')"), ('fork(remove, compose(a1, a2), a2)', "('Callable', 'Callable')"), ('chain(a1, corners, compose(backdrop, a2))', "('Callable', 'Callable')"), ('apply(rbind(order, invert), a1)', "('Container',)"), ('fork(sfilter, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('rbind(get_nth_f, F0)', '()'), ('chain(increment, rbind(get_nth_f, L1), a1)', "('Callable',)"), ('fork(shift, a1, a2(a3))', "('Callable', 'Callable', 'Any')"), ('apply(rbind(multiply, a1), a2)', "('Any', 'Container')"), ('chain(decrement, rbind(get_rank, L1), shape_f)', '()'), ('compose(lbind(compose, size), a1)', "('Callable',)"), ('fork(recolor_i, color, compose(neighbors, center))', '()'), ('compose(center, rbind(sfilter, a1))', "('Any',)"), ('compose(a1, rbind(corner, R0))', "('Callable',)"), ('fork(connect, a1, fork(add, a1, a2))', "('Callable', 'Callable')"), ('fork(manhattan, initset, chain(initset, a1, a2))', "('Callable', 'Callable')"), ('apply(fork(shift, identity, a1), a2)', "('Callable', 'Container')"), ('fork(apply, a1, chain(a2, a3, normalize))', "('Callable', 'Callable', 'Callable')"), ('rbind(compose, compose(a1, a2))', "('Callable', 'Callable')"), ('matcher(rbind(colorcount_t, ZERO), a1)', "('Any',)"), ('chain(lbind(mapply, vfrontier), a1, a2)', "('Callable', 'Callable')"), ('compose(flip, matcher(a1, ZERO))', "('Callable',)"), ('sfilter_f(a1, compose(even, height_f))', "('FrozenSet',)"), ('compose(rbind(corner, R3), a1)', "('Callable',)"), ('sfilter_f(a1, compose(even, a2))', "('FrozenSet', 'Callable')"), ('fork(vconcat, a1, rbind(mir_rot_t, R4))', "('Callable',)"), ('compose(a1, fork(add, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(greater, ONE), a1)', "('Callable',)"), ('fork(other, palette_f, compose(a1, a2))', "('Callable', 'Callable')"), ('mapply(chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Container[Container]')"), ('mfilter_f(a1, compose(flip, a2))', "('FrozenSet', 'Callable')"), ('chain(a1, a2, lbind(compose, a3))', "('Callable', 'Callable', 'Any')"), ('sfilter_f(a1, chain(flip, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('sfilter_f(a1, matcher(numcolors_f, TWO))', "('FrozenSet',)"), ('mfilter_f(a1, chain(flip, a2, palette_t))', "('FrozenSet', 'Callable')"), ('compose(flip, matcher(a1, THREE))', "('Callable',)"), ('chain(size, a1, lbind(shift, a2))', "('Callable', 'Any')"), ('fork(add, identity, fork(subtract, identity, crement))', '()'), ('compose(a1, rbind(f_ofcolor, FOUR))', "('Callable',)"), ('compose(even, rbind(get_nth_f, L1))', '()'), ('fork(subtract, rbind(get_rank, F0), a1)', "('Callable',)"), ('compose(invert, chain(a1, size, a2))', "('Callable', 'Callable')"), ('mfilter_f(a1, chain(a2, a3, a4))', "('FrozenSet', 'Callable', 'Callable', 'Callable')"), ('fork(shift, identity, chain(toivec, a1, a2))', "('Callable', 'Callable')"), ('lbind(compose, matcher(size, ZERO))', '()'), ('fork(shoot, compose(center, a1), a2)', "('Callable', 'Callable')"), ('extract(a1, matcher(color, a2))', "('Container', 'Any')"), ('extract(a1, matcher(a2, a3))', "('Container', 'Callable', 'Any')"), ('fork(apply, lbind(lbind, colorcount_f), palette_f)', '()'), ('lbind(remove, ZERO)', '()'), ('a1(rbind(corner, R1))', "('Callable',)"), ('sfilter_f(a1, matcher(a2, TWO))', "('FrozenSet', 'Callable')"), ('chain(chain(size, a1, palette_t), a2, a3)', "('Callable', 'Callable', 'Callable')"), ('chain(matcher(size, ZERO), a1, a2)', "('Callable', 'Callable')"), ('compose(size, lbind(sfilter, a1))', "('Any',)"), ('apply(rbind(multiply, THREE), a1)', "('Container',)"), ('compose(lbind(a1, a2), a3)', "('Callable', 'Any', 'Callable')"), ('chain(rbind(toobject, a1), ineighbors, a2)', "('Any', 'Callable')"), ('fork(apply, a1, lbind(occurrences, a2))', "('Callable', 'Any')"), ('initset(compose(a1, a2))', "('Callable', 'Callable')"), ('chain(a1, merge, rbind(repeat, a2))', "('Callable', 'Any')"), ('chain(fork(apply, a1, a2), asobject, a3)', "('Callable', 'Callable', 'Callable')"), ('fork(product, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(connect, a1, compose(center, a2))', "('Callable', 'Callable')"), ('apply(fork(recolor_i, color, backdrop), a1)', "('Container',)"), ('compose(rbind(col_row, R1), a1)', "('Callable',)"), ('chain(a1, rbind(shift, NEG_UNITY), a2)', "('Callable', 'Callable')"), ('compose(chain(toivec, decrement, double), a1)', "('Callable',)"), ('rbind(rbind(get_val_rank, F0), width_f)', '()'), ('lbind(compose, fork(sfilter, identity, a1))', "('Callable',)"), ('mapply(compose(backdrop, inbox), a1)', "('Container[Container]',)"), ('fork(recolor_o, compose(color, a1), a2)', "('Callable', 'Callable')"), ('fork(recolor_o, a1, fork(upscale_f, a2, width_f))', "('Callable', 'Callable')"), ('chain(initset, a1, lbind(rapply, a2))', "('Callable', 'Any')"), ('rbind(mir_rot_f, R3)', '()'), ('fork(recolor_o, compose(a1, palette_f), identity)', "('Callable',)"), ('chain(initset, center, fork(connect, a1, a2))', "('Callable', 'Callable')"), ('compose(a1, fork(remove, a2, identity))', "('Callable', 'Callable')"), ('get_arg_rank_f(a1, rbind(col_row, R0), F0)', "('FrozenSet',)"), ('compose(power(double, TWO), a1)', "('Callable',)"), ('a1(rbind(corner, R2))', "('Callable',)"), ('rbind(f_ofcolor, ONE)', '()'), ('lbind(compose, chain(a1, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('lbind(recolor_o, ZERO)', '()'), ('chain(lbind(mapply, hfrontier), a1, a2)', "('Callable', 'Callable')"), ('fork(subtract, a1, compose(a1, a2))', "('Callable', 'Callable')"), ('chain(lbind(sfilter, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('fork(intersection, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('compose(a1, fork(rapply, a2, identity))', "('Callable', 'Callable')"), ('lbind(mapply, fork(combine, hfrontier, vfrontier))', '()'), ('rbind(sfilter, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(lbind(index, a1), a2)', "('Any', 'Callable')"), ('mapply(power(outbox, THREE), a1)', "('Container[Container]',)"), ('compose(a1, compose(a2, initset))', "('Callable', 'Callable')"), ('compose(fork(add, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(equality, identity, rbind(mir_rot_t, R4))', '()'), ('fork(apply, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('mapply(power(outbox, TWO), a1)', "('Container[Container]',)"), ('fork(subtract, rbind(corner, R0), a1)', "('Callable',)"), ('compose(width_f, inbox)', '()'), ('matcher(chain(a1, a2, neighbors), EIGHT)', "('Callable', 'Callable')"), ('chain(a1, lbind(rbind, multiply), a2)', "('Callable', 'Callable')"), ('mapply(fork(shoot, identity, a1), a2)', "('Callable', 'Container[Container]')"), ('compose(invert, fork(equality, a1, a2))', "('Callable', 'Callable')"), ('fork(rbind(branch, NEG_TWO), positive, decrement)', '()'), ('chain(a1, lbind(a2, a3), a4)', "('Callable', 'Callable', 'Any', 'Callable')"), ('fork(shift, a1, chain(invert, halve, shape_f))', "('Callable',)"), ('chain(positive, decrement, rbind(colorcount_f, a1))', "('Any',)"), ('chain(a1, merge, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('chain(toivec, invert, height_f)', '()'), ('fork(add, center, rbind(gravitate, a1))', "('Any',)"), ('power(chain(outbox, outbox, a1), TWO)', "('Callable',)"), ('lbind(astuple, NINE)', '()'), ('compose(dneighbors, rbind(get_nth_f, L1))', '()'), ('apply(rbind(col_row, R1), a1)', "('Container',)"), ('fork(insert, a1, fork(insert, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(lbind(rbind, add), a1)', "('Callable',)"), ('chain(a1, rbind(toobject, a2), delta)', "('Callable', 'Any')"), ('apply(lbind(rbind, difference), a1)', "('Container',)"), ('matcher(rbind(f_ofcolor, ZERO), a1)', "('Any',)"), ('fork(difference, toindices, box)', '()'), ('chain(toivec, a1, fork(position, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(interval, ONE)', '()'), ('apply(lbind(rbind, upscale_f), a1)', "('Container',)"), ('apply(rbind(order, identity), a1)', "('Container',)"), ('fork(compose, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('matcher(compose(a1, a2), FIVE)', "('Callable', 'Callable')"), ('branch(a1, rbind(mir_rot_t, R1), identity)', "('bool',)"), ('fork(shoot, identity, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(lbind(mapply, vfrontier), a1)', "('Callable',)"), ('rbind(rbind(get_arg_rank, L1), centerofmass)', '()'), ('rbind(subgrid, a1(a2))', "('Callable', 'Any')"), ('fork(recolor_i, color, fork(connect, a1, a2))', "('Callable', 'Callable')"), ('lbind(matcher, normalize)', '()'), ('compose(asobject, fork(paint, a1, a2))', "('Callable', 'Callable')"), ('mapply(fork(recolor_i, identity, a1), a2)', "('Callable', 'Container[Container]')"), ('apply(lbind(astuple, NINE), a1)', "('Container',)"), ('fork(add, a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('chain(a1, a2, compose(normalize, a3))', "('Callable', 'Callable', 'Callable')"), ('mapply(fork(difference, toindices, box), a1)', "('Container[Container]',)"), ('fork(a1, chain(a2, a3, a4), a5)', "('Callable', 'Callable', 'Callable', 'Callable', 'Callable')"), ('mapply(fork(recolor_i, color, a1), a2)', "('Callable', 'Container[Container]')"), ('fork(add, rbind(corner, R3), a1)', "('Callable',)"), ('mfilter_f(a1, fork(either, vline_o, hline_o))', "('FrozenSet',)"), ('chain(chain(positive, decrement, a1), a2, dneighbors)', "('Callable', 'Callable')"), ('compose(double, rbind(a1, width_f))', "('Callable',)"), ('a1(chain(toivec, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(intersection, a1(a2))', "('Callable', 'Any')"), ('chain(invert, chain(toivec, decrement, double), a1)', "('Callable',)"), ('rbind(rbind(get_arg_rank, F0), a1)', "('Any',)"), ('mfilter_f(a1, fork(both, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('rbind(a1, compose(asobject, a2))', "('Callable', 'Callable')"), ('compose(a1, rbind(col_row, R3))', "('Callable',)"), ('lbind(lbind, astuple)', '()'), ('chain(a1, rbind(corner, R0), a2)', "('Callable', 'Callable')"), ('rbind(sfilter, matcher(a1, FIVE))', "('Callable',)"), ('compose(a1, fork(apply, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('order(a1, compose(invert, size))', "('Container',)"), ('fork(subtract, a1, a2)(a3)', "('Callable', 'Callable', 'Any')"), ('chain(ineighbors, rbind(get_nth_f, L1), a1)', "('Callable',)"), ('rbind(branch, NEG_TWO)', '()'), ('compose(lbind(mapply, a1), a2)', "('Any', 'Callable')"), ('rbind(corner, R1)', '()'), ('chain(a1, a2, rbind(sfilter, a3))', "('Callable', 'Callable', 'Any')"), ('lbind(contained, THREE)', '()'), ('sfilter(a1, compose(a2, size))', "('Container', 'Callable')"), ('fork(combine, fork(combine, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, a2, power(outbox, TWO))', "('Callable', 'Callable')"), ('mfilter_f(a1, fork(equality, identity, box))', "('FrozenSet',)"), ('compose(positive, size)', '()'), ('chain(toindices, rbind(upscale_f, TWO), normalize)', '()'), ('mapply(lbind(shift, a1), a2)', "('Any', 'Container[Container]')"), ('apply(fork(recolor_o, a1, identity), a2)', "('Callable', 'Container')"), ('compose(merge, fork(a1, a2, a2))', "('Callable', 'Callable')"), ('chain(lbind(rbind, gravitate), a1, a2)', "('Callable', 'Callable')"), ('get_arg_rank_f(a1, compose(size, a2), F0)', "('FrozenSet', 'Callable')"), ('compose(rbind(upscale_f, TWO), a1)', "('Callable',)"), ('fork(rbind(interval, ONE), identity, a1)', "('Callable',)"), ('compose(lbind(recolor_o, ZERO), a1)', "('Callable',)"), ('fork(recolor_i, color, chain(ineighbors, a1, a2))', "('Callable', 'Callable')"), ('compose(a1, chain(a2, a3, size))', "('Callable', 'Callable', 'Callable')"), ('mfilter(a1, matcher(a2, TWO))', "('Container', 'Callable')"), ('compose(lbind(other, a1), color)', "('Any',)"), ('chain(rbind(subgrid, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('power(decrement, TWO)(a1)', "('Any',)"), ('lbind(apply, toivec)', '()'), ('chain(a1, lbind(apply, a2), a3)', "('Callable', 'Any', 'Callable')"), ('compose(flip, fork(equality, a1, identity))', "('Callable',)"), ('compose(a1, chain(increment, a2, height_f))', "('Callable', 'Callable')"), ('branch(a1, compose(a2, a3), a4)', "('bool', 'Callable', 'Callable', 'Any')"), ('chain(a1, a2, compose(a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('compose(size, a1)(hline_o)', "('Callable',)"), ('compose(size, rbind(intersection, a1))', "('Any',)"), ('fork(both, a1, rbind(adjacent, a2))', "('Callable', 'Any')"), ('compose(rbind(corner, R0), a1)', "('Callable',)"), ('rbind(chain, compose(dneighbors, a1))', "('Callable',)"), ('rbind(greater, THREE)', '()'), ('sfilter_f(a1, fork(equality, toindices, backdrop))', "('FrozenSet',)"), ('fork(occurrences, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(initset, rbind(add, ZERO_BY_TWO))', '()'), ('fork(apply, chain(a1, a2, normalize), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(shift, identity, a1(a2))', "('Callable', 'Any')"), ('sfilter_f(a1, matcher(numcolors_f, ONE))', "('FrozenSet',)"), ('lbind(rbind(interval, ONE), ZERO)', '()'), ('rbind(shoot, LEFT)', '()'), ('sfilter_f(a1, compose(a2, dneighbors))', "('FrozenSet', 'Callable')"), ('compose(a1, rbind(mir_rot_f, R1))', "('Callable',)"), ('chain(invert, halve, shape_f)', '()'), ('fork(a1, a2, compose(a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('lbind(greater, FIVE)', '()'), ('chain(a1, asobject, lbind(canvas, ZERO))', "('Callable',)"), ('fork(add, a1, fork(add, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('apply(compose(normalize, asobject), a1)', "('Container',)"), ('compose(a1, fork(vconcat, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(either, fork(vmatching, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(lbind(power, outbox), a1)', "('Callable',)"), ('rbind(shift, UP)', '()'), ('chain(lbind(hupscale, a1), decrement, height_t)', "('Any',)"), ('compose(rbind(get_nth_f, F0), center)', '()'), ('chain(double, decrement, width_f)', '()'), ('fork(insert, a1, compose(initset, a2))', "('Callable', 'Callable')"), ('apply(rbind(repeat, a1), a2)', "('Any', 'Container')"), ('fork(add, a1, chain(a2, double, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(multiply, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('sfilter_f(a1, lbind(vmatching, a2))', "('FrozenSet', 'Any')"), ('sfilter(a1, fork(both, a2, a3))', "('Container', 'Callable', 'Callable')"), ('rbind(compose, center)', '()'), ('lbind(greater, SIX)', '()'), ('extract(a1, fork(equality, size, a2))', "('Container', 'Callable')"), ('fork(add, fork(add, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(matcher(a1, TWO), a2, dneighbors)', "('Callable', 'Callable')"), ('compose(even, fork(manhattan, initset, a1))', "('Callable',)"), ('fork(toobject, fork(difference, asindices, a1), identity)', "('Callable',)"), ('fork(combine, a1, fork(combine, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, compose(a2, initset), F0)', "('FrozenSet', 'Callable')"), ('a1(fork(shift, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(col_row, R2)', '()'), ('apply(lbind(lbind, shift), a1)', "('Container',)"), ('chain(a1, rbind(compose, a2), a3)', "('Callable', 'Any', 'Callable')"), ('compose(fork(equality, identity, a1), a2)', "('Callable', 'Callable')"), ('fork(multiply, shape_f, chain(toivec, a1, a2))', "('Callable', 'Callable')"), ('fork(intersection, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('lbind(compose, compose(invert, a1))', "('Callable',)"), ('fork(shift, identity, compose(a1, toindices))', "('Callable',)"), ('chain(rbind(get_nth_f, F0), a1, toindices)', "('Callable',)"), ('fork(add, a1, compose(toivec, numcolors_f))', "('Callable',)"), ('apply(lbind(shift, a1), a2)', "('Any', 'Container')"), ('compose(lbind(shift, a1), tojvec)', "('Any',)"), ('fork(a1, lbind(f_ofcolor, a2), lbind(f_ofcolor, a2))', "('Callable', 'Any')"), ('compose(flip, matcher(size, SIX))', '()'), ('sfilter_f(a1, matcher(a2, FIVE))', "('FrozenSet', 'Callable')"), ('fork(intersection, a1, a2(a3))', "('Callable', 'Callable', 'Any')"), ('fork(recolor_i, a1, compose(a2, backdrop))', "('Callable', 'Callable')"), ('fork(hmatching, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('chain(a1, a2, a3)(TWO)', "('Callable', 'Callable', 'Callable')"), ('fork(vmatching, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('lbind(lbind, intersection)', '()'), ('sfilter_t(a1, compose(a2, numcolors_t))', "('Tuple', 'Callable')"), ('rbind(colorcount_f, FOUR)', '()'), ('fork(equality, identity, box)', '()'), ('chain(a1, a2, lbind(lbind, shift))', "('Callable', 'Callable')"), ('compose(rbind(other, FIVE), palette_f)', '()'), ('compose(a1, chain(a2, decrement, height_t))', "('Callable', 'Callable')"), ('compose(normalize, asobject)', '()'), ('fork(connect, rbind(corner, R2), a1)', "('Callable',)"), ('fork(equality, a1, rbind(col_row, R2))', "('Callable',)"), ('mapply(compose(backdrop, a1), a2)', "('Callable', 'Container[Container]')"), ('mapply(lbind(shoot, a1), a2)', "('Any', 'Container[Container]')"), ('fork(extract, a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('compose(rbind(shift, a1), a2)', "('Any', 'Callable')"), ('chain(rbind(get_color_rank_f, L1), a1, delta)', "('Callable',)"), ('fork(connect, rbind(add, a1), a2)', "('Any', 'Callable')"), ('order(a1, rbind(col_row, R1))', "('Container',)"), ('fork(difference, asindices, rbind(f_ofcolor, ZERO))', '()'), ('apply(lbind(apply, a1), a2)', "('Any', 'Container')"), ('matcher(chain(a1, a2, dneighbors), TWO)', "('Callable', 'Callable')"), ('compose(a1, chain(a2, a3, normalize))', "('Callable', 'Callable', 'Callable')"), ('compose(box, fork(astuple, a1, a2))', "('Callable', 'Callable')"), ('fork(lbind(fork, greater), a1, a2)', "('Callable', 'Callable')"), ('mapply(fork(combine, vfrontier, hfrontier), a1)', "('Container[Container]',)"), ('fork(a1, a2, compose(increment, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(shift, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('astuple(rbind(mir_rot_f, R0), a1)', "('int',)"), ('lbind(mapply, dneighbors)', '()'), ('compose(rbind(shift, UP), backdrop)', '()'), ('power(a1, THREE)(a2)', "('Callable', 'Any')"), ('fork(astuple, fork(add, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(rbind(greater, ONE), size, a1)', "('Callable',)"), ('mfilter_f(a1, rbind(adjacent, a2))', "('FrozenSet', 'Any')"), ('chain(even, a1, lbind(apply, a2))', "('Callable', 'Any')"), ('fork(intersection, fork(intersection, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(astuple, chain(a1, a2, a3), identity)', "('Callable', 'Callable', 'Callable')"), ('chain(toivec, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('fork(add, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('matcher(chain(size, a1, a2), ZERO)', "('Callable', 'Callable')"), ('compose(a1, compose(width_f, inbox))', "('Callable',)"), ('compose(lbind(recolor_i, ZERO), outbox)', '()'), ('compose(rbind(manhattan, a1), initset)', "('Any',)"), ('matcher(compose(size, a1), ZERO)', "('Callable',)"), ('compose(a1, matcher(a2, a3))', "('Callable', 'Callable', 'Any')"), ('rbind(subtract, TWO_BY_ZERO)', '()'), ('fork(recolor_i, color, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(fork(combine, vfrontier, hfrontier), center)', '()'), ('fork(connect, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(insert, rbind(subtract, ZERO_BY_TWO), a1)', "('Callable',)"), ('compose(a1, rbind(col_row, R2))', "('Callable',)"), ('compose(size, delta)', '()'), ('fork(difference, a1, compose(a2, toindices))', "('Callable', 'Callable')"), ('fork(connect, rbind(corner, R0), centerofmass)', '()'), ('sfilter_f(a1, compose(a2, numcolors_f))', "('FrozenSet', 'Callable')"), ('fork(equality, toindices, backdrop)', '()'), ('chain(initset, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('lbind(recolor_i, ZERO)', '()'), ('matcher(rbind(get_nth_f, F0), TWO)', '()'), ('chain(a1, a2, merge)(a3)', "('Callable', 'Callable', 'Any')"), ('rbind(colorcount_f, TWO)', '()'), ('lbind(apply, matcher(a1, a2))', "('Callable', 'Any')"), ('fork(shift, identity, fork(subtract, a1, a2))', "('Callable', 'Callable')"), ('fork(greater, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(lbind(apply, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('branch(a1, identity, fork(add, identity, a2))', "('bool', 'Callable')"), ('compose(vfrontier, tojvec)', '()'), ('compose(crement, fork(gravitate, a1, a2))', "('Callable', 'Callable')"), ('fork(rapply, chain(initset, a1, a2), identity)', "('Callable', 'Callable')"), ('a1(lbind(contained, THREE))', "('Callable',)"), ('rbind(sfilter, matcher(a1, TWO))', "('Callable',)"), ('chain(rbind(greater, TWO), size, a1)', "('Callable',)"), ('compose(chain(a1, a2, a3), toindices)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, a2, lbind(position, a3))', "('Callable', 'Callable', 'Any')"), ('fork(both, rbind(vmatching, a1), a2)', "('Any', 'Callable')"), ('fork(astuple, a1, fork(remove, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('extract(a1, fork(equality, toindices, box))', "('Container',)"), ('fork(recolor_i, color, compose(a1, center))', "('Callable',)"), ('fork(add, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(combine, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('compose(dedupe, totuple)', '()'), ('lbind(prapply, connect)', '()'), ('chain(rbind(colorcount_f, TWO), a1, a2)', "('Callable', 'Callable')"), ('compose(lbind(extract, a1), a2)', "('Any', 'Callable')"), ('compose(a1, toindices)(a2)', "('Callable', 'Any')"), ('compose(rbind(get_rank, L1), a1)', "('Callable',)"), ('compose(rbind(greater, TWO), size)', '()'), ('fork(intersection, a1, fork(mapply, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(either, rbind(vmatching, a1), a2)', "('Any', 'Callable')"), ('rbind(colorcount_f, SIX)', '()'), ('rbind(mir_rot_t, R3)', '()'), ('compose(a1, increment)(a2)', "('Callable', 'Any')"), ('extract(a1, matcher(a2, FOUR))', "('Container', 'Callable')"), ('mfilter_f(a1, fork(either, vline_i, hline_i))', "('FrozenSet',)"), ('matcher(a1, a2(a3))', "('Callable', 'Callable', 'Any')"), ('power(lbind(mapply, neighbors), TWO)', '()'), ('get_arg_rank_f(a1, compose(size, delta), F0)', "('FrozenSet',)"), ('compose(lbind(sfilter, a1), a2)', "('Any', 'Callable')"), ('compose(fork(both, a1, a2), initset)', "('Callable', 'Callable')"), ('lbind(matcher, rbind(get_nth_f, L1))', '()'), ('chain(invert, center, rbind(sfilter, a1))', "('Any',)"), ('compose(increment, rbind(corner, R0))', '()'), ('compose(toivec, rbind(col_row, R1))', '()'), ('chain(normalize, a1, fork(connect, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(shoot, UP_RIGHT)', '()'), ('fork(insert, rbind(mir_rot_f, R0), a1)', "('Callable',)"), ('fork(subtract, a1, chain(size, a2, delta))', "('Callable', 'Callable')"), ('rbind(corner, R2)', '()'), ('lbind(lbind, occurrences)', '()'), ('fork(a1, compose(invert, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(flip, chain(a1, palette_f, a2))', "('Callable', 'Callable')"), ('branch(a1, identity, rbind(mir_rot_f, R2))', "('bool',)"), ('compose(a1, rbind(divide, THREE))', "('Callable',)"), ('lbind(compose, compose(crement, invert))', '()'), ('get_arg_rank_t(a1, chain(size, a2, a3), F0)', "('Tuple', 'Callable', 'Callable')"), ('compose(size, dedupe)', '()'), ('fork(both, a1, matcher(a2, ONE))', "('Callable', 'Callable')"), ('rbind(upscale_f, TWO)', '()'), ('apply(rbind(subtract, a1), a2)', "('Any', 'Container')"), ('a1(chain(tojvec, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(a1, palette_f, rbind(toobject, a2))', "('Callable', 'Any')"), ('lbind(apply, fork(multiply, sign, identity))', '()'), ('fork(mapply, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(increment, chain(decrement, a1, shape_f))', "('Callable',)"), ('compose(lbind(canvas, ZERO), a1)', "('Callable',)"), ('compose(lbind(rbind, subtract), a1)', "('Callable',)"), ('rbind(colorcount_f, THREE)', '()'), ('extract(a1, chain(flip, a2, palette_t))', "('Container', 'Callable')"), ('fork(combine, a1, fork(shift, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('matcher(rbind(colorcount_f, FOUR), ZERO)', '()'), ('fork(subtract, a1, power(a2, TWO))', "('Callable', 'Callable')"), ('fork(subtract, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('lbind(mapply, lbind(shift, a1))', "('Any',)"), ('mfilter_f(a1, compose(a2, palette_f))', "('FrozenSet', 'Callable')"), ('branch(a1, identity, rbind(mir_rot_t, R1))', "('bool',)"), ('compose(rbind(col_row, R2), a1)', "('Callable',)"), ('compose(a1, lbind(rbind, manhattan))', "('Callable',)"), ('rbind(lbind(chain, a1), a2)', "('Any', 'Any')"), ('fork(recolor_i, chain(a1, a2, delta), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, a2, rbind(colorcount_f, TWO))', "('Callable', 'Callable')"), ('matcher(size, ONE)', '()'), ('fork(shift, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('chain(numcolors_t, lefthalf, tophalf)', '()'), ('fork(sfilter, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('fork(recolor_i, color, chain(a1, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(get_val_rank, F0)', '()'), ('compose(rbind(get_nth_f, L1), rbind(get_nth_f, L1))', '()'), ('compose(invert, size)', '()'), ('compose(a1, fork(subtract, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('rbind(get_nth_f, L1)', '()'), ('compose(chain(a1, size, a2), dneighbors)', "('Callable', 'Callable')"), ('fork(product, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(a1, rbind(sfilter, a2))', "('Callable', 'Any')"), ('rbind(canvas, UNITY)', '()'), ('apply(rbind(canvas, a1), a2)', "('Any', 'Container')"), ('chain(flip, lbind(contained, ZERO), palette_t)', '()'), ('lbind(matcher, compose(a1, a1))', "('Callable',)"), ('fork(either, a1, fork(hmatching, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(connect, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('fork(subtract, a1, chain(size, a2, outbox))', "('Callable', 'Callable')"), ('fork(combine, a1, rbind(shoot, UP_RIGHT))', "('Callable',)"), ('chain(rbind(mir_rot_f, R3), a1, merge)', "('Callable',)"), ('fork(subtract, a1, chain(a2, a3, toindices))', "('Callable', 'Callable', 'Callable')"), ('chain(a1, lbind(colorfilter, a2), color)', "('Callable', 'Any')"), ('chain(flip, a1, rbind(corner, R0))', "('Callable',)"), ('chain(a1, lbind(compose, a2), a3)', "('Callable', 'Any', 'Callable')"), ('fork(paint, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(lbind(contained, TWO), palette_f)', '()'), ('matcher(compose(a1, center), a2)', "('Callable', 'Any')"), ('fork(both, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('get_arg_rank_f(a1, lbind(colorcount_t, a2), F0)', "('FrozenSet', 'Any')"), ('chain(a1, a2, rbind(pair, a3))', "('Callable', 'Callable', 'Any')"), ('lbind(greater, THREE)', '()'), ('get_val_rank_f(a1, rbind(get_nth_f, F0), L1)', "('FrozenSet',)"), ('lbind(greater, EIGHT)', '()'), ('lbind(rbind, manhattan)', '()'), ('compose(a1, chain(increment, a2, width_f))', "('Callable', 'Callable')"), ('fork(canvas, color, compose(a1, size))', "('Callable',)"), ('compose(a1, a2)(ORIGIN)', "('Callable', 'Callable')"), ('compose(lbind(apply, increment), a1)', "('Callable',)"), ('fork(remove, rbind(get_nth_f, L1), identity)', '()'), ('lbind(rbind, intersection)', '()'), ('mapply(lbind(rapply, a1), a2)', "('Any', 'Container[Container]')"), ('compose(rbind(shoot, UNITY), center)', '()'), ('chain(rbind(toobject, a1), corners, outbox)', "('Any',)"), ('rbind(compose, rbind(get_nth_f, F0))', '()'), ('rbind(fork, fork(multiply, a1, a2))', "('Callable', 'Callable')"), ('matcher(lbind(index, a1), ZERO)', "('Any',)"), ('fork(combine, rbind(shoot, UNITY), a1)', "('Callable',)"), ('fork(combine, rbind(shoot, DOWN_LEFT), a1)', "('Callable',)"), ('fork(recolor_o, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('rbind(add, DOWN_LEFT)', '()'), ('rbind(get_common_rank, F0)', '()'), ('chain(a1, rbind(sfilter, a2), a3)', "('Callable', 'Any', 'Callable')"), ('matcher(color, FIVE)', '()'), ('fork(subtract, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('rbind(mir_rot_t, R2)', '()'), ('rbind(corner, R3)', '()'), ('chain(ineighbors, a1, rbind(get_nth_f, F0))', "('Callable',)"), ('mapply(rbind(shoot, a1), a2)', "('Any', 'Container[Container]')"), ('insert(rbind(mir_rot_f, R2), a1)', "('FrozenSet',)"), ('compose(rbind(mir_rot_t, R0), a1)', "('Callable',)"), ('chain(rbind(greater, THREE), a1, a2)', "('Callable', 'Callable')"), ('mapply(fork(difference, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('mapply(fork(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Container[Container]')"), ('lbind(greater, FOUR)', '()'), ('chain(a1, ineighbors, rbind(get_nth_f, L1))', "('Callable',)"), ('order(a1, rbind(col_row, R2))', "('Container',)"), ('fork(subtract, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('fork(connect, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('compose(a1, rbind(subgrid, a2))', "('Callable', 'Any')"), ('compose(rbind(get_nth_f, L1), a1)', "('Callable',)"), ('compose(crement, rbind(gravitate, a1))', "('Any',)"), ('apply(fork(connect, a1, a2), a3)', "('Callable', 'Callable', 'Container')"), ('fork(manhattan, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('matcher(chain(a1, a2, dneighbors), FOUR)', "('Callable', 'Callable')"), ('sfilter_f(a1, chain(even, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('compose(flip, matcher(color, ZERO))', '()'), ('lbind(chain, backdrop)', '()'), ('power(a1, a2)(a3)', "('Callable', 'int', 'Any')"), ('apply(compose(a1, center), a2)', "('Callable', 'Container')"), ('lbind(lbind, shift)', '()'), ('fork(recolor_o, chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Callable')"), ('compose(a1, compose(a2, color))', "('Callable', 'Callable')"), ('compose(lbind(multiply, a1), width_f)', "('Any',)"), ('extract(a1, matcher(numcolors_f, TWO))', "('Container',)"), ('lbind(compose, size)', '()'), ('chain(a1, rbind(toobject, a2), dneighbors)', "('Callable', 'Any')"), ('lbind(compose, a1)(a2)', "('Any', 'Any')"), ('fork(intersection, a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('fork(vconcat, compose(a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('lbind(rbind(chain, a1), size)', "('Any',)"), ('fork(shift, identity, chain(toivec, invert, height_f))', '()'), ('chain(lbind(mapply, dneighbors), corners, outbox)', '()'), ('fork(apply, a1, fork(sfilter, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(lbind(contained, THREE), palette_f, a1)', "('Callable',)"), ('power(chain(outbox, outbox, a1), THREE)', "('Callable',)"), ('rbind(get_arg_rank, L1)', '()'), ('extract(a1, matcher(normalize, a2))', "('Container', 'Any')"), ('fork(vconcat, identity, a1)(a2)', "('Callable', 'Any')"), ('fork(both, matcher(a1, ZERO), a2)', "('Callable', 'Callable')"), ('fork(subtract, a1, compose(a2, width_f))', "('Callable', 'Callable')"), ('chain(a1, a2, rbind(get_color_rank_f, F0))', "('Callable', 'Callable')"), ('compose(center, rbind(get_nth_f, L1))', '()'), ('chain(outbox, outbox, initset)', '()'), ('chain(even, rbind(subtract, a1), a2)', "('Any', 'Callable')"), ('compose(rbind(multiply, FIVE), a1)', "('Callable',)"), ('rbind(a1, fork(subtract, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('fork(subtract, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('matcher(rbind(get_nth_f, F0), a1)', "('Any',)"), ('compose(double, matcher(a1, ZERO))', "('Callable',)"), ('lbind(lbind, manhattan)', '()'), ('compose(a1, rbind(get_nth_f, L1))', "('Callable',)"), ('fork(combine, fork(insert, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('rbind(multiply, FIVE)', '()'), ('rbind(shoot, DOWN_LEFT)', '()'), ('rbind(shoot, UP)', '()'), ('rbind(a1, chain(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('mapply(fork(recolor_i, a1, outbox), a2)', "('Callable', 'Container[Container]')"), ('mapply(fork(mapply, a1, a2), a3)', "('Callable', 'Callable', 'Container[Container]')"), ('fork(both, compose(flip, a1), a2)', "('Callable', 'Callable')"), ('apply(compose(decrement, double), a1)', "('Container',)"), ('fork(equality, a1, rbind(col_row, R3))', "('Callable',)"), ('lbind(rbind, difference)', '()'), ('mfilter_f(a1, compose(a2, size))', "('FrozenSet', 'Callable')"), ('chain(a1, rbind(apply, a2), a3)', "('Callable', 'Any', 'Callable')"), ('fork(recolor_o, fork(other, palette_f, a1), a2)', "('Callable', 'Callable')"), ('fork(connect, rbind(corner, R0), a1)', "('Callable',)"), ('lbind(lbind, rbind(get_val_rank, L1))', '()'), ('fork(recolor_i, identity, compose(merge, a1))', "('Callable',)"), ('chain(rbind(multiply, TEN), size, a1)', "('Callable',)"), ('compose(invert, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(asobject, lbind(canvas, ZERO))', '()'), ('lbind(add, RIGHT)', '()'), ('sfilter_f(a1, fork(either, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('compose(size, dedupe)(a1)', "('Any',)"), ('rbind(get_val_rank, L1)', '()'), ('apply(rbind(mir_rot_t, R2), a1)', "('Container',)"), ('chain(a1, a2, rbind(remove, a3))', "('Callable', 'Callable', 'Any')"), ('chain(a1, a2, lbind(matcher, a3))', "('Callable', 'Callable', 'Any')"), ('compose(even, height_f)', '()'), ('apply(rbind(corner, R2), a1)', "('Container',)"), ('chain(normalize, rbind(sfilter, a1), a2)', "('Any', 'Callable')"), ('extract(a1, lbind(adjacent, a2))', "('Container', 'Any')"), ('fork(apply, lbind(lbind, shift), a1)', "('Callable',)"), ('power(a1, TWO)(a2)', "('Callable', 'Any')"), ('fork(multiply, sign, identity)', '()'), ('matcher(compose(a1, a2), DOWN)', "('Callable', 'Callable')"), ('compose(a1, rbind(corner, R1))', "('Callable',)"), ('mfilter_f(a1, chain(positive, decrement, a2))', "('FrozenSet', 'Callable')"), ('rbind(a1, compose(a2, a2))', "('Callable', 'Callable')"), ('lbind(rbind, sfilter)', '()'), ('fork(greater, chain(increment, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(lbind(mapply, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('mapply(rbind(f_ofcolor, a1), a2)', "('Any', 'Container[Container]')"), ('sfilter_f(a1, fork(both, a2, a3))', "('FrozenSet', 'Callable', 'Callable')"), ('compose(rbind(greater, a1), a2)', "('Any', 'Callable')"), ('mapply(compose(a1, center), a2)', "('Callable', 'Container[Container]')"), ('sfilter_f(a1, chain(even, a2, initset))', "('FrozenSet', 'Callable')"), ('compose(a1, lbind(colorfilter, a2))', "('Callable', 'Any')"), ('fork(subtract, rbind(get_nth_f, L1), a1)', "('Callable',)"), ('compose(rbind(greater, ONE), numcolors_f)', '()'), ('fork(insert, rbind(add, TWO_BY_ZERO), a1)', "('Callable',)"), ('fork(shift, identity, chain(invert, center, a1))', "('Callable',)"), ('fork(both, compose(a1, dneighbors), a2)', "('Callable', 'Callable')"), ('compose(flip, rbind(bordering, a1))', "('Any',)"), ('compose(rbind(a1, a2), a3)', "('Callable', 'Any', 'Callable')"), ('lbind(apply, rbind(get_nth_f, F0))', '()'), ('chain(a1, a2, a3)(ZERO)', "('Callable', 'Callable', 'Callable')"), ('lbind(rbind, upscale_f)', '()'), ('chain(a1, a2, fork(difference, identity, a3))', "('Callable', 'Callable', 'Callable')"), ('branch(a1, rbind(col_row, R1), a2)', "('bool', 'Any')"), ('fork(insert, a1, fork(difference, identity, a2))', "('Callable', 'Callable')"), ('fork(combine, a1, rbind(sfilter, a2))', "('Callable', 'Any')"), ('chain(rbind(colorcount_f, THREE), a1, neighbors)', "('Callable',)"), ('fork(insert, fork(extract, a1, a2), a3)', "('Callable', 'Callable', 'Callable')"), ('chain(a1, a2, rbind(get_nth_f, L1))', "('Callable', 'Callable')"), ('fork(mapply, compose(a1, normalize), a2)', "('Callable', 'Callable')"), ('chain(rbind(astuple, ONE), a1, size)', "('Callable',)"), ('chain(lbind(recolor_i, ZERO), delta, a1)', "('Callable',)"), ('fork(greater, a1, compose(a2, a3))', "('Callable', 'Callable', 'Callable')"), ('sfilter_f(a1, chain(a2, a3, dneighbors))', "('FrozenSet', 'Callable', 'Callable')"), ('rbind(mir_rot_t, R1)', '()'), ('sfilter_f(a1, matcher(a2, a3))', "('FrozenSet', 'Callable', 'Any')"), ('fork(shift, compose(asobject, a1), a2)', "('Callable', 'Callable')"), ('fork(vmatching, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('chain(lbind(index, a1), a2, a3)', "('Any', 'Callable', 'Callable')"), ('matcher(compose(a1, a2), a3)', "('Callable', 'Callable', 'Any')"), ('apply(lbind(compose, a1), a2)', "('Any', 'Container')"), ('apply(chain(a1, a2, a3), a4)', "('Callable', 'Callable', 'Callable', 'Container')"), ('compose(a1, fork(a2, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('apply(compose(increment, a1), a2)', "('Callable', 'Container')"), ('fork(subtract, a1, rbind(get_rank, L1))', "('Callable',)"), ('compose(a1, fork(combine, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('chain(a1, rbind(get_nth_f, F0), a2)', "('Callable', 'Callable')"), ('compose(color, chain(a1, a2, initset))', "('Callable', 'Callable')"), ('compose(rbind(a1, centerofmass), a2)', "('Callable', 'Callable')"), ('fork(upscale_f, compose(a1, a2), width_f)', "('Callable', 'Callable')"), ('lbind(power, outbox)', '()'), ('chain(size, dedupe, rbind(get_nth_f, F0))', '()'), ('matcher(size, SIX)', '()'), ('lbind(mapply, compose(vfrontier, tojvec))', '()'), ('apply(compose(decrement, a1), a2)', "('Callable', 'Container')"), ('apply(lbind(difference, a1), a2)', "('Any', 'Container')"), ('fork(add, a1, fork(equality, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('compose(rbind(astuple, ONE), size)', '()'), ('chain(rbind(get_nth_f, F0), a1, a2)', "('Callable', 'Callable')"), ('rbind(greater, ONE)', '()'), ('chain(a1, a2, fork(intersection, a3, a4))', "('Callable', 'Callable', 'Callable', 'Callable')"), ('chain(compose(positive, size), a1, a2)', "('Callable', 'Callable')"), ('chain(size, rbind(get_nth_f, F0), a1)', "('Callable',)"), ('chain(a1, rbind(toobject, a2), a3)', "('Callable', 'Any', 'Callable')"), ('power(rbind(get_nth_f, F0), TWO)', '()'), ('mapply(compose(a1, decrement), a2)', "('Callable', 'Container[Container]')"), ('fork(either, vline_i, hline_i)', '()'), ('chain(a1, fork(combine, a2, a3), normalize)', "('Callable', 'Callable', 'Callable')"), ('chain(tojvec, rbind(get_nth_f, L1), a1)', "('Callable',)"), ('chain(size, rbind(intersection, a1), outbox)', "('Any',)"), ('compose(lbind(greater, THREE), a1)', "('Callable',)"), ('fork(astuple, compose(color, a1), identity)', "('Callable',)"), ('compose(a1, rbind(subtract, a2))', "('Callable', 'Any')"), ('fork(shoot, a1, fork(astuple, a2, a3))', "('Callable', 'Callable', 'Callable')"), ('power(double, TWO)', '()'), ('matcher(compose(numcolors_f, a1), ONE)', "('Callable',)"), ('compose(rbind(get_nth_f, L1), center)', '()'), ('compose(backdrop, inbox)', '()'), ('fork(compose, a1, rbind(get_nth_f, L1))', "('Callable',)"), ('compose(lbind(shift, a1), decrement)', "('Any',)"), ('compose(decrement, rbind(corner, R3))', '()'), ('compose(rbind(mir_rot_f, R2), a1)', "('Callable',)"), ('compose(a1, lbind(lbind, astuple))', "('Callable',)"), ('power(decrement, TWO)', '()'), ('lbind(mapply, hfrontier)', '()'), ('rbind(interval, a1(a2))', "('Callable', 'Any')"), ('insert(rbind(mir_rot_f, R1), a1)', "('FrozenSet',)"), ('lbind(compose, compose(a1, a2))', "('Callable', 'Callable')"), ('compose(size, lbind(intersection, a1))', "('Any',)"), ('compose(decrement, double)', '()'), ('compose(toivec, numcolors_f)', '()'), ('rbind(col_row, R0)', '()'), ('chain(rbind(compose, center), a1, a2)', "('Callable', 'Callable')"), ('apply(rbind(canvas, UNITY), a1)', "('Container',)"), ('compose(invert, rbind(corner, R0))', '()'), ('compose(lbind(contained, THREE), palette_f)', '()'), ('compose(a1, matcher(a2, DOWN))', "('Callable', 'Callable')"), ('chain(a1, a2, rbind(col_row, R2))', "('Callable', 'Callable')"), ('chain(compose(a1, a2), a3, a1)', "('Callable', 'Callable', 'Callable')")}, 'int': {('vupscale(a1, width_t(a2))', "('Tuple[Tuple[int]]', 'Tuple')"), ('astuple(a1, get_rank(a2, F0))', "('int', 'FrozenSet[int]')"), ('subtract(NINE, colorcount_t(a1, ZERO))', "('Tuple[Tuple[int]]',)"), ('branch(a1, a2, color(a3))', "('bool', 'Any', 'Object')"), ('vsplit(a1, height_t(a1))', "('Tuple',)"), ('underfill(a1, b_zo_n(a2, p_g, F1), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('canvas(b_zo_n(a1, p_g, R0), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Tuple[int, int]')"), ('fill(a1, b_zo_n(a2, p_g, F3), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('replace(a1, color(a2), a3)', "('Grid', 'Object', 'C_')"), ('divide(height_t(a1), THREE)', "('Tuple',)"), ('colorfilter(a1, b_zo_n(a2, p_g, F0))', "('Objects', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('lbind(recolor_i, index(a1, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('canvas(b_zo_n(a1, p_g, F0), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Tuple[int, int]')"), ('fill(a1, b_zo_n(a2, p_g, F0), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('double(size_f(a1))', "('FrozenSet',)"), ('canvas(color(a1), TWO_BY_TWO)', "('Object',)"), ('decrement(size_f(a1))', "('FrozenSet',)"), ('astuple(FIVE, width_t(a1))', "('Tuple',)"), ('colorfilter(a1, color(a2))', "('Objects', 'Object')"), ('fill(a1, b_zo_n(a2, p_g, R2), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('f_ofcolor(a1, b_iz_n(a2, p_g, F1))', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('equality(width_f(a1), FIVE)', "('FrozenSet[Tuple[int, int]]',)"), ('greater(a1, size_f(a2))', "('int', 'FrozenSet')"), ('astuple(ONE, width_t(a1))', "('Tuple',)"), ('branch(a1, size_f(a2), a3)', "('bool', 'FrozenSet', 'Any')"), ('multiply(DOWN_LEFT, size_f(a1))', "('FrozenSet',)"), ('astuple(a1, width_t(a2))', "('int', 'Tuple')"), ('decrement(width_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('equality(height_f(a1), ONE)', "('FrozenSet[Tuple[int, int]]',)"), ('astuple(TWO, width_t(a1))', "('Tuple',)"), ('even(width_t(a1))', "('Tuple',)"), ('fill(a1, b_zo_n(a2, p_g, F1), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('interval(ZERO, size_t(a1), THREE)', "('Tuple',)"), ('f_ofcolor(a1, b_iz_n(a2, p_g, R1))', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('hsplit(a1, colorcount_t(a2, ZERO))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('equality(index(a1, a2), FOUR)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('astuple(a1, get_rank(a2, L1))', "('int', 'FrozenSet[int]')"), ('fill(a1, b_zo_n(a2, p_g, R0), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('toivec(height_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('astuple(col_row(a1, R2), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'int')"), ('canvas(b_iz_n(a1, p_g, F0), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Tuple[int, int]')"), ('recolor_i(b_zo_n(a1, p_g, F0), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'FrozenSet[Tuple[int, int]]')"), ('equality(size_f(a1), FOUR)', "('FrozenSet',)"), ('rbind(repeat, width_t(a1))', "('Tuple',)"), ('hupscale(a1, width_t(a2))', "('Tuple[Tuple[int]]', 'Tuple')"), ('canvas(index(a1, ORIGIN), a2)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('matcher(color, color(a1))', "('Object',)"), ('astuple(size_f(a1), size_f(a1))', "('FrozenSet',)"), ('equality(height_f(a1), FIVE)', "('FrozenSet[Tuple[int, int]]',)"), ('colorfilter(a1, b_iz_n(a2, p_g, F0))', "('Objects', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('astuple(get_rank(a1, L1), a2)', "('FrozenSet[int]', 'int')"), ('toivec(vperiod(a1))', "('Object',)"), ('increment(col_row(a1, R2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('double(width_t(a1))', "('Tuple',)"), ('multiply(hperiod(a1), THREE)', "('Object',)"), ('index(a1(a2), a3)', "('Callable', 'Any', 'Tuple[int, int]')"), ('upscale_t(a1, width_t(a1))', "('Tuple',)"), ('decrement(height_t(a1))', "('Tuple',)"), ('other_f(a1, color(a2))', "('FrozenSet', 'Object')"), ('lbind(subtract, width_t(a1))', "('Tuple',)"), ('canvas(color(a1), THREE_BY_THREE)', "('Object',)"), ('canvas(color(a1), UNITY)', "('Object',)"), ('insert(height_t(a1), a2)', "('Tuple', 'FrozenSet')"), ('equality(index(a1, a2), TWO)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('interval(ZERO, size_t(a1), ONE)', "('Tuple',)"), ('subtract(height_t(a1), TWO)', "('Tuple',)"), ('equality(index(a1, DOWN), a2)', "('Tuple[Tuple[int]]', 'Any')"), ('halve(height_t(a1))', "('Tuple',)"), ('f_ofcolor(a1, b_iz_n(a2, p_g, F2))', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('increment(col_row(a1, R1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('colorcount_t(a1, b_iz_n(a2, p_g, F0))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('height_t(a1(a2))', "('Callable', 'Any')"), ('astuple(vperiod(a1), a2)', "('Object', 'int')"), ('astuple(height_f(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'int')"), ('interval(ZERO, height_t(a1), ONE)', "('Tuple',)"), ('equality(size_f(a1), ONE)', "('FrozenSet',)"), ('recolor_o(b_zo_n(a1, p_g, F1), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Object')"), ('rbind(greater, col_row(a1, R1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('lbind(subtract, height_t(a1))', "('Tuple',)"), ('positive(colorcount_t(a1, a2))', "('Tuple[Tuple[int]]', 'C_')"), ('astuple(NINE, width_t(a1))', "('Tuple',)"), ('decrement(width_t(a1))', "('Tuple',)"), ('branch(a1, color(a2), a3)', "('bool', 'Object', 'Any')"), ('subtract(FIVE, size_f(a1))', "('FrozenSet',)"), ('astuple(ONE, size_f(a1))', "('FrozenSet',)"), ('downscale(a1, height_f(a2))', "('Tuple[Tuple[int]]', 'FrozenSet[Tuple[int, int]]')"), ('tojvec(width_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('fill(a1, b_zo_n(a2, p_g, F2), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('a1(height_t(a2))', "('Callable', 'Tuple')"), ('tojvec(hperiod(a1))', "('Object',)"), ('add(THREE, height_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('rbind(a1, width_t(a2))', "('Callable', 'Tuple')"), ('positive(size_f(a1))', "('FrozenSet',)"), ('matcher(a1, col_row(a2, R0))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('astuple(a1, hperiod(a2))', "('int', 'Object')"), ('halve(width_t(a1))', "('Tuple',)"), ('increment(height_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('lbind(subtract, col_row(a1, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('divide(width_t(a1), THREE)', "('Tuple',)"), ('subtract(NINE, size_f(a1))', "('FrozenSet',)"), ('canvas(index(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('astuple(height_t(a1), ONE)', "('Tuple',)"), ('subtract(a1, height_f(a2))', "('Union[int, Tuple[int, int]]', 'FrozenSet[Tuple[int, int]]')"), ('matcher(a1, col_row(a2, R1))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('astuple(width_t(a1), width_t(a1))', "('Tuple',)"), ('fill(a1, color(a2), a3)', "('Grid', 'Object', 'Patch')"), ('recolor_o(b_zo_n(a1, p_g, F0), a2)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Object')"), ('subtract(col_row(a1, R2), TEN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('underfill(a1, color(a2), a3)', "('Grid', 'Object', 'Patch')"), ('rbind(vsplit, height_t(a1))', "('Tuple',)"), ('divide(a1, width_f(a2))', "('Union[int, Tuple[int, int]]', 'FrozenSet[Tuple[int, int]]')"), ('f_ofcolor(a1, b_iz_n(a2, p_g, F0))', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('multiply(a1, colorcount_t(a2, ZERO))', "('Union[int, Tuple[int, int]]', 'Tuple[Tuple[int]]')"), ('add(col_row(a1, R2), TEN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('lbind(greater, col_row(a1, R1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('decrement(height_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('interval(ZERO, size(a1), ONE)', "('Container',)"), ('astuple(col_row(a1, R1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'int')"), ('fill(a1, b_zo_n(a2, p_g, R1), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('rbind(repeat, size_t(a1))', "('Tuple',)"), ('interval(col_row(a1, R2), TEN, TWO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('astuple(get_rank(a1, F0), a2)', "('FrozenSet[int]', 'int')"), ('underfill(a1, b_zo_n(a2, p_g, R0), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('astuple(index(a1, a2), ORIGIN)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('equality(index(a1, a2), EIGHT)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('divide(width_f(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('vsplit(a1, width_t(a2))', "('Tuple[Tuple[int]]', 'Tuple')"), ('divide(a1, hperiod(a2))', "('Union[int, Tuple[int, int]]', 'Object')"), ('equality(col_row(a1, R2), ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('index(a1(a2), ORIGIN)', "('Callable', 'Any')"), ('equality(col_row(a1, R1), ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('canvas(b_zo_n(a1, p_g, F0), THREE_BY_THREE)', "('Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]',)"), ('multiply(size_f(a1), FIVE)', "('FrozenSet',)"), ('replace(a1, THREE, index(a1, ORIGIN))', "('Tuple[Tuple[int]]',)"), ('increment(size_f(a1))', "('FrozenSet',)"), ('astuple(height_t(a1), TWO)', "('Tuple',)"), ('multiply(colorcount_t(a1, ZERO), THREE)', "('Tuple[Tuple[int]]',)"), ('greater(size_f(a1), a2)', "('FrozenSet', 'int')"), ('f_ofcolor(a1, b_zo_n(a2, p_g, F0))', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]')"), ('power(a1, size_f(a2))', "('Callable', 'FrozenSet')"), ('interval(size_t(a1), ZERO, NEG_ONE)', "('Tuple',)"), ('interval(ZERO, height_t(a1), a2)', "('Tuple', 'int')"), ('a1(width_t(a2))', "('Callable', 'Tuple')"), ('add(col_row(a1, R2), THREE)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('divide(width_t(a1), a2)', "('Tuple', 'Union[int, Tuple[int, int]]')"), ('multiply(a1, width_t(a2))', "('Union[int, Tuple[int, int]]', 'Tuple')"), ('divide(a1, width_t(a2))', "('Union[int, Tuple[int, int]]', 'Tuple')"), ('rbind(colorcount_f, color(a1))', "('Object',)"), ('greater(size_f(a1), FOUR)', "('FrozenSet',)"), ('underfill(a1, b_zo_n(a2, p_g, F0), a3)', "('Grid', 'Tuple[Tuple[Tuple[int]], Tuple[Tuple[int]]]', 'Patch')"), ('greater(size_f(a1), ONE)', "('FrozenSet',)"), ('replace(a1, THREE, index(a1, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('width_t(a1(a2))', "('Callable', 'Any')"), ('rbind(multiply, height_f(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('replace(a1, a2, color(a3))', "('Grid', 'C_', 'Object')"), ('astuple(height_t(a1), a2)', "('Tuple', 'int')"), ('astuple(a1, col_row(a2, R1))', "('int', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('astuple(a1, col_row(a2, R2))', "('int', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('subtract(width_t(a1), FOUR)', "('Tuple',)")}, 'FrozenSet[Tuple[int, int]]': {('get_nth_f(f_ofcolor(a1, GREEN), F0)', "('Grid',)"), ('combine(a1, box(a2))', "('Container', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('combine(a1, shoot(a2, UNITY))', "('Container', 'Tuple[int, int]')"), ('position(box(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('difference(a1, toindices(a2))', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('corner(f_ofcolor(a1, a2), R0)', "('Grid', 'C_')"), ('shift(f_ofcolor(a1, ONE), UP)', "('Grid',)"), ('apply(a1, occurrences(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'Object')"), ('combine(a1, shoot(a2, DOWN_LEFT))', "('Container', 'Tuple[int, int]')"), ('fill(a1, FOUR, delta(a2))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(sfilter, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('mir_rot_f(f_ofcolor(a1, TWO), R2)', "('Grid',)"), ('f_ofcolor(a1(a2), TWO)', "('Callable', 'Any')"), ('inbox(box(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('mapply(neighbors, f_ofcolor(a1, CYAN))', "('Grid',)"), ('delta(f_ofcolor(a1, CYAN))', "('Grid',)"), ('fill(a1, TWO, hfrontier(a2))', "('Grid', 'Tuple[int, int]')"), ('centerofmass(connect(a1, a2))', "('Tuple[int, int]', 'Tuple[int, int]')"), ('get_nth_f(f_ofcolor(a1, EIGHT), F0)', "('Grid',)"), ('lbind(hmatching, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('hfrontier(TWO_BY_ZERO)', '()'), ('upscale_f(normalize(a1), FOUR)', "('FrozenSet[Tuple[int, int]]',)"), ('fill(a1, a2, box(a3))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('intersection(a1, f_ofcolor(a2, ZERO))', "('FrozenSet', 'Grid')"), ('underfill(a1, a2, shoot(a3, DOWN_LEFT))', "('Grid', 'C_', 'Tuple[int, int]')"), ('fill(a1, EIGHT, shoot(a2, a3))', "('Grid', 'Tuple[int, int]', 'Tuple[int, int]')"), ('mapply(a1, f_ofcolor(a2, TWO))', "('Callable', 'Grid')"), ('shift(f_ofcolor(a1, ONE), DOWN)', "('Grid',)"), ('shift(backdrop(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('connect(a1, a2(a3))', "('Tuple[int, int]', 'Callable', 'Any')"), ('mir_rot_f(f_ofcolor(a1, a2), R2)', "('Grid', 'C_')"), ('mapply(neighbors, f_ofcolor(a1, FIVE))', "('Grid',)"), ('shape_f(f_ofcolor(a1, ZERO))', "('Grid',)"), ('subgrid(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'Tuple[Tuple[int]]')"), ('intersection(toindices(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('intersection(f_ofcolor(a1, ZERO), a2)', "('Grid', 'FrozenSet')"), ('recolor_i(FIVE, f_ofcolor(a1, FIVE))', "('Grid',)"), ('mapply(vfrontier, f_ofcolor(a1, TWO))', "('Grid',)"), ('combine_f(connect(a1, a2), a3)', "('Tuple[int, int]', 'Tuple[int, int]', 'FrozenSet')"), ('lbind(shift, f_ofcolor(a1, ONE))', "('Grid',)"), ('center(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('mapply(neighbors, f_ofcolor(a1, GREEN))', "('Grid',)"), ('fill(a1, ONE, shoot(a2, UP_RIGHT))', "('Grid', 'Tuple[int, int]')"), ('mapply(a1, shoot(a2, UP_RIGHT))', "('Callable', 'Tuple[int, int]')"), ('apply(initset, outbox(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shift(f_ofcolor(a1, TWO), NEG_UNITY)', "('Grid',)"), ('rbind(adjacent, f_ofcolor(a1, ONE))', "('Grid',)"), ('intersection(f_ofcolor(a1, BLACK), a2)', "('Grid', 'FrozenSet')"), ('recolor_i(a1, f_ofcolor(a2, TWO))', "('C_', 'Grid')"), ('shift(f_ofcolor(a1, TWO), UNITY)', "('Grid',)"), ('shift(f_ofcolor(a1, TWO), a2)', "('Grid', 'Tuple[int, int]')"), ('fill(a1, FIVE, f_ofcolor(a2, FIVE))', "('Grid', 'Grid')"), ('rbind(hmatching, f_ofcolor(a1, THREE))', "('Grid',)"), ('combine(shoot(a1, UNITY), a2)', "('Tuple[int, int]', 'Container')"), ('fill(a1, a2, f_ofcolor(a3, a2))', "('Grid', 'C_', 'Grid')"), ('toobject(neighbors(a1), a2)', "('Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('corners(outbox(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, FOUR, f_ofcolor(a2, FOUR))', "('Grid', 'Grid')"), ('fill(a1, CYAN, shoot(ORIGIN, UNITY))', "('Grid',)"), ('rapply_f(a1, normalize(a2))', "('FrozenSet', 'FrozenSet[Tuple[int, int]]')"), ('recolor_i(TWO, f_ofcolor(a1, TWO))', "('Grid',)"), ('fill(a1, ONE, connect(a2, a3))', "('Grid', 'Tuple[int, int]', 'Tuple[int, int]')"), ('fill(a1, SEVEN, f_ofcolor(a2, SEVEN))', "('Grid', 'Grid')"), ('lbind(vmatching, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('branch(a1, a2, connect(ORIGIN, a3))', "('bool', 'Any', 'Tuple[int, int]')"), ('rbind(intersection, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('backdrop(outbox(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('difference(toindices(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('difference(a1, f_ofcolor(a2, FIVE))', "('FrozenSet', 'Grid')"), ('mapply(vfrontier, f_ofcolor(a1, BLUE))', "('Grid',)"), ('a1(f_ofcolor(a2, THREE))', "('Callable', 'Grid')"), ('combine_f(a1, f_ofcolor(a2, ONE))', "('FrozenSet', 'Grid')"), ('connect(a1(a2), a3)', "('Callable', 'Any', 'Tuple[int, int]')"), ('fill(a1, NINE, f_ofcolor(a2, NINE))', "('Grid', 'Grid')"), ('normalize(a1(a2))', "('Callable', 'Any')"), ('recolor_i(ZERO, f_ofcolor(a1, TWO))', "('Grid',)"), ('subgrid(f_ofcolor(a1, a2), a1)', "('Grid', 'C_')"), ('rbind(intersection, f_ofcolor(a1, TWO))', "('Grid',)"), ('paint(a1, normalize(a2))', "('Tuple[Tuple[int]]', 'FrozenSet[Tuple[int, int]]')"), ('rbind(intersection, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('difference(normalize(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'FrozenSet')"), ('sfilter_f(asindices(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('mapply(hfrontier, f_ofcolor(a1, BLUE))', "('Grid',)"), ('height_f(f_ofcolor(a1, EIGHT))', "('Grid',)"), ('shift(f_ofcolor(a1, TWO), UP_RIGHT)', "('Grid',)"), ('sfilter_f(f_ofcolor(a1, ZERO), a2)', "('Grid', 'Callable')"), ('portrait_f(f_ofcolor(a1, TWO))', "('Grid',)"), ('sfilter_f(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'Callable')"), ('mapply(a1, corners(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('sfilter_f(f_ofcolor(a1, FIVE), a2)', "('Grid', 'Callable')"), ('intersection(hfrontier(a1), a2)', "('Tuple[int, int]', 'FrozenSet')"), ('combine_f(a1, f_ofcolor(a2, a3))', "('FrozenSet', 'Grid', 'C_')"), ('f_ofcolor(a1(a2), ZERO)', "('Callable', 'Any')"), ('corner(f_ofcolor(a1, TWO), R0)', "('Grid',)"), ('sfilter_f(toindices(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Callable')"), ('box(f_ofcolor(a1, BLUE))', "('Grid',)"), ('mapply(a1, occurrences(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'Object')"), ('prapply(connect, f_ofcolor(a1, FOUR), f_ofcolor(a1, FOUR))', "('Grid',)"), ('combine(shoot(a1, NEG_UNITY), a2)', "('Tuple[int, int]', 'Container')"), ('rapply_t(a1, normalize(a2))', "('Tuple', 'FrozenSet[Tuple[int, int]]')"), ('product(f_ofcolor(a1, FIVE), f_ofcolor(a1, FIVE))', "('Grid',)"), ('asindices(a1(a2))', "('Callable', 'Any')"), ('underfill(a1, ONE, connect(a2, a3))', "('Grid', 'Tuple[int, int]', 'Tuple[int, int]')"), ('product(f_ofcolor(a1, ONE), f_ofcolor(a1, ONE))', "('Grid',)"), ('rbind(intersection, f_ofcolor(a1, FIVE))', "('Grid',)"), ('toobject(backdrop(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(a1, EIGHT, vfrontier(a2))', "('Grid', 'Tuple[int, int]')"), ('corner(f_ofcolor(a1, ONE), R1)', "('Grid',)"), ('center(asindices(a1))', "('Tuple[Tuple[int]]',)"), ('mapply(neighbors, f_ofcolor(a1, RED))', "('Grid',)"), ('recolor_i(GREEN, f_ofcolor(a1, GREEN))', "('Grid',)"), ('underfill(a1, a2, shoot(a3, a4))', "('Grid', 'C_', 'Tuple[int, int]', 'Tuple[int, int]')"), ('combine(connect(ORIGIN, DOWN), a1)', "('Container',)"), ('vline_i(f_ofcolor(a1, THREE))', "('Grid',)"), ('mapply(dneighbors, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('col_row(f_ofcolor(a1, GREEN), R2)', "('Grid',)"), ('combine(shoot(a1, LEFT), a2)', "('Tuple[int, int]', 'Container')"), ('extract(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'Callable')"), ('mapply(a1, f_ofcolor(a2, FIVE))', "('Callable', 'Grid')"), ('corner(f_ofcolor(a1, FOUR), R0)', "('Grid',)"), ('col_row(f_ofcolor(a1, TWO), R2)', "('Grid',)"), ('position(delta(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shift(f_ofcolor(a1, ONE), LEFT)', "('Grid',)"), ('backdrop(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('vline_i(f_ofcolor(a1, TWO))', "('Grid',)"), ('insert(a1, dneighbors(a1))', "('Tuple[int, int]',)"), ('difference(asindices(a1), a2)', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('corner(f_ofcolor(a1, TWO), R3)', "('Grid',)"), ('mapply(a1, f_ofcolor(a2, NINE))', "('Callable', 'Grid')"), ('col_row(f_ofcolor(a1, FIVE), R1)', "('Grid',)"), ('portrait_f(f_ofcolor(a1, FIVE))', "('Grid',)"), ('lbind(shift, normalize(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('subgrid(f_ofcolor(a1, FIVE), a1)', "('Grid',)"), ('matcher(a1, normalize(a2))', "('Callable', 'FrozenSet[Tuple[int, int]]')"), ('size_f(f_ofcolor(a1, TWO))', "('Grid',)"), ('sfilter(f_ofcolor(a1, ZERO), a2)', "('Grid', 'Callable')"), ('normalize(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('fill(a1, a2, shoot(a3, RIGHT))', "('Grid', 'C_', 'Tuple[int, int]')"), ('apply(initset, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('mapply(a1, f_ofcolor(a2, a3))', "('Callable', 'Grid', 'C_')"), ('a1(asindices(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('get_nth_f(f_ofcolor(a1, a2), F0)', "('Grid', 'C_')"), ('mapply(vfrontier, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('shift(connect(a1, a2), UP)', "('Tuple[int, int]', 'Tuple[int, int]')"), ('combine(a1, shoot(a2, RIGHT))', "('Container', 'Tuple[int, int]')"), ('shift(connect(a1, a2), DOWN)', "('Tuple[int, int]', 'Tuple[int, int]')"), ('mir_rot_f(f_ofcolor(a1, TWO), R0)', "('Grid',)"), ('rbind(adjacent, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('get_nth_f(f_ofcolor(a1, YELLOW), F0)', "('Grid',)"), ('shift(normalize(a1), NEG_UNITY)', "('FrozenSet[Tuple[int, int]]',)"), ('fill(a1, ZERO, f_ofcolor(a1, FIVE))', "('Grid',)"), ('col_row(f_ofcolor(a1, RED), R2)', "('Grid',)"), ('size_f(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('col_row(f_ofcolor(a1, RED), R1)', "('Grid',)"), ('mapply(dneighbors, f_ofcolor(a1, BLUE))', "('Grid',)"), ('recolor_i(ZERO, inbox(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('a1(f_ofcolor(a2, TWO))', "('Callable', 'Grid')"), ('gravitate(a1, f_ofcolor(a2, TWO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid')"), ('corner(f_ofcolor(a1, RED), R1)', "('Grid',)"), ('get_nth_f(delta(a1), F0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shift(asindices(a1), TWO_BY_TWO)', "('Tuple[Tuple[int]]',)"), ('dneighbors(UNITY)', '()'), ('combine_f(f_ofcolor(a1, TWO), a2)', "('Grid', 'FrozenSet')"), ('lbind(shift, f_ofcolor(a1, ZERO))', "('Grid',)"), ('f_ofcolor(a1(a2), EIGHT)', "('Callable', 'Any')"), ('cover(a1, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('subgrid(f_ofcolor(a1, ONE), a1)', "('Grid',)"), ('toobject(asindices(a1), a1)', "('Tuple[Tuple[int]]',)"), ('toindices(a1(a2))', "('Callable', 'Any')"), ('color(normalize(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('combine(shoot(ORIGIN, UNITY), a1)', "('Container',)"), ('rbind(difference, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('difference(box(a1), a1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('product(f_ofcolor(a1, EIGHT), f_ofcolor(a1, EIGHT))', "('Grid',)"), ('outbox(f_ofcolor(a1, TWO))', "('Grid',)"), ('mapply(ineighbors, f_ofcolor(a1, RED))', "('Grid',)"), ('shift(normalize(a1), UNITY)', "('FrozenSet[Tuple[int, int]]',)"), ('col_row(f_ofcolor(a1, a2), R0)', "('Grid', 'C_')"), ('shift(f_ofcolor(a1, a2), UP)', "('Grid', 'C_')"), ('position(f_ofcolor(a1, ZERO), a2)', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('combine_f(a1, f_ofcolor(a2, BLACK))', "('FrozenSet', 'Grid')"), ('shift(f_ofcolor(a1, ONE), RIGHT)', "('Grid',)"), ('height_f(f_ofcolor(a1, TWO))', "('Grid',)"), ('mapply(a1, f_ofcolor(a2, EIGHT))', "('Callable', 'Grid')"), ('prapply(connect, f_ofcolor(a1, EIGHT), f_ofcolor(a1, EIGHT))', "('Grid',)"), ('rbind(vmatching, f_ofcolor(a1, THREE))', "('Grid',)"), ('fill(a1, a2, connect(a3, a4))', "('Grid', 'C_', 'Tuple[int, int]', 'Tuple[int, int]')"), ('mapply(neighbors, neighbors(ORIGIN))', '()'), ('col_row(f_ofcolor(a1, a2), R1)', "('Grid', 'C_')"), ('mapply(a1, f_ofcolor(a2, ONE))', "('Callable', 'Grid')"), ('col_row(f_ofcolor(a1, GREEN), R1)', "('Grid',)"), ('gravitate(f_ofcolor(a1, TWO), a2)', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('subgrid(f_ofcolor(a1, THREE), a1)', "('Grid',)"), ('center(f_ofcolor(a1, EIGHT))', "('Grid',)"), ('size_f(f_ofcolor(a1, FIVE))', "('Grid',)"), ('rbind(manhattan, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('corner(f_ofcolor(a1, SEVEN), R3)', "('Grid',)"), ('fill(a1, a2, neighbors(a3))', "('Grid', 'C_', 'Tuple[int, int]')"), ('matcher(a1, toindices(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, TWO, f_ofcolor(a2, TWO))', "('Grid', 'Grid')"), ('intersection(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'FrozenSet')"), ('fill(a1, a2, inbox(a3))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(difference, f_ofcolor(a1, FOUR))', "('Grid',)"), ('rbind(difference, box(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('rbind(apply, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('sfilter(asindices(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('box(f_ofcolor(a1, FIVE))', "('Grid',)"), ('fill(a1, EIGHT, f_ofcolor(a2, EIGHT))', "('Grid', 'Grid')"), ('center(f_ofcolor(a1, TWO))', "('Grid',)"), ('intersection(a1, f_ofcolor(a2, BLACK))', "('FrozenSet', 'Grid')"), ('sfilter_f(normalize(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'Callable')"), ('subgrid(f_ofcolor(a1, FOUR), a1)', "('Grid',)"), ('prapply(connect, f_ofcolor(a1, RED), a2)', "('Grid', 'Any')"), ('contained(ZERO_BY_TWO, toindices(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('underfill(a1, a2, shoot(a3, UP_RIGHT))', "('Grid', 'C_', 'Tuple[int, int]')"), ('difference(box(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('mapply(ineighbors, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('mapply(a1, shoot(a2, DOWN_LEFT))', "('Callable', 'Tuple[int, int]')"), ('shift(normalize(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'Tuple[int, int]')"), ('connect(ORIGIN, ZERO_BY_TWO)', '()'), ('a1(normalize(a2))', "('Callable', 'FrozenSet[Tuple[int, int]]')"), ('fill(a1, TWO, shoot(a2, UNITY))', "('Grid', 'Tuple[int, int]')"), ('rbind(intersection, f_ofcolor(a1, ZERO))', "('Grid',)"), ('fill(a1, ZERO, f_ofcolor(a2, ZERO))', "('Grid', 'Grid')"), ('intersection(a1, vfrontier(a2))', "('FrozenSet', 'Tuple[int, int]')"), ('subgrid(f_ofcolor(a1, BLUE), a2)', "('Grid', 'Tuple[Tuple[int]]')"), ('mir_rot_f(f_ofcolor(a1, EIGHT), R2)', "('Grid',)"), ('combine_f(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'FrozenSet')"), ('get_arg_rank_f(f_ofcolor(a1, ONE), a2, F0)', "('Grid', 'Callable')"), ('subgrid(inbox(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('toobject(dneighbors(a1), a2)', "('Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('rbind(difference, f_ofcolor(a1, ZERO))', "('Grid',)"), ('shift(f_ofcolor(a1, a2), a3)', "('Grid', 'C_', 'Tuple[int, int]')"), ('combine(a1, shoot(a2, UP_RIGHT))', "('Container', 'Tuple[int, int]')"), ('fill(a1, EIGHT, delta(a2))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('combine(a1, shoot(a2, NEG_UNITY))', "('Container', 'Tuple[int, int]')"), ('combine_f(f_ofcolor(a1, ZERO), a2)', "('Grid', 'FrozenSet')"), ('apply(a1, corners(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, a2, toindices(a3))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('height_f(f_ofcolor(a1, THREE))', "('Grid',)"), ('neighbors(ORIGIN)', '()'), ('contained(TWO_BY_TWO, toindices(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('other_f(f_ofcolor(a1, THREE), a2)', "('Grid', 'Any')"), ('corners(asindices(a1))', "('Tuple[Tuple[int]]',)"), ('mapply(a1, toindices(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('gravitate(backdrop(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('inbox(f_ofcolor(a1, FIVE))', "('Grid',)"), ('apply(initset, f_ofcolor(a1, EIGHT))', "('Grid',)"), ('a1(neighbors(ORIGIN))', "('Callable',)"), ('subgrid(f_ofcolor(a1, TWO), a1)', "('Grid',)"), ('prapply(connect, f_ofcolor(a1, TWO), f_ofcolor(a1, TWO))', "('Grid',)"), ('difference(a1, f_ofcolor(a2, ZERO))', "('FrozenSet', 'Grid')"), ('underfill(a1, ONE, shoot(a2, a3))', "('Grid', 'Tuple[int, int]', 'Tuple[int, int]')"), ('combine(shoot(a1, DOWN_LEFT), a2)', "('Tuple[int, int]', 'Container')"), ('shift(f_ofcolor(a1, EIGHT), a2)', "('Grid', 'Tuple[int, int]')"), ('subgrid(f_ofcolor(a1, EIGHT), a1)', "('Grid',)"), ('product(corners(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Container')"), ('prapply(connect, toindices(a1), toindices(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('corner(f_ofcolor(a1, BLUE), R0)', "('Grid',)"), ('col_row(f_ofcolor(a1, ONE), R0)', "('Grid',)"), ('insert(ORIGIN, neighbors(ORIGIN))', '()'), ('shift(f_ofcolor(a1, TWO), DOWN_LEFT)', "('Grid',)"), ('corner(f_ofcolor(a1, ONE), R0)', "('Grid',)"), ('toindices(normalize(a1))', "('FrozenSet[Tuple[int, int]]',)"), ('fill(a1, a2, backdrop(a3))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('combine_f(a1, connect(a2, a3))', "('FrozenSet', 'Tuple[int, int]', 'Tuple[int, int]')"), ('fill(a1, a2, delta(a3))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('corner(f_ofcolor(a1, FIVE), R1)', "('Grid',)"), ('a1(f_ofcolor(a2, ONE))', "('Callable', 'Grid')"), ('combine_f(f_ofcolor(a1, BLACK), a2)', "('Grid', 'FrozenSet')"), ('combine(shoot(a1, UP_RIGHT), a2)', "('Tuple[int, int]', 'Container')"), ('fill(a1, GRAY, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('corner(f_ofcolor(a1, THREE), R0)', "('Grid',)"), ('apply(a1, toindices(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(sfilter, f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('sfilter_f(f_ofcolor(a1, FOUR), a2)', "('Grid', 'Callable')"), ('a1(toindices(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('inbox(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('get_nth_f(f_ofcolor(a1, ONE), F0)', "('Grid',)"), ('insert(UNITY, dneighbors(UNITY))', '()'), ('delta(f_ofcolor(a1, FIVE))', "('Grid',)"), ('fill(a1, a2, shoot(a3, UP_RIGHT))', "('Grid', 'C_', 'Tuple[int, int]')"), ('insert(UNITY, connect(ORIGIN, a1))', "('Tuple[int, int]',)"), ('height_f(f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('combine(a1, shoot(a2, UP))', "('Container', 'Tuple[int, int]')"), ('mapply(dneighbors, f_ofcolor(a1, FIVE))', "('Grid',)"), ('col_row(f_ofcolor(a1, EIGHT), R1)', "('Grid',)"), ('product(f_ofcolor(a1, TWO), f_ofcolor(a1, TWO))', "('Grid',)"), ('prapply(connect, a1, f_ofcolor(a2, GRAY))', "('Container', 'Grid')"), ('combine(a1, connect(ORIGIN, ZERO_BY_TWO))', "('Container',)"), ('contained(TWO_BY_ZERO, toindices(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('position(a1, f_ofcolor(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'C_')"), ('fill(a1, ONE, shoot(a2, NEG_UNITY))', "('Grid', 'Tuple[int, int]')"), ('combine(hfrontier(TWO_BY_ZERO), a1)', "('Container',)"), ('fill(a1, RED, neighbors(a2))', "('Grid', 'Tuple[int, int]')"), ('prapply(connect, f_ofcolor(a1, a2), f_ofcolor(a1, a2))', "('Grid', 'C_')"), ('combine(shoot(a1, DOWN), a2)', "('Tuple[int, int]', 'Container')"), ('mapply(ineighbors, f_ofcolor(a1, FIVE))', "('Grid',)"), ('box(asindices(a1))', "('Tuple[Tuple[int]]',)"), ('cover(a1, f_ofcolor(a1, FIVE))', "('Grid',)"), ('prapply(connect, toindices(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Any')"), ('subgrid(outbox(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('shoot(ORIGIN, UNITY)', '()'), ('apply(a1, f_ofcolor(a2, TWO))', "('Callable', 'Grid')"), ('get_nth_f(f_ofcolor(a1, FOUR), F0)', "('Grid',)"), ('sfilter_f(inbox(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Callable')"), ('mapply(a1, inbox(a2))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('rbind(adjacent, f_ofcolor(a1, THREE))', "('Grid',)"), ('a1(f_ofcolor(a2, ZERO))', "('Callable', 'Grid')"), ('width_f(f_ofcolor(a1, TWO))', "('Grid',)"), ('rbind(gravitate, f_ofcolor(a1, THREE))', "('Grid',)"), ('lbind(intersection, f_ofcolor(a1, ONE))', "('Grid',)"), ('connect(ORIGIN, DOWN)', '()'), ('difference(a1, f_ofcolor(a2, a3))', "('FrozenSet', 'Grid', 'C_')"), ('recolor_i(ZERO, asindices(a1))', "('Tuple[Tuple[int]]',)"), ('get_nth_f(f_ofcolor(a1, TWO), F0)', "('Grid',)"), ('prapply(connect, a1, f_ofcolor(a2, a3))', "('Container', 'Grid', 'C_')"), ('lbind(shift, toindices(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)")}, 'Tuple[Tuple[int]]': {('paint(subgrid(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Object')"), ('fill(compress(a1), ONE, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('fill(fill(a1, SIX, a2), SEVEN, a3)', "('Grid', 'Patch', 'Patch')"), ('lbind(colorcount_t, compress(a1))', "('Tuple[Tuple[int]]',)"), ('fill(canvas(BLACK, a1), CYAN, a2)', "('Tuple[int, int]', 'Patch')"), ('o_g(tophalf(a1), R5)', "('Tuple[Tuple[int]]',)"), ('fill(lefthalf(a1), a2, a3)', "('Tuple[Tuple[int]]', 'C_', 'Patch')"), ('replace(switch(a1, a2, a3), FIVE, ZERO)', "('Tuple[Tuple[int]]', 'R_', 'R_')"), ('occurrences(cover(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Object')"), ('hsplit(paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'int')"), ('mir_rot_t(crop(a1, ORIGIN, a2), R5)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('underfill(replace(a1, EIGHT, FOUR), EIGHT, a2)', "('Grid', 'Patch')"), ('vconcat(a1, canvas(a2, a3))', "('Tuple[Tuple[int]]', 'C_', 'Tuple[int, int]')"), ('occurrences(fill(a1, EIGHT, a2), a3)', "('Grid', 'Patch', 'Object')"), ('hconcat(a1, subgrid(a2, a3))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('get_color_rank_t(subgrid(a1, a2), L1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('lefthalf(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('mir_rot_t(paint(a1, a2), R4)', "('Tuple[Tuple[int]]', 'Object')"), ('f_ofcolor(fill(a1, FOUR, a2), ZERO)', "('Grid', 'Patch')"), ('f_ofcolor(bottomhalf(a1), BLACK)', "('Tuple[Tuple[int]]',)"), ('mir_rot_t(crop(a1, a2, a3), R4)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('cover(underfill(a1, a2, a3), a4)', "('Grid', 'C_', 'Patch', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('height_t(replace(a1, a2, a3))', "('Grid', 'C_', 'C_')"), ('vupscale(canvas(THREE, UNITY), FIVE)', '()'), ('a1(a2, replace(a3, THREE, a4))', "('Callable', 'Any', 'Grid', 'C_')"), ('hconcat(hconcat(a1, a2), hconcat(a1, a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('f_ofcolor(tophalf(a1), BLACK)', "('Tuple[Tuple[int]]',)"), ('asindices(crop(a1, ORIGIN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('astuple(a1, crop(a2, TWO_BY_ZERO, THREE_BY_THREE))', "('int', 'Tuple[Tuple[int]]')"), ('f_ofcolor(fill(a1, THREE, a2), ZERO)', "('Grid', 'Patch')"), ('f_ofcolor(tophalf(a1), ZERO)', "('Tuple[Tuple[int]]',)"), ('fill(canvas(ZERO, a1), a2, a3)', "('Tuple[int, int]', 'C_', 'Patch')"), ('hconcat(subgrid(a1, a2), subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('rbind(toobject, paint(a1, a2))', "('Tuple[Tuple[int]]', 'Object')"), ('crop(crop(a1, ORIGIN, a2), ORIGIN, a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('cellwise(lefthalf(a1), a2, ZERO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(canvas(ZERO, THREE_BY_THREE), FIVE, a1)', "('Patch',)"), ('fill(canvas(a1, a2), BLACK, a3)', "('C_', 'Tuple[int, int]', 'Patch')"), ('paint(replace(a1, a2, THREE), a3)', "('Grid', 'C_', 'Object')"), ('width_t(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('righthalf(a1(a2))', "('Callable', 'Any')"), ('paint(fill(a1, GRAY, a2), a3)', "('Grid', 'Patch', 'Object')"), ('a1(fill(a2, EIGHT, a3))', "('Callable', 'Grid', 'Patch')"), ('hsplit(fill(a1, a2, a3), THREE)', "('Grid', 'C_', 'Patch')"), ('mir_rot_t(vconcat(a1, a2), R0)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('underfill(fill(a1, TWO, a2), THREE, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(a1, a2, a3(a4))', "('Grid', 'C_', 'Callable', 'Any')"), ('paint(cover(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Object')"), ('apply(a1, lefthalf(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('upscale_t(compress(a1), a2)', "('Tuple[Tuple[int]]', 'int')"), ('downscale(replace(a1, a2, a3), a4)', "('Grid', 'C_', 'C_', 'int')"), ('f_ofcolor(crop(a1, ORIGIN, a2), TWO)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('o_g(vconcat(a1, a2), R1)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('vconcat(a1, bottomhalf(a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('f_ofcolor(cover(a1, a2), ONE)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('f_ofcolor(lefthalf(a1), EIGHT)', "('Tuple[Tuple[int]]',)"), ('rbind(subgrid, cover(a1, a2))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('replace(fill(a1, a2, a3), ZERO, FIVE)', "('Grid', 'C_', 'Patch')"), ('paint(replace(a1, SEVEN, ZERO), a2)', "('Grid', 'Object')"), ('fill(a1(a2), EIGHT, a3)', "('Callable', 'Any', 'Patch')"), ('mir_rot_t(paint(a1, a2), R6)', "('Tuple[Tuple[int]]', 'Object')"), ('palette_t(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(vconcat(a1, a2), ZERO, a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Patch')"), ('fill(fill(a1, ONE, a2), FOUR, a3)', "('Grid', 'Patch', 'Patch')"), ('asobject(canvas(FIVE, TWO_BY_TWO))', '()'), ('mir_rot_t(compress(a1), R2)', "('Tuple[Tuple[int]]',)"), ('toobject(a1, fill(a2, a3, a4))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'C_', 'Patch')"), ('fill(fill(a1, SIX, a2), EIGHT, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(fill(a1, TWO, a2), ZERO, ONE)', "('Grid', 'Patch')"), ('a1(replace(a2, a3, FIVE))', "('Callable', 'Grid', 'C_')"), ('asobject(canvas(FIVE, a1))', "('Tuple[int, int]',)"), ('paint(fill(a1, TWO, a2), a3)', "('Grid', 'Patch', 'Object')"), ('bottomhalf(righthalf(a1))', "('Tuple[Tuple[int]]',)"), ('paint(canvas(ZERO, THREE_BY_THREE), a1)', "('Object',)"), ('o_g(righthalf(a1), R5)', "('Tuple[Tuple[int]]',)"), ('vconcat(canvas(EIGHT, a1), a2)', "('Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('a1(replace(a2, FIVE, ZERO))', "('Callable', 'Grid')"), ('f_ofcolor(vupscale(a1, a2), a3)', "('Tuple[Tuple[int]]', 'int', 'C_')"), ('fill(paint(a1, a2), EIGHT, a3)', "('Tuple[Tuple[int]]', 'Object', 'Patch')"), ('mir_rot_t(crop(a1, ORIGIN, a2), R0)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('canvas(ZERO, THREE_BY_THREE)', '()'), ('replace(cellwise(a1, a2, ZERO), ONE, TWO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('downscale(subgrid(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'int')"), ('fill(fill(a1, EIGHT, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('mir_rot_t(subgrid(a1, a2), R0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('get_color_rank_t(cover(a1, a2), F0)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('replace(underfill(a1, ONE, a2), ONE, THREE)', "('Grid', 'Patch')"), ('mir_rot_t(subgrid(a1, a2), R2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('o_g(upscale_t(a1, TWO), R7)', "('Tuple[Tuple[int]]',)"), ('asindices(canvas(FIVE, a1))', "('Tuple[int, int]',)"), ('righthalf(tophalf(a1))', "('Tuple[Tuple[int]]',)"), ('o_g(paint(a1, a2), R1)', "('Tuple[Tuple[int]]', 'Object')"), ('vconcat(a1, canvas(FIVE, UNITY))', "('Tuple[Tuple[int]]',)"), ('hconcat(a1, canvas(BLACK, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('fill(a1(a2), ZERO, a3)', "('Callable', 'Any', 'Patch')"), ('asobject(crop(a1, a2, a3))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('fill(underfill(a1, a2, a3), a4, a5)', "('Grid', 'C_', 'Patch', 'C_', 'Patch')"), ('vconcat(hconcat(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('downscale(paint(a1, a2), TWO)', "('Tuple[Tuple[int]]', 'Object')"), ('vconcat(a1, crop(a1, DOWN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('hconcat(a1, a2(a3))', "('Tuple[Tuple[int]]', 'Callable', 'Any')"), ('fill(tophalf(a1), a2, a3)', "('Tuple[Tuple[int]]', 'C_', 'Patch')"), ('o_g(subgrid(a1, a2), R4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('replace(subgrid(a1, a2), EIGHT, a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'C_')"), ('hconcat(a1, hconcat(a2, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('paint(underfill(a1, a2, a3), a4)', "('Grid', 'C_', 'Patch', 'Object')"), ('underfill(vconcat(a1, a1), a2, a3)', "('Tuple[Tuple[int]]', 'C_', 'Patch')"), ('fill(a1, FIVE, a2(a3))', "('Grid', 'Callable', 'Any')"), ('f_ofcolor(vconcat(a1, a1), a2)', "('Tuple[Tuple[int]]', 'C_')"), ('underpaint(paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'Object')"), ('cellwise(upscale_t(a1, THREE), a2, ZERO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(fill(a1, THREE, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(vupscale(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'int', 'C_', 'Patch')"), ('papply(pair, replace(a1, FOUR, ZERO), a2)', "('Grid', 'Tuple')"), ('cover(fill(a1, a2, a3), a4)', "('Grid', 'C_', 'Patch', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('f_ofcolor(fill(a1, ONE, a2), ONE)', "('Grid', 'Patch')"), ('paint(paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'Object')"), ('equality(a1, bottomhalf(a2))', "('Any', 'Tuple[Tuple[int]]')"), ('repeat(hupscale(a1, a2), TWO)', "('Tuple[Tuple[int]]', 'int')"), ('mir_rot_t(hconcat(a1, a2), R0)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(fill(a1, FOUR, a2), SEVEN, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(compress(a1), a2, a3)', "('Tuple[Tuple[int]]', 'C_', 'C_')"), ('mir_rot_t(tophalf(a1), R1)', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, EIGHT, a2), FOUR, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(underfill(a1, NEG_ONE, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(a1, TWO, a2(a3))', "('Grid', 'Callable', 'Any')"), ('switch(subgrid(a1, a2), TWO, ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(paint(a1, a2), ZERO, a3)', "('Tuple[Tuple[int]]', 'Object', 'Patch')"), ('o_g(fill(a1, ONE, a2), R5)', "('Grid', 'Patch')"), ('asobject(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('mir_rot_t(crop(a1, ORIGIN, THREE_BY_THREE), R4)', "('Tuple[Tuple[int]]',)"), ('crop(fill(a1, ONE, a2), a3, a4)', "('Grid', 'Patch', 'Tuple[int, int]', 'Tuple[int, int]')"), ('mir_rot_t(fill(a1, a2, a3), R0)', "('Grid', 'C_', 'Patch')"), ('branch(a1, paint(a2, a3), a4)', "('bool', 'Tuple[Tuple[int]]', 'Object', 'Any')"), ('o_g(lefthalf(a1), R5)', "('Tuple[Tuple[int]]',)"), ('get_color_rank_t(replace(a1, TWO, ZERO), L1)', "('Grid',)"), ('shape_t(tophalf(a1))', "('Tuple[Tuple[int]]',)"), ('hconcat(a1(a2), a3)', "('Callable', 'Any', 'Tuple[Tuple[int]]')"), ('equality(tophalf(a1), a2)', "('Tuple[Tuple[int]]', 'Any')"), ('fill(upscale_t(a1, FOUR), ZERO, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('branch(a1, a2, paint(a3, a4))', "('bool', 'Any', 'Tuple[Tuple[int]]', 'Object')"), ('mir_rot_t(crop(a1, ORIGIN, THREE_BY_THREE), R5)', "('Tuple[Tuple[int]]',)"), ('fill(underfill(a1, a2, a3), ZERO, a4)', "('Grid', 'C_', 'Patch', 'Patch')"), ('move(paint(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'Object', 'Object', 'Tuple[int, int]')"), ('lefthalf(a1(a2))', "('Callable', 'Any')"), ('fill(fill(a1, EIGHT, a2), EIGHT, a3)', "('Grid', 'Patch', 'Patch')"), ('cellwise(a1, vconcat(a2, a3), ZERO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('paint(fill(a1, ZERO, a2), a3)', "('Grid', 'Patch', 'Object')"), ('fill(replace(a1, THREE, SIX), TWO, a2)', "('Grid', 'Patch')"), ('fgpartition(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('mir_rot_t(crop(a1, DOWN, a2), R2)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('f_ofcolor(righthalf(a1), ZERO)', "('Tuple[Tuple[int]]',)"), ('paint(canvas(ZERO, a1), a2)', "('Tuple[int, int]', 'Object')"), ('sfilter(paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'Callable')"), ('fill(fill(a1, ONE, a2), FIVE, a3)', "('Grid', 'Patch', 'Patch')"), ('lefthalf(bottomhalf(a1))', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, TWO, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(canvas(BLACK, a1), a2, a3)', "('Tuple[int, int]', 'C_', 'Patch')"), ('fill(cover(a1, a2), FIVE, a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Patch')"), ('f_ofcolor(lefthalf(a1), a2)', "('Tuple[Tuple[int]]', 'C_')"), ('fill(fill(a1, FOUR, a2), FOUR, a3)', "('Grid', 'Patch', 'Patch')"), ('lbind(hupscale, canvas(THREE, UNITY))', '()'), ('switch(switch(a1, TWO, SIX), ONE, FIVE)', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, a2, a3), ZERO, a4)', "('Grid', 'C_', 'Patch', 'Patch')"), ('mir_rot_t(vupscale(a1, a2), R1)', "('Tuple[Tuple[int]]', 'int')"), ('f_ofcolor(fill(a1, ZERO, a2), a3)', "('Grid', 'Patch', 'C_')"), ('replace(trim(a1), a2, a3)', "('Tuple[Tuple[int]]', 'C_', 'C_')"), ('upscale_t(subgrid(a1, a2), TWO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('underfill(fill(a1, ONE, a2), ONE, a3)', "('Grid', 'Patch', 'Patch')"), ('branch(a1, a2, fill(a3, TWO, a4))', "('bool', 'Any', 'Grid', 'Patch')"), ('rbind(toobject, fill(a1, FOUR, a2))', "('Grid', 'Patch')"), ('compress(replace(a1, EIGHT, ZERO))', "('Grid',)"), ('fill(fill(a1, a2, a3), a4, a5)', "('Grid', 'C_', 'Patch', 'C_', 'Patch')"), ('o_g(hconcat(a1, a2), R7)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(replace(a1, EIGHT, ONE), TWO, a2)', "('Grid', 'Patch')"), ('canvas(ZERO, UNITY)', '()'), ('o_g(underfill(a1, a2, a3), R5)', "('Grid', 'C_', 'Patch')"), ('f_ofcolor(crop(a1, ORIGIN, THREE_BY_THREE), ZERO)', "('Tuple[Tuple[int]]',)"), ('trim(fill(a1, NINE, a2))', "('Grid', 'Patch')"), ('f_ofcolor(upscale_t(a1, THREE), ONE)', "('Tuple[Tuple[int]]',)"), ('fill(cover(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'C_', 'Patch')"), ('o_g(underfill(a1, NEG_ONE, a2), R1)', "('Grid', 'Patch')"), ('vconcat(a1, crop(a2, TWO_BY_ZERO, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('fill(underfill(a1, TWO, a2), ONE, a3)', "('Grid', 'Patch', 'Patch')"), ('switch(fill(a1, EIGHT, a2), EIGHT, TWO)', "('Grid', 'Patch')"), ('fill(canvas(a1, THREE_BY_THREE), a2, a3)', "('C_', 'C_', 'Patch')"), ('fill(fill(a1, SIX, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('index(subgrid(a1, a2), DOWN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('hconcat(a1, vupscale(a2, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'int')"), ('replace(fill(a1, TWO, a2), ZERO, THREE)', "('Grid', 'Patch')"), ('o_g(replace(a1, FIVE, ZERO), R5)', "('Grid',)"), ('dedupe(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('hconcat(a1, crop(a2, ORIGIN, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('paint(canvas(a1, THREE_BY_THREE), a2)', "('C_', 'Object')"), ('paint(canvas(BLACK, a1), a2)', "('Tuple[int, int]', 'Object')"), ('vupscale(hupscale(a1, THREE), THREE)', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, THREE, a2), SIX, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(move(a1, a2, DOWN), EIGHT, TWO)', "('Tuple[Tuple[int]]', 'Object')"), ('paint(fill(a1, a2, a3), a4)', "('Grid', 'C_', 'Patch', 'Object')"), ('downscale(a1(a2), a3)', "('Callable', 'Any', 'int')"), ('crop(vconcat(a1, a2), DOWN, a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('rbind(toobject, subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('o_g(paint(a1, a2), R5)', "('Tuple[Tuple[int]]', 'Object')"), ('apply(a1, righthalf(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('canvas(FIVE, TWO_BY_TWO)', '()'), ('a1(bottomhalf(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('asobject(crop(a1, ORIGIN, THREE_BY_THREE))', "('Tuple[Tuple[int]]',)"), ('get_color_rank_t(tophalf(a1), L1)', "('Tuple[Tuple[int]]',)"), ('fill(canvas(FIVE, a1), ONE, a2)', "('Tuple[int, int]', 'Patch')"), ('mir_rot_t(paint(a1, a2), R0)', "('Tuple[Tuple[int]]', 'Object')"), ('asindices(crop(a1, ORIGIN, THREE_BY_THREE))', "('Tuple[Tuple[int]]',)"), ('o_g(cover(a1, a2), R1)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('downscale(cellwise(a1, a2, ZERO), THREE)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('move(move(a1, a2, a3), a4, a5)', "('Tuple[Tuple[int]]', 'Object', 'Tuple[int, int]', 'Object', 'Tuple[int, int]')"), ('fill(paint(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'Object', 'C_', 'Patch')"), ('vconcat(hconcat(a1, a1), hconcat(a1, a1))', "('Tuple[Tuple[int]]',)"), ('rbind(toobject, replace(a1, a2, ZERO))', "('Grid', 'C_')"), ('get_color_rank_t(cover(a1, a2), L1)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('a1(replace(a2, THREE, a3), a4)', "('Callable', 'Grid', 'C_', 'Any')"), ('a1(tophalf(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('apply(dedupe, crop(a1, ORIGIN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('bottomhalf(lefthalf(a1))', "('Tuple[Tuple[int]]',)"), ('a1(trim(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('replace(subgrid(a1, a2), a3, a4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'C_', 'C_')"), ('astuple(crop(a1, a2, THREE_BY_THREE), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int')"), ('o_g(replace(a1, FIVE, ZERO), R7)', "('Grid',)"), ('o_g(paint(a1, a2), R3)', "('Tuple[Tuple[int]]', 'Object')"), ('subgrid(a1, paint(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Object')"), ('o_g(replace(a1, FOUR, ZERO), R5)', "('Grid',)"), ('fill(underpaint(a1, a2), ZERO, a3)', "('Tuple[Tuple[int]]', 'Object', 'Patch')"), ('vconcat(a1, canvas(ZERO, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('fill(subgrid(a1, a2), ZERO, a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Patch')"), ('vconcat(hconcat(a1, a2), hconcat(a1, a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('vconcat(a1, hconcat(a2, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('partition(crop(a1, ORIGIN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('asindices(upscale_t(a1, THREE))', "('Tuple[Tuple[int]]',)"), ('branch(a1, subgrid(a2, a3), a4)', "('bool', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Any')"), ('vconcat(a1, replace(a2, a3, a4))', "('Tuple[Tuple[int]]', 'Grid', 'C_', 'C_')"), ('replace(subgrid(a1, a2), FOUR, ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('apply(a1, switch(a2, ONE, TWO))', "('Callable', 'Tuple[Tuple[int]]')"), ('hconcat(crop(a1, ORIGIN, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('width_t(crop(a1, ORIGIN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('rbind(toobject, fill(a1, TWO, a2))', "('Grid', 'Patch')"), ('tophalf(lefthalf(a1))', "('Tuple[Tuple[int]]',)"), ('fill(a1, a2, a3(ZERO))', "('Grid', 'C_', 'Callable')"), ('paint(replace(a1, FIVE, ZERO), a2)', "('Grid', 'Object')"), ('o_g(underfill(a1, RED, a2), R1)', "('Grid', 'Patch')"), ('fill(replace(a1, FIVE, ZERO), ONE, a2)', "('Grid', 'Patch')"), ('mir_rot_t(vconcat(a1, a2), R1)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('tophalf(righthalf(a1))', "('Tuple[Tuple[int]]',)"), ('vconcat(fill(a1, a2, a3), a4)', "('Grid', 'C_', 'Patch', 'Tuple[Tuple[int]]')"), ('f_ofcolor(lefthalf(a1), ZERO)', "('Tuple[Tuple[int]]',)"), ('toobject(a1, fill(a2, TWO, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'Patch')"), ('astuple(subgrid(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'int')"), ('f_ofcolor(subgrid(a1, a2), BLUE)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(fill(a1, a2, a3), a2, a4)', "('Grid', 'C_', 'Patch', 'Patch')"), ('fill(fill(a1, NINE, a2), FOUR, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(paint(a1, a2), FIVE, a3)', "('Tuple[Tuple[int]]', 'Object', 'Patch')"), ('asindices(replace(a1, FIVE, ZERO))', "('Grid',)"), ('underfill(underfill(a1, a2, a3), a2, a4)', "('Grid', 'C_', 'Patch', 'Patch')"), ('f_ofcolor(upscale_t(a1, THREE), ZERO)', "('Tuple[Tuple[int]]',)"), ('upscale_t(compress(a1), THREE)', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, FOUR, a2), ONE, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(hupscale(a1, a2), ZERO, a3)', "('Tuple[Tuple[int]]', 'int', 'Patch')"), ('fill(fill(a1, ONE, a2), TWO, a3)', "('Grid', 'Patch', 'Patch')"), ('tophalf(crop(a1, ORIGIN, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('fill(replace(a1, FIVE, FOUR), ONE, a2)', "('Grid', 'Patch')"), ('replace(replace(a1, THREE, ZERO), EIGHT, ZERO)', "('Grid',)"), ('hconcat(a1, canvas(ZERO, a2))', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('f_ofcolor(fill(a1, a2, a3), a2)', "('Grid', 'C_', 'Patch')"), ('fill(fill(a1, FOUR, a2), THREE, a3)', "('Grid', 'Patch', 'Patch')"), ('vsplit(paint(a1, a2), THREE)', "('Tuple[Tuple[int]]', 'Object')"), ('fill(replace(a1, TWO, ZERO), THREE, a2)', "('Grid', 'Patch')"), ('rbind(toobject, fill(a1, THREE, a2))', "('Grid', 'Patch')"), ('fill(fill(a1, ONE, a2), THREE, a3)', "('Grid', 'Patch', 'Patch')"), ('paint(canvas(a1, a2), a3)', "('C_', 'Tuple[int, int]', 'Object')"), ('get_color_rank_t(replace(a1, ZERO, a2), L1)', "('Grid', 'C_')"), ('o_g(underfill(a1, ONE, a2), R4)', "('Grid', 'Patch')"), ('mir_rot_t(cellwise(a1, a2, a3), R0)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'int')"), ('fill(fill(a1, ONE, a2), ONE, a3)', "('Grid', 'Patch', 'Patch')"), ('fill(a1, a2, a3(ONE))', "('Grid', 'C_', 'Callable')"), ('replace(paint(a1, a2), ONE, SIX)', "('Tuple[Tuple[int]]', 'Object')"), ('mir_rot_t(paint(a1, a2), R5)', "('Tuple[Tuple[int]]', 'Object')"), ('fill(replace(a1, a2, ZERO), a3, a4)', "('Grid', 'C_', 'C_', 'Patch')"), ('fill(fill(a1, EIGHT, a2), a3, a4)', "('Grid', 'Patch', 'C_', 'Patch')"), ('replace(replace(a1, TWO, SEVEN), THREE, EIGHT)', "('Grid',)"), ('toobject(a1, replace(a2, FIVE, ZERO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid')"), ('underfill(underfill(a1, EIGHT, a2), EIGHT, a3)', "('Grid', 'Patch', 'Patch')"), ('hconcat(canvas(EIGHT, a1), a2)', "('Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('righthalf(bottomhalf(a1))', "('Tuple[Tuple[int]]',)"), ('lefthalf(tophalf(a1))', "('Tuple[Tuple[int]]',)"), ('fill(paint(a1, a2), TWO, a3)', "('Tuple[Tuple[int]]', 'Object', 'Patch')"), ('astuple(tophalf(a1), a2)', "('Tuple[Tuple[int]]', 'int')"), ('switch(subgrid(a1, a2), a3, a4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'R_', 'R_')"), ('replace(vconcat(a1, a2), ONE, TWO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('branch(a1, fill(a2, ZERO, a3), a4)', "('bool', 'Grid', 'Patch', 'Any')"), ('astuple(a1, bottomhalf(a2))', "('int', 'Tuple[Tuple[int]]')"), ('fill(a1, ONE, a2(FOUR))', "('Grid', 'Callable')"), ('fill(vconcat(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'C_', 'Patch')"), ('shape_t(lefthalf(a1))', "('Tuple[Tuple[int]]',)"), ('cellwise(vupscale(a1, THREE), a2, ZERO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('vconcat(crop(a1, ORIGIN, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('upscale_t(subgrid(a1, a2), THREE)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('get_color_rank_t(subgrid(a1, a2), F0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('subgrid(a1, replace(a2, a3, THREE))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'C_')"), ('f_ofcolor(righthalf(a1), FOUR)', "('Tuple[Tuple[int]]',)"), ('branch(a1, a2, fill(a3, ZERO, a4))', "('bool', 'Any', 'Grid', 'Patch')"), ('asobject(trim(a1))', "('Tuple[Tuple[int]]',)"), ('mir_rot_t(switch(a1, ONE, TWO), R3)', "('Tuple[Tuple[int]]',)"), ('vconcat(a1, vconcat(a1, a1))', "('Tuple[Tuple[int]]',)"), ('mir_rot_t(bottomhalf(a1), R0)', "('Tuple[Tuple[int]]',)"), ('o_g(fill(a1, TWO, a2), R4)', "('Grid', 'Patch')"), ('paint(hconcat(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Object')"), ('o_g(fill(a1, a2, a3), R3)', "('Grid', 'C_', 'Patch')"), ('astuple(a1, tophalf(a2))', "('int', 'Tuple[Tuple[int]]')"), ('fill(upscale_t(a1, THREE), ZERO, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('astuple(crop(a1, ORIGIN, THREE_BY_THREE), a2)', "('Tuple[Tuple[int]]', 'int')"), ('o_g(switch(a1, TWO, ZERO), R7)', "('Tuple[Tuple[int]]',)"), ('papply(pair, paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'Tuple')"), ('fill(fill(a1, THREE, a2), EIGHT, a3)', "('Grid', 'Patch', 'Patch')"), ('f_ofcolor(righthalf(a1), a2)', "('Tuple[Tuple[int]]', 'C_')"), ('palette_t(compress(a1))', "('Tuple[Tuple[int]]',)"), ('fill(a1, a2, a3(TWO))', "('Grid', 'C_', 'Callable')"), ('vsplit(subgrid(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'int')"), ('subgrid(a1, fill(a2, a3, a4))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'C_', 'Patch')"), ('replace(replace(a1, THREE, ZERO), SEVEN, ZERO)', "('Grid',)"), ('f_ofcolor(bottomhalf(a1), ZERO)', "('Tuple[Tuple[int]]',)"), ('underfill(switch(a1, a2, a3), a3, a4)', "('Tuple[Tuple[int]]', 'R_', 'R_', 'Patch')"), ('astuple(a1, crop(a2, a3, THREE_BY_THREE))', "('int', 'Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('f_ofcolor(fill(a1, TWO, a2), TWO)', "('Grid', 'Patch')"), ('replace(replace(a1, THREE, EIGHT), FOUR, NINE)', "('Grid',)"), ('hupscale(crop(a1, ORIGIN, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int')"), ('fill(fill(a1, EIGHT, a2), SEVEN, a3)', "('Grid', 'Patch', 'Patch')"), ('height_t(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('get_color_rank_t(trim(a1), L1)', "('Tuple[Tuple[int]]',)"), ('compress(replace(a1, ONE, ZERO))', "('Grid',)"), ('upscale_t(canvas(THREE, UNITY), FOUR)', '()'), ('lbind(hupscale, canvas(ZERO, UNITY))', '()'), ('vconcat(vconcat(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(a1, TWO, a2(THREE))', "('Grid', 'Callable')"), ('f_ofcolor(replace(a1, TWO, ZERO), a2)', "('Grid', 'C_')"), ('compress(cellwise(a1, a2, a3))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'int')"), ('paint(canvas(FIVE, a1), a2)', "('Tuple[int, int]', 'Object')"), ('fill(a1, THREE, a2(a3))', "('Grid', 'Callable', 'Any')"), ('fill(upscale_t(a1, TWO), FOUR, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('replace(replace(a1, EIGHT, ZERO), a2, ZERO)', "('Grid', 'C_')"), ('fill(fill(a1, RED, a2), RED, a3)', "('Grid', 'Patch', 'Patch')"), ('get_color_rank_t(fill(a1, ZERO, a2), L1)', "('Grid', 'Patch')"), ('fill(a1, THREE, a2(TWO))', "('Grid', 'Callable')"), ('fill(underfill(a1, RED, a2), RED, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(fill(a1, ONE, a2), SIX, ZERO)', "('Grid', 'Patch')"), ('fill(fill(a1, TWO, a2), EIGHT, a3)', "('Grid', 'Patch', 'Patch')"), ('hsplit(hconcat(a1, a2), TWO)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('mir_rot_t(subgrid(a1, a2), R5)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('downscale(replace(a1, SIX, ZERO), THREE)', "('Grid',)"), ('paint(fill(a1, FIVE, a2), a3)', "('Grid', 'Patch', 'Object')"), ('subgrid(a1, fill(a2, ONE, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid', 'Patch')"), ('fill(hupscale(a1, THREE), ZERO, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('cover(paint(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Object', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('f_ofcolor(crop(a1, ORIGIN, a2), ZERO)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('canvas(THREE, UNITY)', '()'), ('replace(crop(a1, a2, THREE_BY_THREE), FIVE, ZERO)', "('Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('mir_rot_t(subgrid(a1, a2), R6)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('astuple(a1, fill(a2, THREE, a3))', "('int', 'Grid', 'Patch')"), ('paint(tophalf(a1), a2)', "('Tuple[Tuple[int]]', 'Object')"), ('cellwise(cellwise(a1, a2, a3), a4, a3)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'int', 'Tuple[Tuple[int]]')"), ('mir_rot_t(replace(a1, FOUR, ZERO), R1)', "('Grid',)"), ('astuple(bottomhalf(a1), a2)', "('Tuple[Tuple[int]]', 'int')"), ('repeat(crop(a1, a2, a3), NINE)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('switch(switch(a1, EIGHT, NINE), TWO, SIX)', "('Tuple[Tuple[int]]',)"), ('fill(upscale_t(a1, a2), ZERO, a3)', "('Tuple[Tuple[int]]', 'int', 'Patch')"), ('rbind(toobject, compress(a1))', "('Tuple[Tuple[int]]',)"), ('a1(subgrid(a2, a3))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('f_ofcolor(lefthalf(a1), SEVEN)', "('Tuple[Tuple[int]]',)"), ('asobject(vconcat(a1, a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('vupscale(crop(a1, ORIGIN, a2), a3)', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int')"), ('o_g(upscale_t(a1, a2), R1)', "('Tuple[Tuple[int]]', 'int')"), ('get_color_rank_t(replace(a1, EIGHT, ZERO), L1)', "('Grid',)"), ('mir_rot_t(righthalf(a1), R2)', "('Tuple[Tuple[int]]',)"), ('fill(fill(a1, a2, a3), RED, a4)', "('Grid', 'C_', 'Patch', 'Patch')"), ('f_ofcolor(subgrid(a1, a2), ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('branch(a1, bottomhalf(a2), a3)', "('bool', 'Tuple[Tuple[int]]', 'Any')"), ('crop(a1(a2), ORIGIN, a3)', "('Callable', 'Any', 'Tuple[int, int]')"), ('rbind(hconcat, canvas(THREE, UNITY))', '()'), ('lbind(occurrences, switch(a1, TWO, ZERO))', "('Tuple[Tuple[int]]',)"), ('mir_rot_t(fill(a1, a2, a3), R2)', "('Grid', 'C_', 'Patch')"), ('branch(a1, a2, subgrid(a3, a4))', "('bool', 'Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('vconcat(vconcat(a1, a2), a1)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(a1, ONE, a2(ORIGIN))', "('Grid', 'Callable')"), ('branch(a1, a2, crop(a3, TWO_BY_ZERO, THREE_BY_THREE))', "('bool', 'Any', 'Tuple[Tuple[int]]')"), ('replace(replace(a1, ONE, SIX), TWO, SEVEN)', "('Grid',)"), ('replace(replace(a1, a2, ZERO), a3, a2)', "('Grid', 'C_', 'C_')"), ('underfill(upscale_t(a1, a2), a3, a4)', "('Tuple[Tuple[int]]', 'int', 'C_', 'Patch')"), ('asindices(canvas(ZERO, a1))', "('Tuple[int, int]',)"), ('underfill(underfill(a1, a2, a3), a4, a5)', "('Grid', 'C_', 'Patch', 'C_', 'Patch')"), ('occurrences(fill(a1, TWO, a2), a3)', "('Grid', 'Patch', 'Object')"), ('f_ofcolor(upscale_t(a1, THREE), a2)', "('Tuple[Tuple[int]]', 'C_')"), ('shape_t(bottomhalf(a1))', "('Tuple[Tuple[int]]',)"), ('fill(subgrid(a1, a2), a3, a4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'C_', 'Patch')"), ('fill(righthalf(a1), EIGHT, a2)', "('Tuple[Tuple[int]]', 'Patch')"), ('replace(subgrid(a1, a2), ONE, ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('paint(fill(a1, FOUR, a2), a3)', "('Grid', 'Patch', 'Object')"), ('hsplit(hconcat(a1, a2), THREE)', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('paint(a1, a2(a3))', "('Tuple[Tuple[int]]', 'Callable', 'Any')"), ('a1(hconcat(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('fill(a1(a2), a3, a4)', "('Callable', 'Any', 'C_', 'Patch')"), ('replace(replace(a1, EIGHT, ZERO), ONE, ZERO)', "('Grid',)"), ('fill(fill(a1, TWO, a2), SIX, a3)', "('Grid', 'Patch', 'Patch')"), ('hconcat(canvas(BLUE, a1), a2)', "('Tuple[int, int]', 'Tuple[Tuple[int]]')"), ('f_ofcolor(cover(a1, a2), a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'C_')"), ('a1(paint(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'Object')"), ('paint(bottomhalf(a1), a2)', "('Tuple[Tuple[int]]', 'Object')"), ('f_ofcolor(replace(a1, FIVE, ZERO), FOUR)', "('Grid',)"), ('cover(underfill(a1, ONE, a2), a3)', "('Grid', 'Patch', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('trim(subgrid(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(fill(a1, TWO, a2), ONE, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(fill(a1, a2, a3), FIVE, ZERO)', "('Grid', 'C_', 'Patch')"), ('hupscale(vupscale(a1, FIVE), THREE)', "('Tuple[Tuple[int]]',)"), ('replace(subgrid(a1, a2), a3, ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'C_')"), ('mir_rot_t(subgrid(a1, a2), R4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('fill(cover(a1, a2), ONE, a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Patch')"), ('mir_rot_t(downscale(a1, TWO), R5)', "('Tuple[Tuple[int]]',)"), ('vconcat(vconcat(a1, a1), a1)', "('Tuple[Tuple[int]]',)"), ('fill(replace(a1, FIVE, TWO), FOUR, a2)', "('Grid', 'Patch')"), ('get_color_rank_t(replace(a1, a2, ZERO), L1)', "('Grid', 'C_')"), ('palette_t(lefthalf(a1))', "('Tuple[Tuple[int]]',)"), ('downscale(replace(a1, FIVE, ZERO), THREE)', "('Grid',)"), ('fill(canvas(ZERO, THREE_BY_THREE), a1, a2)', "('C_', 'Patch')"), ('canvas(FIVE, UNITY)', '()'), ('replace(a1(a2), THREE, a3)', "('Callable', 'Any', 'C_')"), ('hconcat(hconcat(a1, a1), a1)', "('Tuple[Tuple[int]]',)"), ('paint(a1(a2), a3)', "('Callable', 'Any', 'Object')"), ('index(fill(a1, TWO, a2), a3)', "('Grid', 'Patch', 'Tuple[int, int]')"), ('hconcat(underfill(a1, a2, a3), underfill(a1, a2, a3))', "('Grid', 'C_', 'Patch')"), ('a1(fill(a2, ZERO, a3))', "('Callable', 'Grid', 'Patch')"), ('get_color_rank_t(bottomhalf(a1), L1)', "('Tuple[Tuple[int]]',)"), ('rbind(bordering, fill(a1, THREE, a2))', "('Grid', 'Patch')"), ('mir_rot_t(fill(a1, FIVE, a2), R5)', "('Grid', 'Patch')"), ('switch(switch(a1, THREE, FOUR), EIGHT, NINE)', "('Tuple[Tuple[int]]',)"), ('f_ofcolor(downscale(a1, a2), ZERO)', "('Tuple[Tuple[int]]', 'int')"), ('a1(cover(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('paint(lefthalf(a1), a2)', "('Tuple[Tuple[int]]', 'Object')"), ('fill(fill(a1, THREE, a2), THREE, a3)', "('Grid', 'Patch', 'Patch')"), ('replace(fill(a1, TWO, a2), NEG_ONE, ZERO)', "('Grid', 'Patch')")}, 'FrozenSet[FrozenSet[Tuple[int, Tuple[int, int]]]]': {('get_arg_rank_f(o_g(a1, R3), numcolors_f, F0)', "('Grid',)"), ('sizefilter(o_g(a1, R4), ONE)', "('Grid',)"), ('sfilter(o_g(a1, R1), a2)', "('Grid', 'Callable')"), ('difference(fgpartition(a1), a2)', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('order(o_g(a1, R5), height_f)', "('Grid',)"), ('difference(a1, colorfilter(a1, a2))', "('Objects', 'C_')"), ('merge_f(o_g(a1, R5))', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R7), size, F0)', "('Grid',)"), ('colorfilter(o_g(a1, R4), a2)', "('Grid', 'C_')"), ('mapply(corners, colorfilter(a1, FIVE))', "('Objects',)"), ('colorfilter(o_g(a1, R5), THREE)', "('Grid',)"), ('sfilter_f(frontiers(a1), hline_o)', "('Tuple[Tuple[int]]',)"), ('apply(toindices, o_g(a1, R7))', "('Grid',)"), ('order(o_g(a1, R5), a2)', "('Grid', 'Callable')"), ('order(colorfilter(a1, ZERO), a2)', "('Objects', 'Callable')"), ('mfilter_f(colorfilter(a1, a2), a3)', "('Objects', 'C_', 'Callable')"), ('colorfilter(o_g(a1, R7), NINE)', "('Grid',)"), ('sizefilter(fgpartition(a1), FOUR)', "('Tuple[Tuple[int]]',)"), ('colorfilter(o_g(a1, R4), FIVE)', "('Grid',)"), ('order(o_g(a1, R4), size)', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R4), width_f, L1)', "('Grid',)"), ('colorfilter(partition(a1), ZERO)', "('Tuple[Tuple[int]]',)"), ('remove_f(a1, o_g(a2, R4))', "('Any', 'Grid')"), ('colorfilter(o_g(a1, R4), ONE)', "('Grid',)"), ('order(o_g(a1, R7), a2)', "('Grid', 'Callable')"), ('colorfilter(o_g(a1, R4), THREE)', "('Grid',)"), ('difference(partition(a1), a2)', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('difference(a1, colorfilter(a1, ZERO))', "('Objects',)"), ('get_val_rank_f(o_g(a1, R5), size, F0)', "('Grid',)"), ('get_nth_f(colorfilter(a1, a2), F0)', "('Objects', 'C_')"), ('remove_f(a1, o_g(a2, R7))', "('Any', 'Grid')"), ('merge(fgpartition(a1))', "('Tuple[Tuple[int]]',)"), ('get_arg_rank_f(o_g(a1, R3), size, F0)', "('Grid',)"), ('difference(colorfilter(a1, a2), a3)', "('Objects', 'C_', 'FrozenSet')"), ('colorfilter(fgpartition(a1), TWO)', "('Tuple[Tuple[int]]',)"), ('sizefilter(o_g(a1, R1), TWO)', "('Grid',)"), ('get_arg_rank_f(colorfilter(a1, a2), a3, F0)', "('Objects', 'C_', 'Callable')"), ('extract(partition(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('get_nth_f(o_g(a1, R5), F0)', "('Grid',)"), ('sizefilter(colorfilter(a1, BLACK), ONE)', "('Objects',)"), ('extract(o_g(a1, R1), a2)', "('Grid', 'Callable')"), ('get_arg_rank_f(fgpartition(a1), size, F0)', "('Tuple[Tuple[int]]',)"), ('get_arg_rank_f(o_g(a1, R5), size, L1)', "('Grid',)"), ('order(partition(a1), size)', "('Tuple[Tuple[int]]',)"), ('extract(colorfilter(a1, FIVE), a2)', "('Objects', 'Callable')"), ('o_g(a1(a2), R5)', "('Callable', 'Any')"), ('mfilter_f(colorfilter(a1, ONE), a2)', "('Objects', 'Callable')"), ('order(fgpartition(a1), height_f)', "('Tuple[Tuple[int]]',)"), ('get_arg_rank_f(o_g(a1, R7), size, L1)', "('Grid',)"), ('sizefilter(o_g(a1, R5), a2)', "('Grid', 'int')"), ('apply(normalize, fgpartition(a1))', "('Tuple[Tuple[int]]',)"), ('merge_f(o_g(a1, R7))', "('Grid',)"), ('difference(colorfilter(a1, THREE), a2)', "('Objects', 'FrozenSet')"), ('sfilter(o_g(a1, R7), a2)', "('Grid', 'Callable')"), ('mapply(delta, o_g(a1, R5))', "('Grid',)"), ('merge_f(colorfilter(a1, a2))', "('Objects', 'C_')"), ('difference(a1, colorfilter(a1, TWO))', "('Objects',)"), ('colorfilter(o_g(a1, R7), TWO)', "('Grid',)"), ('difference(colorfilter(a1, FIVE), a2)', "('Objects', 'FrozenSet')"), ('insert(a1, o_g(a2, R3))', "('Any', 'Grid')"), ('product(colorfilter(a1, TWO), a2)', "('Objects', 'Container')"), ('sizefilter(colorfilter(a1, ZERO), a2)', "('Objects', 'int')"), ('get_arg_rank_f(o_g(a1, R4), size, L1)', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R3), size, L1)', "('Grid',)"), ('get_nth_f(o_g(a1, R1), F0)', "('Grid',)"), ('get_val_rank_f(colorfilter(a1, TWO), width_f, F0)', "('Objects',)"), ('apply(a1, colorfilter(a2, FIVE))', "('Callable', 'Objects')"), ('merge_f(o_g(a1, R1))', "('Grid',)"), ('product(a1, colorfilter(a2, EIGHT))', "('Container', 'Objects')"), ('extract(fgpartition(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('merge_f(colorfilter(a1, FIVE))', "('Objects',)"), ('size_f(o_g(a1, R1))', "('Grid',)"), ('sizefilter(colorfilter(a1, BLUE), FOUR)', "('Objects',)"), ('mapply(outbox, colorfilter(a1, SIX))', "('Objects',)"), ('get_val_rank_f(o_g(a1, R4), size, L1)', "('Grid',)"), ('get_val_rank_f(o_g(a1, R5), a2, F1)', "('Grid', 'Callable')"), ('apply(a1, o_g(a2, R1))', "('Callable', 'Grid')"), ('get_arg_rank(o_g(a1, R3), numcolors_f, L1)', "('Grid',)"), ('mfilter_f(o_g(a1, R4), a2)', "('Grid', 'Callable')"), ('get_arg_rank_f(o_g(a1, R1), a2, F0)', "('Grid', 'Callable')"), ('totuple(o_g(a1, R7))', "('Grid',)"), ('mapply(box, colorfilter(a1, FIVE))', "('Objects',)"), ('apply(color, o_g(a1, R5))', "('Grid',)"), ('merge_f(frontiers(a1))', "('Tuple[Tuple[int]]',)"), ('mapply(a1, o_g(a2, R1))', "('Callable', 'Grid')"), ('order(o_g(a1, R4), a2)', "('Grid', 'Callable')"), ('apply(a1, fgpartition(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('sfilter_f(colorfilter(a1, TWO), a2)', "('Objects', 'Callable')"), ('colorfilter(o_g(a1, R5), a2)', "('Grid', 'C_')"), ('lbind(sizefilter, o_g(a1, R5))', "('Grid',)"), ('mapply(a1, colorfilter(a2, ZERO))', "('Callable', 'Objects')"), ('partition(a1(a2))', "('Callable', 'Any')"), ('get_nth_f(colorfilter(a1, THREE), F0)', "('Objects',)"), ('remove_f(a1, o_g(a2, R1))', "('Any', 'Grid')"), ('sizefilter(o_g(a1, R5), EIGHT)', "('Grid',)"), ('extract(o_g(a1, R7), a2)', "('Grid', 'Callable')"), ('colorfilter(o_g(a1, R5), EIGHT)', "('Grid',)"), ('sizefilter(o_g(a1, R4), THREE)', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R5), size, F0)', "('Grid',)"), ('mapply(a1, colorfilter(a2, a3))', "('Callable', 'Objects', 'C_')"), ('sfilter_f(frontiers(a1), vline_o)', "('Tuple[Tuple[int]]',)"), ('mapply(toindices, colorfilter(a1, RED))', "('Objects',)"), ('mapply(delta, o_g(a1, R7))', "('Grid',)"), ('o_g(a1(a2), R4)', "('Callable', 'Any')"), ('get_nth_f(o_g(a1, R3), F0)', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R3), a2, F0)', "('Grid', 'Callable')"), ('sfilter_f(colorfilter(a1, FIVE), a2)', "('Objects', 'Callable')"), ('sfilter_f(colorfilter(a1, ONE), a2)', "('Objects', 'Callable')"), ('lbind(sfilter, o_g(a1, R5))', "('Grid',)"), ('size_f(o_g(a1, R5))', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R3), numcolors_f, L1)', "('Grid',)"), ('sizefilter(partition(a1), FOUR)', "('Tuple[Tuple[int]]',)"), ('remove_f(a1, fgpartition(a2))', "('Any', 'Tuple[Tuple[int]]')"), ('lbind(extract, o_g(a1, R5))', "('Grid',)"), ('difference(o_g(a1, R3), a2)', "('Grid', 'FrozenSet')"), ('product(a1, colorfilter(a2, FIVE))', "('Container', 'Objects')"), ('get_nth_f(colorfilter(a1, EIGHT), F0)', "('Objects',)"), ('extract(o_g(a1, R3), a2)', "('Grid', 'Callable')"), ('get_arg_rank_f(colorfilter(a1, YELLOW), size, L1)', "('Objects',)"), ('colorfilter(o_g(a1, R4), NINE)', "('Grid',)"), ('apply(toindices, colorfilter(a1, ZERO))', "('Objects',)"), ('mapply(a1, fgpartition(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('rbind(remove, o_g(a1, R5))', "('Grid',)"), ('difference(frontiers(a1), a2)', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('sfilter_f(colorfilter(a1, NINE), a2)', "('Objects', 'Callable')"), ('mfilter_f(colorfilter(a1, NINE), a2)', "('Objects', 'Callable')"), ('sfilter_f(colorfilter(a1, BLACK), square_f)', "('Objects',)"), ('mapply(outbox, colorfilter(a1, TWO))', "('Objects',)"), ('other_f(o_g(a1, R3), a2)', "('Grid', 'Any')"), ('mapply(a1, o_g(a2, R5))', "('Callable', 'Grid')"), ('get_nth_f(o_g(a1, R7), F0)', "('Grid',)"), ('mapply(a1, o_g(a2, R7))', "('Callable', 'Grid')"), ('get_arg_rank_f(partition(a1), size, F0)', "('Tuple[Tuple[int]]',)"), ('apply(size, fgpartition(a1))', "('Tuple[Tuple[int]]',)"), ('mapply(toindices, o_g(a1, R5))', "('Grid',)"), ('extract(colorfilter(a1, ZERO), a2)', "('Objects', 'Callable')"), ('colorfilter(o_g(a1, R4), YELLOW)', "('Grid',)"), ('mapply(outbox, colorfilter(a1, NINE))', "('Objects',)"), ('totuple(o_g(a1, R5))', "('Grid',)"), ('lbind(colorfilter, o_g(a1, R5))', "('Grid',)"), ('o_g(a1(a2), R7)', "('Callable', 'Any')"), ('get_nth_f(colorfilter(a1, TWO), F0)', "('Objects',)"), ('mapply(a1, o_g(a2, R3))', "('Callable', 'Grid')"), ('insert(a1, o_g(a2, R5))', "('Any', 'Grid')"), ('colorfilter(o_g(a1, R5), ONE)', "('Grid',)"), ('apply(a1, o_g(a2, R5))', "('Callable', 'Grid')"), ('colorfilter(o_g(a1, R4), ZERO)', "('Grid',)"), ('merge(o_g(a1, R5))', "('Grid',)"), ('sizefilter(colorfilter(a1, THREE), ONE)', "('Objects',)"), ('colorfilter(o_g(a1, R5), FIVE)', "('Grid',)"), ('get_arg_rank_f(colorfilter(a1, a2), size, F0)', "('Objects', 'C_')"), ('sizefilter(o_g(a1, R5), TWO)', "('Grid',)"), ('colorfilter(o_g(a1, R4), BLACK)', "('Grid',)"), ('sizefilter(o_g(a1, R7), ONE)', "('Grid',)"), ('apply(a1, colorfilter(a2, a3))', "('Callable', 'Objects', 'C_')"), ('colorfilter(o_g(a1, R1), a2)', "('Grid', 'C_')"), ('get_val_rank_f(fgpartition(a1), shape_f, F0)', "('Tuple[Tuple[int]]',)"), ('difference(o_g(a1, R1), a2)', "('Grid', 'FrozenSet')"), ('product(colorfilter(a1, TWO), colorfilter(a1, TWO))', "('Objects',)"), ('colorfilter(o_g(a1, R5), TWO)', "('Grid',)"), ('sizefilter(o_g(a1, R5), ONE)', "('Grid',)"), ('sfilter_f(o_g(a1, R5), square_f)', "('Grid',)"), ('mapply(a1, colorfilter(a2, ONE))', "('Callable', 'Objects')"), ('get_arg_rank_f(o_g(a1, R5), a2, F0)', "('Grid', 'Callable')"), ('sfilter_f(o_g(a1, R4), square_f)', "('Grid',)"), ('get_arg_rank_f(o_g(a1, R7), a2, F0)', "('Grid', 'Callable')"), ('get_arg_rank_f(o_g(a1, R1), numcolors_f, F0)', "('Grid',)"), ('lbind(a1, o_g(a2, R5))', "('Callable', 'Grid')"), ('fgpartition(a1(a2))', "('Callable', 'Any')"), ('merge_f(fgpartition(a1))', "('Tuple[Tuple[int]]',)"), ('apply(toindices, o_g(a1, R5))', "('Grid',)"), ('other_f(fgpartition(a1), a2)', "('Tuple[Tuple[int]]', 'Any')"), ('colorfilter(o_g(a1, R5), BLUE)', "('Grid',)"), ('apply(a1, colorfilter(a2, TWO))', "('Callable', 'Objects')"), ('colorfilter(o_g(a1, R5), SIX)', "('Grid',)"), ('mfilter_f(o_g(a1, R5), a2)', "('Grid', 'Callable')"), ('mfilter_f(colorfilter(a1, ZERO), a2)', "('Objects', 'Callable')"), ('size_f(fgpartition(a1))', "('Tuple[Tuple[int]]',)"), ('apply(delta, o_g(a1, R5))', "('Grid',)"), ('get_arg_rank_f(colorfilter(a1, YELLOW), size, F0)', "('Objects',)"), ('apply(a1, o_g(a2, R7))', "('Callable', 'Grid')"), ('remove_f(a1, o_g(a2, R3))', "('Any', 'Grid')"), ('sfilter_f(colorfilter(a1, a2), square_f)', "('Objects', 'C_')"), ('get_arg_rank_f(o_g(a1, R5), a2, L1)', "('Grid', 'Callable')"), ('colorfilter(o_g(a1, R4), TWO)', "('Grid',)"), ('get_nth_f(colorfilter(a1, ZERO), F0)', "('Objects',)"), ('sfilter_f(partition(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('mapply(delta, colorfilter(a1, SIX))', "('Objects',)"), ('sfilter(colorfilter(a1, ZERO), a2)', "('Objects', 'Callable')"), ('get_val_rank_f(o_g(a1, R4), width_f, L1)', "('Grid',)"), ('merge(colorfilter(a1, TWO))', "('Objects',)"), ('size_f(o_g(a1, R7))', "('Grid',)"), ('difference(colorfilter(a1, ONE), a2)', "('Objects', 'FrozenSet')"), ('difference(o_g(a1, R5), a2)', "('Grid', 'FrozenSet')"), ('get_arg_rank_f(o_g(a1, R4), height_f, F0)', "('Grid',)"), ('difference(o_g(a1, R4), a2)', "('Grid', 'FrozenSet')"), ('get_arg_rank_f(o_g(a1, R4), size, F0)', "('Grid',)"), ('get_val_rank_f(o_g(a1, R4), size, F0)', "('Grid',)"), ('colorfilter(partition(a1), a2)', "('Tuple[Tuple[int]]', 'C_')"), ('difference(colorfilter(a1, BLACK), a2)', "('Objects', 'FrozenSet')"), ('apply(center, colorfilter(a1, FIVE))', "('Objects',)"), ('order(fgpartition(a1), size)', "('Tuple[Tuple[int]]',)"), ('get_arg_rank_f(o_g(a1, R1), size, L1)', "('Grid',)"), ('apply(outbox, o_g(a1, R5))', "('Grid',)"), ('apply(normalize, o_g(a1, R5))', "('Grid',)"), ('sfilter_f(colorfilter(a1, ZERO), a2)', "('Objects', 'Callable')"), ('extract(o_g(a1, R5), a2)', "('Grid', 'Callable')"), ('get_arg_rank_f(colorfilter(a1, ZERO), size, L1)', "('Objects',)"), ('sfilter_f(o_g(a1, R3), a2)', "('Grid', 'Callable')"), ('order(fgpartition(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('sizefilter(colorfilter(a1, TWO), ONE)', "('Objects',)"), ('a1(fgpartition(a2))', "('Callable', 'Tuple[Tuple[int]]')"), ('sfilter_f(o_g(a1, R1), a2)', "('Grid', 'Callable')"), ('get_arg_rank_f(colorfilter(a1, ONE), a2, F0)', "('Objects', 'Callable')")}, 'C_': {('replace(a1, a2, get_color_rank_t(a3, L1))', "('Grid', 'C_', 'Grid')"), ('rbind(colorcount_f, get_color_rank_t(a1, L1))', "('Grid',)"), ('replace(a1, get_color_rank_t(a1, L1), FIVE)', "('Grid',)"), ('recolor_i(get_color_rank_t(a1, L1), a2)', "('Grid', 'FrozenSet[Tuple[int, int]]')"), ('fill(a1, get_color_rank_t(a1, L1), a2)', "('Grid', 'Patch')"), ('other_f(a1, get_color_rank_t(a2, L1))', "('FrozenSet', 'Grid')"), ('replace(a1, get_color_rank_t(a1, L1), a2)', "('Grid', 'C_')"), ('replace(a1, get_color_rank_t(a1, F0), THREE)', "('Grid',)"), ('switch(a1, a2, get_color_rank_t(a1, F0))', "('Grid', 'R_')"), ('f_ofcolor(a1, get_color_rank_t(a2, L1))', "('Grid', 'Grid')"), ('initset(get_color_rank_t(a1, F0))', "('Grid',)"), ('switch(a1, get_color_rank_t(a1, L1), a2)', "('Grid', 'R_')"), ('matcher(a1, get_color_rank_f(a2, F0))', "('Callable', 'Object')"), ('f_ofcolor(a1, get_color_rank_t(a1, L1))', "('Grid',)"), ('replace(a1, ZERO, get_color_rank_t(a1, L1))', "('Grid',)"), ('fill(a1, get_color_rank_t(a2, F0), a3)', "('Grid', 'Grid', 'Patch')"), ('fill(a1, get_color_rank_t(a2, L1), a3)', "('Grid', 'Grid', 'Patch')"), ('replace(a1, get_color_rank_t(a1, L1), ZERO)', "('Grid',)"), ('replace(a1, a2, get_color_rank_f(a3, F0))', "('Grid', 'C_', 'Object')"), ('cellwise(a1, a2, get_color_rank_t(a1, L1))', "('Grid', 'Tuple[Tuple[int]]')"), ('canvas(get_color_rank_t(a1, F0), THREE_BY_THREE)', "('Grid',)"), ('equality(get_color_rank_f(a1, F0), a2)', "('Object', 'Any')"), ('rbind(colorcount_t, get_color_rank_t(a1, L1))', "('Grid',)"), ('colorfilter(a1, get_color_rank_t(a2, L1))', "('Objects', 'Grid')"), ('f_ofcolor(a1, get_color_rank_t(a1, F0))', "('Grid',)"), ('lbind(remove, get_color_rank_t(a1, F0))', "('Grid',)"), ('cellwise(a1, a2, get_color_rank_t(a3, L1))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]', 'Grid')"), ('colorfilter(a1, get_color_rank_f(a2, L1))', "('Objects', 'Object')"), ('replace(a1, EIGHT, get_color_rank_f(a2, F0))', "('Grid', 'Object')"), ('canvas(get_color_rank_t(a1, F0), UNITY)', "('Grid',)"), ('matcher(a1, get_color_rank_f(a2, L1))', "('Callable', 'Object')"), ('underfill(a1, get_color_rank_t(a1, L1), a2)', "('Grid', 'Patch')"), ('f_ofcolor(a1, get_color_rank_t(a2, F0))', "('Grid', 'Grid')"), ('fill(a1, get_color_rank_f(a2, F0), a3)', "('Grid', 'Object', 'Patch')"), ('rbind(colorcount_f, get_color_rank_f(a1, F0))', "('Object',)"), ('rbind(f_ofcolor, get_color_rank_t(a1, L1))', "('Grid',)"), ('f_ofcolor(a1, get_color_rank_f(a2, F0))', "('Grid', 'Object')"), ('canvas(get_color_rank_t(a1, F0), a2)', "('Grid', 'Tuple[int, int]')"), ('replace(a1, get_color_rank_t(a2, L1), a3)', "('Grid', 'Grid', 'C_')")}, 'Any': {('matcher(a1, get_val_rank_f(a2, a3, L1))', "('Callable', 'FrozenSet', 'Callable')"), ('corner(get_arg_rank_f(a1, size, F0), R0)', "('FrozenSet',)"), ('interval(ZERO, branch(a1, a2, a3), ONE)', "('bool', 'Any', 'Any')"), ('add(get_arg_rank_f(a1, a2, F0), a3)', "('FrozenSet', 'Callable', 'Union[int, Tuple[int, int]]')"), ('equality(a1, get_nth_f(a2, F0))', "('Any', 'FrozenSet')"), ('a1(get_nth_t(a2, L1))', "('Callable', 'Tuple')"), ('color(get_nth_f(a1, F0))', "('FrozenSet',)"), ('corner(get_arg_rank_f(a1, a2, F0), R1)', "('FrozenSet', 'Callable')"), ('canvas(branch(a1, ZERO, EIGHT), UNITY)', "('bool',)"), ('get_nth_f(get_nth_f(a1, F0), F0)', "('FrozenSet',)"), ('vmatching(get_arg_rank_f(a1, size, L1), a2)', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('position(a1, get_arg_rank_f(a2, size, L1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('branch(a1, vupscale, hupscale)(a2, a3)', "('bool', 'Any', 'Any')"), ('fill(a1, other_f(a2, ZERO), a3)', "('Grid', 'FrozenSet', 'Patch')"), ('subtract(a1, other_f(a2, a1))', "('Any', 'FrozenSet')"), ('rbind(subtract, get_nth_t(a1, L1))', "('Tuple',)"), ('f_ofcolor(get_nth_t(a1, F0), FOUR)', "('Tuple',)"), ('branch(a1, THREE, branch(a2, TWO, ONE))', "('bool', 'bool')"), ('branch(a1, other_f(a2, a3), a3)', "('bool', 'FrozenSet', 'Any')"), ('halve(get_val_rank_f(a1, width_f, F0))', "('FrozenSet',)"), ('fill(a1, a2, get_arg_rank_f(a3, size, F0))', "('Grid', 'C_', 'FrozenSet')"), ('color(get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('a1(get_arg_rank_f(a2, size, F0))', "('Callable', 'FrozenSet')"), ('width_f(get_arg_rank_f(a1, a2, F0))', "('FrozenSet', 'Callable')"), ('center(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('shift(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Tuple[int, int]')"), ('a1(get_nth_f(a2, F0))', "('Callable', 'FrozenSet')"), ('shape_f(get_arg_rank_f(a1, a2, F0))', "('FrozenSet', 'Callable')"), ('fill(a1, other_f(a2, FIVE), a3)', "('Grid', 'FrozenSet', 'Patch')"), ('paint(a1, get_arg_rank_f(a2, size, F0))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('gravitate(a1, branch(a2, a3, a4))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'bool', 'Any', 'Any')"), ('branch(a1, hconcat, vconcat)(a2, a3)', "('bool', 'Any', 'Any')"), ('fill(get_nth_t(a1, L1), NINE, a2)', "('Tuple', 'Patch')"), ('equality(get_val_rank_f(a1, size, F0), ONE)', "('FrozenSet',)"), ('lbind(shift, get_nth_f(a1, F0))', "('FrozenSet',)"), ('fill(a1, TWO, get_arg_rank_f(a2, size, L1))', "('Grid', 'FrozenSet')"), ('normalize(get_nth_f(a1, F0))', "('FrozenSet',)"), ('corner(extract(a1, a2), R0)', "('Container', 'Callable')"), ('rbind(adjacent, get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('height_f(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('vconcat(get_nth_f(a1, F0), get_nth_f(a1, F0))', "('FrozenSet',)"), ('color(extract(a1, a2))', "('Container', 'Callable')"), ('get_color_rank_f(get_arg_rank_f(a1, a2, F0), L1)', "('FrozenSet', 'Callable')"), ('astuple(ONE, get_val_rank_f(a1, size, F0))', "('FrozenSet',)"), ('fill(a1, ZERO, get_nth_f(a2, F0))', "('Grid', 'FrozenSet')"), ('paint(a1, branch(a2, a3, a4))', "('Tuple[Tuple[int]]', 'bool', 'Any', 'Any')"), ('fork(combine, a1, branch(a2, a3, a4))', "('Callable', 'bool', 'Any', 'Any')"), ('inbox(extract(a1, a2))', "('Container', 'Callable')"), ('connect(a1, branch(a2, TWO_BY_TWO, ZERO_BY_TWO))', "('Tuple[int, int]', 'bool')"), ('width_t(get_arg_rank_t(a1, numcolors_t, F0))', "('Tuple',)"), ('corner(get_nth_f(a1, F0), R0)', "('FrozenSet',)"), ('add(branch(a1, UP, RIGHT), a2)', "('bool', 'Union[int, Tuple[int, int]]')"), ('mir_rot_t(get_nth_t(a1, L1), R2)', "('Tuple',)"), ('normalize(get_arg_rank_f(a1, numcolors_f, F0))', "('FrozenSet',)"), ('initset(get_nth_f(a1, F0))', "('FrozenSet',)"), ('a1(a2(a3))', "('Callable', 'Callable', 'Any')"), ('multiply(branch(a1, NEG_ONE, ONE), THREE)', "('bool',)"), ('equality(get_val_rank_f(a1, a2, F1), a3)', "('FrozenSet', 'Callable', 'Any')"), ('corner(get_nth_f(a1, L1), R0)', "('FrozenSet',)"), ('chain(a1, branch(a2, identity, a3), a4)', "('Callable', 'bool', 'Any', 'Callable')"), ('remove_f(extract(a1, a2), a1)', "('Container', 'Callable')"), ('papply(pair, get_arg_rank_f(a1, a2, F0), a3)', "('FrozenSet', 'Callable', 'Tuple')"), ('greater(get_nth_f(a1, F0), THREE)', "('FrozenSet',)"), ('equality(other_f(a1, ZERO), ONE)', "('FrozenSet',)"), ('f_ofcolor(a1, other_f(a2, ZERO))', "('Grid', 'FrozenSet')"), ('chain(outbox, outbox, branch(a1, identity, outbox))', "('bool',)"), ('canvas(other_f(a1, ZERO), a2)', "('FrozenSet', 'Tuple[int, int]')"), ('upscale_t(get_arg_rank_t(a1, numcolors_t, F0), a2)', "('Tuple', 'int')"), ('subtract(branch(a1, a2, a3), a4)', "('bool', 'Any', 'Any', 'Union[int, Tuple[int, int]]')"), ('gravitate(a1, get_nth_f(a2, F0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('add(branch(a1, a2, a3), a4)', "('bool', 'Any', 'Any', 'Union[int, Tuple[int, int]]')"), ('shape_f(get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('equality(other_f(a1, ZERO), TWO)', "('FrozenSet',)"), ('branch(a1, a2, identity)(a3)', "('bool', 'Any', 'Any')"), ('multiply(a1, branch(a2, NEG_ONE, ONE))', "('Union[int, Tuple[int, int]]', 'bool')"), ('remove_t(get_nth_t(a1, F0), a1)', "('Tuple',)"), ('get_nth_f(extract(a1, a2), F0)', "('Container', 'Callable')"), ('fill(a1, ONE, get_arg_rank_f(a2, size, F0))', "('Grid', 'FrozenSet')"), ('other_f(a1, extract(a1, a2))', "('Container', 'Callable')"), ('width_f(get_nth_f(a1, F0))', "('FrozenSet',)"), ('backdrop(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('cover(a1, get_nth_f(a2, F0))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('underfill(a1, other_f(a2, a3), a4)', "('Grid', 'FrozenSet', 'Any', 'Patch')"), ('fill(a1, branch(a2, a3, a4), a5)', "('Grid', 'bool', 'Any', 'Any', 'Patch')"), ('dneighbors(get_nth_f(a1, F0))', "('FrozenSet',)"), ('get_arg_rank_t(a1(a2, TWO), numcolors_t, L1)', "('Callable', 'Any')"), ('get_nth_f(a1(a2), F0)', "('Callable', 'Any')"), ('sizefilter(a1, get_val_rank_f(a2, size, L1))', "('Container', 'FrozenSet')"), ('multiply(branch(a1, UNITY, DOWN_LEFT), a2)', "('bool', 'Union[int, Tuple[int, int]]')"), ('lbind(occurrences, get_nth_f(a1, F0))', "('FrozenSet',)"), ('color(get_arg_rank_f(a1, a2, F0))', "('FrozenSet', 'Callable')"), ('rbind(gravitate, get_nth_f(a1, F0))', "('FrozenSet',)"), ('shoot(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Tuple[int, int]')"), ('lbind(vmatching, extract(a1, a2))', "('Container', 'Callable')"), ('vconcat(a1, branch(a2, a3, a4))', "('Tuple[Tuple[int]]', 'bool', 'Any', 'Any')"), ('greater(get_nth_t(a1, L1), SEVEN)', "('Tuple',)"), ('upscale_f(get_arg_rank_f(a1, size, L1), a2)', "('FrozenSet', 'int')"), ('a1(get_arg_rank_t(a2, numcolors_t, L1))', "('Callable', 'Tuple')"), ('fill(a1, get_common_rank_t(a2, F1), a3)', "('Grid', 'Tuple', 'Patch')"), ('paint(a1, get_arg_rank_f(a2, size, L1))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('corner(get_arg_rank_f(a1, a2, F0), R0)', "('FrozenSet', 'Callable')"), ('apply(branch(a1, identity, a2), a3)', "('bool', 'Any', 'Container')"), ('cover(a1, other_f(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'Any')"), ('canvas(branch(a1, ONE, SEVEN), UNITY)', "('bool',)"), ('size_f(get_arg_rank_f(a1, width_f, L1))', "('FrozenSet',)"), ('shift(get_nth_f(a1, F0), LEFT)', "('FrozenSet',)"), ('f_ofcolor(a1, get_nth_f(a2, L1))', "('Grid', 'FrozenSet')"), ('switch(a1, a2, get_nth_f(a3, L1))', "('Tuple[Tuple[int]]', 'R_', 'FrozenSet')"), ('repeat(get_nth_t(a1, L1), ONE)', "('Tuple',)"), ('lbind(subtract, get_val_rank_f(a1, shape_f, F0))', "('FrozenSet',)"), ('lbind(shift, extract(a1, a2))', "('Container', 'Callable')"), ('remove_f(get_arg_rank_f(a1, size, F0), a1)', "('FrozenSet',)"), ('corner(get_arg_rank_f(a1, size, L1), R0)', "('FrozenSet',)"), ('subtract(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Union[int, Tuple[int, int]]')"), ('normalize_o(other_f(a1, a2))', "('FrozenSet', 'Any')"), ('f_ofcolor(get_nth_t(a1, F0), NINE)', "('Tuple',)"), ('greater(get_nth_f(a1, F0), SEVEN)', "('FrozenSet',)"), ('f_ofcolor(a1, get_nth_f(a2, F0))', "('Grid', 'FrozenSet')"), ('a1(a2(a3), TWO)', "('Callable', 'Callable', 'Any')"), ('branch(a1, hsplit, vsplit)(a2, TWO)', "('bool', 'Any')"), ('branch(a1, lefthalf, tophalf)(a2)', "('bool', 'Any')"), ('cover(branch(a1, a2, a3), a4)', "('bool', 'Any', 'Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('vperiod(get_nth_f(a1, F0))', "('FrozenSet',)"), ('toindices(get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('subgrid(get_arg_rank_f(a1, height_f, F0), a2)', "('FrozenSet', 'Tuple[Tuple[int]]')"), ('o_g(get_nth_t(a1, L1), R1)', "('Tuple',)"), ('lbind(adjacent, extract(a1, a2))', "('Container', 'Callable')"), ('toindices(get_nth_f(a1, F0))', "('FrozenSet',)"), ('normalize(get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('subgrid(get_arg_rank_f(a1, size, F0), a2)', "('FrozenSet', 'Tuple[Tuple[int]]')"), ('gravitate(a1, extract(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Container', 'Callable')"), ('normalize_o(get_arg_rank_f(a1, numcolors_f, L1))', "('FrozenSet',)"), ('a1(get_arg_rank_f(a2, size, L1))', "('Callable', 'FrozenSet')"), ('inbox(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('width_f(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('canvas(a1, get_val_rank_f(a2, shape_f, F0))', "('C_', 'FrozenSet')"), ('col_row(get_nth_f(a1, F0), R2)', "('FrozenSet',)"), ('get_val_rank_f(a1, branch(a2, a3, a4), F1)', "('FrozenSet', 'bool', 'Any', 'Any')"), ('fill(a1, TWO, get_arg_rank_f(a2, a3, L1))', "('Grid', 'FrozenSet', 'Callable')"), ('rbind(vmatching, get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('underfill(a1, get_nth_f(a2, F0), a3)', "('Grid', 'FrozenSet', 'Patch')"), ('chain(branch(a1, identity, a2), a3, a4)', "('bool', 'Any', 'Callable', 'Callable')"), ('corner(get_arg_rank_f(a1, size, L1), R2)', "('FrozenSet',)"), ('rapply_t(a1, get_arg_rank_f(a2, numcolors_f, F0))', "('Tuple', 'FrozenSet')"), ('branch(a1, a2, branch(a3, a4, a5))', "('bool', 'Any', 'bool', 'Any', 'Any')"), ('a1(a2, a3(a4))', "('Callable', 'Any', 'Callable', 'Any')"), ('astuple(branch(a1, EIGHT, a2), a3)', "('bool', 'Any', 'int')"), ('gravitate(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('canvas(other_f(a1, a2), UNITY)', "('FrozenSet', 'Any')"), ('vconcat(get_nth_t(a1, F0), a2)', "('Tuple', 'Tuple[Tuple[int]]')"), ('outbox(get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('mir_rot_t(get_arg_rank_f(a1, a2, F0), R2)', "('FrozenSet', 'Callable')"), ('shift(get_nth_t(a1, L1), a2)', "('Tuple', 'Tuple[int, int]')"), ('astuple(a1, get_nth_t(a2, L1))', "('int', 'Tuple')"), ('remove(get_arg_rank_f(a1, a2, F0), a1)', "('FrozenSet', 'Callable')"), ('normalize(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('fill(a1, a2, branch(a3, a4, a5))', "('Grid', 'C_', 'bool', 'Any', 'Any')"), ('shift(get_nth_f(a1, F0), DOWN)', "('FrozenSet',)"), ('col_row(get_arg_rank_f(a1, a2, L1), R2)', "('FrozenSet', 'Callable')"), ('lbind(position, get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('f_ofcolor(a1, get_common_rank_t(a2, F1))', "('Grid', 'Tuple')"), ('lbind(intersection, get_nth_f(a1, F0))', "('FrozenSet',)"), ('fill(a1, other_f(a2, a3), a4)', "('Grid', 'FrozenSet', 'Any', 'Patch')"), ('subgrid(get_arg_rank_f(a1, size, L1), a2)', "('FrozenSet', 'Tuple[Tuple[int]]')"), ('shape_f(extract(a1, a2))', "('Container', 'Callable')"), ('corner(get_arg_rank_f(a1, a2, F0), R2)', "('FrozenSet', 'Callable')"), ('get_nth_t(get_nth_f(a1, F0), L1)', "('FrozenSet',)"), ('remove_f(get_arg_rank_f(a1, size, F0), a2)', "('FrozenSet', 'FrozenSet')"), ('a1(branch(a2, a3, a4), a5)', "('Callable', 'bool', 'Any', 'Any', 'Any')"), ('branch(a1, tophalf, lefthalf)(a2)', "('bool', 'Any')"), ('connect(branch(a1, TWO_BY_ZERO, ORIGIN), a2)', "('bool', 'Tuple[int, int]')"), ('center(get_nth_f(a1, F0))', "('FrozenSet',)"), ('multiply(get_nth_f(a1, F0), FOUR)', "('FrozenSet',)"), ('branch(a1, width_f, height_f)(a2)', "('bool', 'Any')"), ('position(get_arg_rank_f(a1, size, F0), a2)', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(position, get_nth_f(a1, F0))', "('FrozenSet',)"), ('equality(a1, other_f(a2, ZERO))', "('Any', 'FrozenSet')"), ('hperiod(get_nth_f(a1, F0))', "('FrozenSet',)"), ('normalize_o(get_arg_rank_f(a1, a2, F0))', "('FrozenSet', 'Callable')"), ('vmatching(a1, get_arg_rank_f(a2, size, F0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('branch(a1, SIX, branch(a2, THREE, a3))', "('bool', 'bool', 'Any')"), ('move(a1, get_nth_f(a2, F0), DOWN)', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('branch(a1, EIGHT, branch(a2, FOUR, ZERO))', "('bool', 'bool')"), ('center(extract(a1, a2))', "('Container', 'Callable')"), ('palette_f(extract(a1, a2))', "('Container', 'Callable')"), ('matcher(normalize, get_common_rank_t(a1, L1))', "('Tuple',)"), ('fill(a1, TWO, extract(a2, a3))', "('Grid', 'Container', 'Callable')"), ('paint(a1, get_nth_f(a2, F0))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('outbox(extract(a1, a2))', "('Container', 'Callable')"), ('sfilter_f(other_f(a1, a2), a3)', "('FrozenSet', 'Any', 'Callable')"), ('color(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('matcher(a1, get_val_rank_f(a2, a1, F0))', "('Callable', 'FrozenSet')"), ('subgrid(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Tuple[Tuple[int]]')"), ('equality(get_val_rank_f(a1, size, F0), FIVE)', "('FrozenSet',)"), ('fork(combine, branch(a1, a2, a3), a4)', "('bool', 'Any', 'Any', 'Callable')"), ('lbind(shift, get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('move(a1, extract(a2, a3), a4)', "('Tuple[Tuple[int]]', 'Container', 'Callable', 'Tuple[int, int]')"), ('get_color_rank_f(get_arg_rank_f(a1, size, F0), F0)', "('FrozenSet',)"), ('fill(a1, SIX, get_arg_rank_f(a2, size, F0))', "('Grid', 'FrozenSet')"), ('color(other_f(a1, a2))', "('FrozenSet', 'Any')"), ('fill(a1, THREE, get_arg_rank_f(a2, a3, F0))', "('Grid', 'FrozenSet', 'Callable')"), ('connect(get_arg_rank_f(a1, a2, F0), a3)', "('FrozenSet', 'Callable', 'Tuple[int, int]')"), ('branch(a1, RIGHT, branch(a2, UNITY, TWO_BY_TWO))', "('bool', 'bool')"), ('paint(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Object')"), ('astuple(a1, branch(a2, EIGHT, a3))', "('int', 'bool', 'Any')"), ('a1(get_nth_f(a2, L1))', "('Callable', 'FrozenSet')"), ('subtract(get_nth_t(a1, L1), a2)', "('Tuple', 'Union[int, Tuple[int, int]]')"), ('add(a1, extract(a2, a3))', "('Union[int, Tuple[int, int]]', 'Container', 'Callable')"), ('recolor_o(ONE, get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('fill(a1, a2, get_arg_rank_f(a3, a4, F0))', "('Grid', 'C_', 'FrozenSet', 'Callable')"), ('fill(a1, ONE, get_arg_rank_f(a2, a3, F0))', "('Grid', 'FrozenSet', 'Callable')"), ('crop(a1, ORIGIN, branch(a2, a3, a4))', "('Tuple[Tuple[int]]', 'bool', 'Any', 'Any')"), ('compose(branch(a1, tojvec, toivec), increment)', "('bool',)"), ('subgrid(extract(a1, a2), a3)', "('Container', 'Callable', 'Tuple[Tuple[int]]')"), ('downscale(a1, get_val_rank_f(a2, width_f, L1))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('branch(a1, identity, a2)(a3)', "('bool', 'Any', 'Any')"), ('branch(a1, righthalf, bottomhalf)(a2)', "('bool', 'Any')"), ('o_g(branch(a1, a2, a3), R5)', "('bool', 'Any', 'Any')"), ('rbind(adjacent, get_arg_rank_f(a1, size, F0))', "('FrozenSet',)"), ('subgrid(a1, branch(a2, a3, a4))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'bool', 'Any', 'Any')"), ('get_color_rank_f(extract(a1, a2), F0)', "('Container', 'Callable')"), ('lbind(hmatching, extract(a1, a2))', "('Container', 'Callable')"), ('matcher(a1, get_common_rank_t(a2, L2))', "('Callable', 'Tuple')"), ('double(branch(a1, a2, a3))', "('bool', 'Any', 'Any')"), ('branch(a1, a2, a3)(a4)', "('bool', 'Any', 'Any', 'Any')"), ('vline_o(get_nth_f(a1, F0))', "('FrozenSet',)"), ('neighbors(get_nth_f(a1, F0))', "('FrozenSet',)"), ('get_color_rank_t(get_arg_rank_f(a1, a2, F0), F0)', "('FrozenSet', 'Callable')"), ('height_f(get_nth_f(a1, F0))', "('FrozenSet',)"), ('move(a1, a2, branch(a3, ZERO_BY_TWO, TWO_BY_ZERO))', "('Tuple[Tuple[int]]', 'Object', 'bool')"), ('underfill(a1, a2, get_arg_rank_f(a3, a4, F0))', "('Grid', 'C_', 'FrozenSet', 'Callable')"), ('rbind(shoot, branch(a1, LEFT, RIGHT))', "('bool',)"), ('a1(branch(a2, RIGHT, a3))', "('Callable', 'bool', 'Any')"), ('other_f(a1, get_arg_rank_f(a1, numcolors_f, L1))', "('FrozenSet',)"), ('branch(a1, get_nth_t(a2, F0), ZERO)', "('bool', 'Tuple')"), ('astuple(branch(a1, a2, ZERO), a3)', "('bool', 'Any', 'int')"), ('branch(a1, vsplit, hsplit)(a2, TWO)', "('bool', 'Any')"), ('normalize(get_arg_rank(a1, numcolors_f, L1))', "('Container',)"), ('branch(a1, a2, other_f(a3, a2))', "('bool', 'Any', 'FrozenSet')"), ('remove_f(get_arg_rank_f(a1, size, L1), a1)', "('FrozenSet',)"), ('connect(a1, get_nth_f(a2, F0))', "('Tuple[int, int]', 'FrozenSet')"), ('shoot(get_nth_f(a1, F0), UP_RIGHT)', "('FrozenSet',)"), ('lbind(subtract, get_val_rank_f(a1, size, F0))', "('FrozenSet',)"), ('astuple(get_nth_f(a1, F0), a2)', "('FrozenSet', 'int')"), ('asobject(branch(a1, a2, a3))', "('bool', 'Any', 'Any')"), ('switch(a1, get_nth_f(a2, F0), a3)', "('Tuple[Tuple[int]]', 'FrozenSet', 'R_')"), ('vconcat(get_nth_f(a1, F0), a2)', "('FrozenSet', 'Tuple[Tuple[int]]')"), ('col_row(get_arg_rank_f(a1, size, F0), R1)', "('FrozenSet',)"), ('add(get_nth_t(a1, L1), a2)', "('Tuple', 'Union[int, Tuple[int, int]]')"), ('fill(a1, SIX, extract(a2, a3))', "('Grid', 'Container', 'Callable')"), ('astuple(a1, branch(a2, ZERO, a3))', "('int', 'bool', 'Any')"), ('a1(a1(a2))', "('Callable', 'Any')"), ('recolor_o(TWO, get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('mir_rot_f(get_arg_rank_f(a1, size, F0), R2)', "('FrozenSet',)"), ('subgrid(other_f(a1, a2), a3)', "('FrozenSet', 'Any', 'Tuple[Tuple[int]]')"), ('normalize(get_nth_t(a1, F0))', "('Tuple',)"), ('color(get_nth_t(a1, L1))', "('Tuple',)"), ('subgrid(get_arg_rank_t(a1, a2, F0), a3)', "('Tuple', 'Callable', 'Tuple[Tuple[int]]')"), ('corner(get_arg_rank_f(a1, a2, F0), R3)', "('FrozenSet', 'Callable')"), ('get_arg_rank_t(a1(a2, TWO), numcolors_t, F0)', "('Callable', 'Any')"), ('get_nth_t(extract(a1, a2), F0)', "('Container', 'Callable')"), ('initset(get_arg_rank_f(a1, a2, F0))', "('FrozenSet', 'Callable')"), ('shape_f(get_nth_f(a1, F0))', "('FrozenSet',)"), ('remove_f(get_nth_t(a1, F0), a1)', "('Tuple',)"), ('greater(get_nth_t(a1, L1), THREE)', "('Tuple',)"), ('fill(a1, FOUR, get_arg_rank_f(a2, a3, L1))', "('Grid', 'FrozenSet', 'Callable')"), ('branch(a1, height_t, width_t)(a2)', "('bool', 'Any')"), ('cover(a1, get_arg_rank_f(a2, size, L1))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('equality(get_val_rank_f(a1, size, F0), FOUR)', "('FrozenSet',)"), ('remove_f(get_arg_rank_f(a1, numcolors_f, F0), a1)', "('FrozenSet',)"), ('chain(a1, a2, branch(a3, identity, a4))', "('Callable', 'Callable', 'bool', 'Any')"), ('paint(a1, get_arg_rank_f(a2, a3, F0))', "('Tuple[Tuple[int]]', 'FrozenSet', 'Callable')"), ('equality(get_nth_f(a1, F0), ZERO)', "('FrozenSet',)"), ('multiply(branch(a1, DOWN, RIGHT), a2)', "('bool', 'Union[int, Tuple[int, int]]')"), ('hline_o(get_arg_rank_f(a1, size, L1))', "('FrozenSet',)"), ('switch(a1, a2, other_f(a3, a2))', "('Tuple[Tuple[int]]', 'Any', 'FrozenSet')"), ('asobject(extract(a1, a2))', "('Container', 'Callable')"), ('subtract(a1, get_nth_f(a2, F0))', "('Union[int, Tuple[int, int]]', 'FrozenSet')"), ('remove_f(get_nth_t(a1, L1), a1)', "('Tuple',)"), ('portrait_f(get_nth_f(a1, F0))', "('FrozenSet',)"), ('canvas(branch(a1, SIX, a2), UNITY)', "('bool', 'Any')"), ('a1(extract(a2, a3))', "('Callable', 'Container', 'Callable')"), ('sizefilter(a1, get_val_rank_f(a1, size, F0))', "('FrozenSet',)"), ('branch(a1, ZERO, get_nth_t(a2, L1))', "('bool', 'Tuple')"), ('move(a1, get_nth_f(a2, F0), a3)', "('Tuple[Tuple[int]]', 'FrozenSet', 'Tuple[int, int]')"), ('subgrid(get_arg_rank_f(a1, a2, F0), a3)', "('FrozenSet', 'Callable', 'Tuple[Tuple[int]]')"), ('a1(branch(a2, a3, a4))', "('Callable', 'bool', 'Any', 'Any')")}, 'Container': {('fill(a1, EIGHT, merge(a2))', "('Grid', 'Container[Container]')"), ('papply(shift, a1, apply(tojvec, a2))', "('Tuple', 'Container')"), ('get_common_rank_t(apply(a1, a2), L2)', "('Callable', 'Container')"), ('apply(a1, apply(normalize, a2))', "('Callable', 'Container')"), ('combine_f(a1, apply(a2, a3))', "('FrozenSet', 'Callable', 'Container')"), ('other_f(apply(color, a1), a2)', "('Container', 'Any')"), ('get_arg_rank_f(apply(a1, a2), a3, F0)', "('Callable', 'Container', 'Callable')"), ('width_f(merge_f(a1))', "('Container[Container]',)"), ('get_common_rank_t(apply(color, a1), F1)', "('Container',)"), ('papply(pair, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('get_val_rank_f(apply(a1, a2), a3, F0)', "('Callable', 'Container', 'Callable')"), ('order(apply(a1, a2), a3)', "('Callable', 'Container', 'Callable')"), ('mpapply(shift, apply(normalize, a1), a2)', "('Container', 'Tuple')"), ('rapply_f(apply(a1, a2), a3)', "('Callable', 'Container', 'Any')"), ('cover(a1, merge_f(a2))', "('Tuple[Tuple[int]]', 'Container[Container]')"), ('apply(a1, apply(a2, a3))', "('Callable', 'Callable', 'Container')"), ('shift(apply(a1, a2), RIGHT)', "('Callable', 'Container')"), ('fill(a1, a2, merge_f(a3))', "('Grid', 'C_', 'Container[Container]')"), ('papply(equality, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('hconcat(a1, apply(a2, a3))', "('Tuple[Tuple[int]]', 'Callable', 'Container')"), ('papply(compose, a1, apply(a2, a3))', "('Tuple', 'Callable', 'Container')"), ('mfilter_f(apply(a1, a2), hline_o)', "('Callable', 'Container')"), ('extract(apply(toindices, a1), a2)', "('Container', 'Callable')"), ('subgrid(merge_f(a1), a2)', "('Container[Container]', 'Tuple[Tuple[int]]')"), ('papply(compose, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('insert(a1, apply(a2, a3))', "('Any', 'Callable', 'Container')"), ('mapply(a1, apply(normalize, a2))', "('Callable', 'Container')"), ('mapply(a1, combine(a2, a3))', "('Callable', 'Container', 'Container')"), ('insert(ZERO, apply(a1, a2))', "('Callable', 'Container')"), ('fill(a1, a2, apply(a3, a4))', "('Grid', 'C_', 'Callable', 'Container')"), ('crop(merge_t(a1), DOWN, a2)', "('Container[Container]', 'Tuple[int, int]')"), ('papply(shift, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('remove_t(a1, apply(a2, a3))', "('Any', 'Callable', 'Container')"), ('other_f(remove(ZERO, a1), a2)', "('Container', 'Any')"), ('a1(apply(dedupe, a2))', "('Callable', 'Container')"), ('increment(apply(size, a1))', "('Container',)"), ('shape_f(merge(a1))', "('Container[Container]',)"), ('mir_rot_t(merge(a1), R4)', "('Container[Container]',)"), ('apply(a1, apply(color, a2))', "('Callable', 'Container')"), ('apply(tojvec, apply(increment, a1))', "('Container',)"), ('mir_rot_t(sfilter(a1, a2), R4)', "('Container', 'Callable')"), ('mpapply(shift, apply(asobject, a1), a2)', "('Container', 'Tuple')"), ('mpapply(mapply, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('mapply(delta, apply(merge, a1))', "('Container',)"), ('papply(sfilter, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('papply(add, a1, apply(a2, a3))', "('Tuple', 'Callable', 'Container')"), ('a1(merge(a2))', "('Callable', 'Container[Container]')"), ('mpapply(shift, a1, apply(toivec, a2))', "('Tuple', 'Container')"), ('lbind(rapply, combine(a1, a2))', "('Container', 'Container')"), ('papply(astuple, apply(decrement, a1), apply(decrement, a1))', "('Container',)"), ('apply(increment, apply(double, a1))', "('Container',)"), ('prapply(shift, a1, apply(tojvec, a2))', "('Container', 'Container')"), ('order(apply(decrement, a1), identity)', "('Container',)"), ('shift(apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple[int, int]')"), ('get_nth_f(apply(color, a1), F0)', "('Container',)"), ('paint(a1, combine(a2, a3))', "('Tuple[Tuple[int]]', 'Container', 'Container')"), ('mfilter(apply(a1, a2), a3)', "('Callable', 'Container', 'Callable')"), ('combine(combine(a1, a2), a3)', "('Container', 'Container', 'Container')"), ('mir_rot_f(merge_f(a1), R1)', "('Container[Container]',)"), ('fill(a1, ZERO, combine(a2, a3))', "('Grid', 'Container', 'Container')"), ('hconcat(apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple[Tuple[int]]')"), ('lbind(shift, merge(a1))', "('Container[Container]',)"), ('product(a1, apply(a2, a3))', "('Container', 'Callable', 'Container')"), ('paint(a1, merge_f(a2))', "('Tuple[Tuple[int]]', 'Container[Container]')"), ('fill(a1, TWO, merge_f(a2))', "('Grid', 'Container[Container]')"), ('papply(add, apply(a1, a2), a2)', "('Callable', 'Container')"), ('size(apply(normalize, a1))', "('Container',)"), ('mir_rot_t(apply(a1, a2), R4)', "('Callable', 'Container')"), ('mir_rot_f(merge_f(a1), R3)', "('Container[Container]',)"), ('papply(connect, apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('mir_rot_t(sfilter(a1, a2), R6)', "('Container', 'Callable')"), ('fill(a1, THREE, merge_f(a2))', "('Grid', 'Container[Container]')"), ('mapply(a1, apply(toivec, a2))', "('Callable', 'Container')"), ('branch(a1, combine(a2, a3), a4)', "('bool', 'Container', 'Container', 'Any')"), ('mapply(backdrop, apply(outbox, a1))', "('Container',)"), ('mir_rot_f(merge_f(a1), R0)', "('Container[Container]',)"), ('combine(a1, combine(a2, a3))', "('Container', 'Container', 'Container')"), ('get_color_rank_f(merge_f(a1), F0)', "('Container[Container]',)"), ('mapply(a1, remove(ZERO, a2))', "('Callable', 'Container')"), ('branch(a1, a2, combine(a3, a4))', "('bool', 'Any', 'Container', 'Container')"), ('sfilter_f(apply(toindices, a1), a2)', "('Container', 'Callable')"), ('lbind(multiply, apply(a1, a2))', "('Callable', 'Container')"), ('product(merge_f(a1), merge_f(a1))', "('Container[Container]',)"), ('mpapply(shift, a1, apply(tojvec, a2))', "('Tuple', 'Container')"), ('lbind(rapply, apply(a1, a2))', "('Callable', 'Container')"), ('mir_rot_t(apply(a1, a2), R3)', "('Callable', 'Container')"), ('cover(apply(a1, a2), a3)', "('Callable', 'Container', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, a2, sfilter(a3, a4))', "('Grid', 'C_', 'Container', 'Callable')"), ('portrait_f(merge_f(a1))', "('Container[Container]',)"), ('difference(apply(toindices, a1), a2)', "('Container', 'FrozenSet')"), ('lbind(other, remove(ZERO, a1))', "('Container',)"), ('shift(apply(a1, a2), UNITY)', "('Callable', 'Container')"), ('rbind(apply, apply(tojvec, a1))', "('Container',)"), ('color(merge_f(a1))', "('Container[Container]',)"), ('mir_rot_f(merge_f(a1), R2)', "('Container[Container]',)"), ('lbind(sfilter, apply(toindices, a1))', "('Container',)"), ('difference(merge_f(a1), a2)', "('Container[Container]', 'FrozenSet')"), ('lbind(shift, merge_f(a1))', "('Container[Container]',)"), ('partition(apply(a1, a2))', "('Callable', 'Container')"), ('get_nth_t(apply(a1, a2), L1)', "('Callable', 'Container')"), ('merge_f(sfilter(a1, a2))', "('Container', 'Callable')"), ('dedupe(apply(color, a1))', "('Container',)"), ('fill(a1, a2, apply(tojvec, a3))', "('Grid', 'C_', 'Container')"), ('fill(a1, a2, combine(a3, a4))', "('Grid', 'C_', 'Container', 'Container')"), ('mir_rot_t(merge(a1), R6)', "('Container[Container]',)"), ('pair(apply(a1, a2), a3)', "('Callable', 'Container', 'Tuple')"), ('fill(a1, ONE, combine(a2, a3))', "('Grid', 'Container', 'Container')"), ('combine_f(apply(a1, a2), a3)', "('Callable', 'Container', 'FrozenSet')"), ('prapply(multiply, apply(a1, a2), a3)', "('Callable', 'Container', 'Any')"), ('sfilter_f(apply(a1, a2), a3)', "('Callable', 'Container', 'Callable')"), ('rbind(contained, remove(a1, a2))', "('Any', 'Container')"), ('other_f(remove(ZERO, a1), FIVE)', "('Container',)"), ('vconcat(a1, merge_t(a2))', "('Tuple[Tuple[int]]', 'Container[Container]')"), ('mapply(a1, apply(a2, a3))', "('Callable', 'Callable', 'Container')"), ('prapply(shift, apply(toindices, a1), a2)', "('Container', 'Any')"), ('mpapply(recolor_o, apply(color, a1), a2)', "('Container', 'Tuple')"), ('fill(a1, THREE, sfilter(a2, a3))', "('Grid', 'Container', 'Callable')"), ('shift(combine(a1, a2), a3)', "('Container', 'Container', 'Tuple[int, int]')"), ('get_arg_rank_f(remove(ZERO, a1), a2, F0)', "('Container', 'Callable')"), ('underfill(a1, a2, combine(a3, a4))', "('Grid', 'C_', 'Container', 'Container')"), ('lbind(extract, apply(toindices, a1))', "('Container',)"), ('center(merge_f(a1))', "('Container[Container]',)"), ('recolor_o(a1, merge_f(a2))', "('C_', 'Container[Container]')"), ('mir_rot_t(merge_t(a1), R6)', "('Container[Container]',)"), ('mfilter_f(apply(a1, a2), a3)', "('Callable', 'Container', 'Callable')"), ('get_common_rank_t(apply(normalize, a1), L1)', "('Container',)"), ('contained(ONE, apply(size, a1))', "('Container',)"), ('pair(a1, apply(center, a2))', "('Tuple', 'Container')"), ('mapply(a1, sfilter(a2, a3))', "('Callable', 'Container', 'Callable')"), ('repeat(apply(color, a1), ONE)', "('Container',)"), ('papply(equality, a1, apply(a2, a1))', "('Container', 'Callable')"), ('crop(merge_t(a1), TWO_BY_ZERO, a2)', "('Container[Container]', 'Tuple[int, int]')"), ('mfilter_f(apply(initset, a1), a2)', "('Container', 'Callable')"), ('box(merge_f(a1))', "('Container[Container]',)"), ('delta(merge_f(a1))', "('Container[Container]',)"), ('totuple(apply(a1, a2))', "('Callable', 'Container')"), ('intersection(a1, apply(a2, a3))', "('FrozenSet', 'Callable', 'Container')"), ('backdrop(merge_f(a1))', "('Container[Container]',)"), ('mfilter_f(apply(delta, a1), square_f)', "('Container',)"), ('papply(connect, a1, apply(a2, a3))', "('Tuple', 'Callable', 'Container')"), ('recolor_o(TWO, merge_f(a1))', "('Container[Container]',)"), ('mir_rot_t(merge_t(a1), R3)', "('Container[Container]',)"), ('rbind(contained, apply(color, a1))', "('Container',)"), ('mir_rot_t(merge_t(a1), R1)', "('Container[Container]',)"), ('hupscale(merge_t(a1), THREE)', "('Container[Container]',)"), ('apply(normalize, apply(a1, a2))', "('Callable', 'Container')"), ('rapply_t(combine(a1, a2), a3)', "('Container', 'Container', 'Any')"), ('lbind(a1, apply(initset, a2))', "('Callable', 'Container')"), ('totuple(sfilter(a1, a2))', "('Container', 'Callable')"), ('paint(a1, apply(a2, a3))', "('Tuple[Tuple[int]]', 'Callable', 'Container')"), ('apply(a1, apply(outbox, a2))', "('Callable', 'Container')"), ('get_nth_f(apply(color, a1), L1)', "('Container',)"), ('repeat(apply(a1, a2), ONE)', "('Callable', 'Container')"), ('crop(merge(a1), ORIGIN, a2)', "('Container[Container]', 'Tuple[int, int]')"), ('merge_t(apply(a1, a2))', "('Callable', 'Container')"), ('fill(a1, FIVE, merge_f(a2))', "('Grid', 'Container[Container]')"), ('get_nth_f(apply(a1, a2), F0)', "('Callable', 'Container')"), ('product(combine(a1, a2), combine(a1, a2))', "('Container', 'Container')"), ('apply(a1, combine(a2, a3))', "('Callable', 'Container', 'Container')"), ('crop(merge_t(a1), ORIGIN, a2)', "('Container[Container]', 'Tuple[int, int]')"), ('fill(a1, EIGHT, merge_f(a2))', "('Grid', 'Container[Container]')"), ('apply(toivec, apply(a1, a2))', "('Callable', 'Container')"), ('apply(a1, a2(a3))', "('Callable', 'Callable', 'Any')"), ('switch(apply(a1, a2), ONE, TWO)', "('Callable', 'Container')"), ('remove_f(a1, apply(toindices, a2))', "('Any', 'Container')"), ('underfill(a1, a2, merge_t(a3))', "('Grid', 'C_', 'Container[Container]')"), ('move(a1, merge_f(a2), TWO_BY_ZERO)', "('Tuple[Tuple[int]]', 'Container[Container]')"), ('a1(apply(a2, a3))', "('Callable', 'Callable', 'Container')"), ('papply(sfilter, a1, apply(a2, a3))', "('Tuple', 'Callable', 'Container')"), ('apply(a1, a2(a3, TWO))', "('Callable', 'Callable', 'Any')"), ('get_val_rank_f(apply(center, a1), a2, L1)', "('Container', 'Callable')"), ('apply(decrement, apply(double, a1))', "('Container',)"), ('paint(a1, merge(a2))', "('Tuple[Tuple[int]]', 'Container[Container]')"), ('remove(a1, remove(ZERO, a2))', "('Any', 'Container')"), ('pair(a1, apply(a2, a3))', "('Tuple', 'Callable', 'Container')"), ('mapply(a1, apply(color, a2))', "('Callable', 'Container')"), ('pair(apply(color, a1), a2)', "('Container', 'Tuple')"), ('rapply_t(apply(a1, a2), a3)', "('Callable', 'Container', 'Any')"), ('corner(merge_f(a1), R0)', "('Container[Container]',)")}, 'FrozenSet': {('product(sizefilter(a1, ONE), sizefilter(a1, ONE))', "('Container',)"), ('fill(a1, ZERO, mapply(delta, a2))', "('Grid', 'Container[Container]')"), ('fill(a1, FIVE, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('fill(a1, a2, difference(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'FrozenSet')"), ('fill(a1, a2, initset(a3))', "('Grid', 'C_', 'Any')"), ('order(sizefilter(a1, a2), a3)', "('Container', 'int', 'Callable')"), ('underfill(a1, RED, mfilter_f(a2, vline_i))', "('Grid', 'FrozenSet')"), ('pair(a1, remove_f(a2, a3))', "('Tuple', 'Any', 'FrozenSet')"), ('branch(a1, mapply(hfrontier, a2), a3)', "('bool', 'Container[Container]', 'Any')"), ('product(insert(EIGHT, a1), insert(EIGHT, a1))', "('FrozenSet',)"), ('underfill(a1, SIX, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('fill(a1, BLACK, intersection(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('mapply(a1, prapply(astuple, a2, a2))', "('Callable', 'Container')"), ('get_arg_rank_f(insert(a1, a2), a3, F0)', "('Any', 'FrozenSet', 'Callable')"), ('merge_f(sizefilter(a1, TWO))', "('Container',)"), ('fill(a1, THREE, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('cover(a1, mfilter_f(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'Callable')"), ('mapply(a1, remove_f(a2, a3))', "('Callable', 'Any', 'FrozenSet')"), ('apply(a1, remove_f(a2, a3))', "('Callable', 'Any', 'FrozenSet')"), ('astuple(mapply(hfrontier, a1), a2)', "('Container[Container]', 'int')"), ('palette_t(mapply(a1, a2))', "('Callable', 'Container[Container]')"), ('insert(a1, insert(a2, a3))', "('Any', 'Any', 'FrozenSet')"), ('gravitate(initset(a1), a2)', "('Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('mfilter_f(difference(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'Callable')"), ('colorfilter(difference(a1, a2), RED)', "('FrozenSet', 'FrozenSet')"), ('underfill(a1, a2, combine_f(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'FrozenSet')"), ('difference(difference(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'FrozenSet')"), ('fill(a1, FOUR, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('apply(a1, insert(ORIGIN, a2))', "('Callable', 'FrozenSet')"), ('fill(a1, a2, sfilter_f(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'Callable')"), ('mfilter_f(sfilter_f(a1, a2), a3)', "('FrozenSet', 'Callable', 'Callable')"), ('mapply(a1, a2(SEVEN))', "('Callable', 'Callable')"), ('fill(a1, ZERO, sfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('lbind(sfilter, mapply(a1, a2))', "('Callable', 'Container[Container]')"), ('fill(a1, a2, combine_f(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'FrozenSet')"), ('size_f(mfilter_f(a1, vline_i))', "('FrozenSet',)"), ('cover(a1, combine_f(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'FrozenSet')"), ('difference(mapply(a1, a2), a2)', "('Callable', 'Container[Container]')"), ('fill(a1, TWO, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('difference(a1, mapply(toindices, a2))', "('FrozenSet', 'Container[Container]')"), ('difference(a1, intersection(a2, a3))', "('FrozenSet', 'FrozenSet', 'FrozenSet')"), ('fill(a1, ONE, mfilter(a2, a3))', "('Grid', 'Container', 'Callable')"), ('position(a1, difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('fill(a1, FIVE, mapply(ineighbors, a2))', "('Grid', 'Container[Container]')"), ('recolor_i(a1, combine_f(a2, a3))', "('C_', 'FrozenSet', 'FrozenSet')"), ('mfilter_f(prapply(connect, a1, a2), vline_i)', "('Container', 'Any')"), ('get_arg_rank_f(mapply(a1, a2), size, F0)', "('Callable', 'Container[Container]')"), ('branch(a1, mapply(a2, a3), a4)', "('bool', 'Callable', 'Container[Container]', 'Any')"), ('fill(a1, a2, mapply(ineighbors, a3))', "('Grid', 'C_', 'Container[Container]')"), ('remove_f(a1, difference(a2, a3))', "('Any', 'FrozenSet', 'FrozenSet')"), ('mapply(a1, sfilter_f(a2, a3))', "('Callable', 'FrozenSet', 'Callable')"), ('fill(a1, ONE, mapply(dneighbors, a2))', "('Grid', 'Container[Container]')"), ('apply(a1, sizefilter(a2, EIGHT))', "('Callable', 'Container')"), ('insert(UNITY, initset(DOWN))', '()'), ('fill(a1, RED, mapply(vfrontier, a2))', "('Grid', 'Container[Container]')"), ('branch(a1, insert(UNITY, a2), a2)', "('bool', 'FrozenSet')"), ('shift(sfilter_f(a1, a2), a3)', "('FrozenSet', 'Callable', 'Tuple[int, int]')"), ('fill(a1, ZERO, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('sfilter_f(remove_f(a1, a2), a3)', "('Any', 'FrozenSet', 'Callable')"), ('outbox(sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('toobject(insert(a1, a2), a3)', "('Any', 'FrozenSet', 'Tuple[Tuple[int]]')"), ('underfill(a1, a2, mfilter_f(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'Callable')"), ('intersection(a1, a2(a1))', "('FrozenSet', 'Callable')"), ('fill(a1, a2, mapply(dneighbors, a3))', "('Grid', 'C_', 'Container[Container]')"), ('fill(a1, ZERO, insert(a2, a3))', "('Grid', 'Any', 'FrozenSet')"), ('intersection(mapply(a1, a2), a3)', "('Callable', 'Container[Container]', 'FrozenSet')"), ('fill(a1, a2, mapply(outbox, a3))', "('Grid', 'C_', 'Container[Container]')"), ('size_f(sizefilter(a1, FOUR))', "('Container',)"), ('mapply(outbox, sizefilter(a1, TWO))', "('Container',)"), ('sfilter_f(product(a1, a2), a3)', "('Container', 'Container', 'Callable')"), ('get_arg_rank_f(sfilter_f(a1, a2), a3, F0)', "('FrozenSet', 'Callable', 'Callable')"), ('merge_f(sizefilter(a1, ONE))', "('Container',)"), ('underfill(a1, TWO, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('insert(a1, initset(a2))', "('Any', 'Any')"), ('astuple(a1, sfilter_f(a2, vline_o))', "('int', 'FrozenSet')"), ('fill(a1, a2, mapply(backdrop, a3))', "('Grid', 'C_', 'Container[Container]')"), ('fill(a1, FOUR, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('get_arg_rank_f(sfilter_f(a1, a2), a3, L1)', "('FrozenSet', 'Callable', 'Callable')"), ('underfill(a1, EIGHT, mapply(hfrontier, a2))', "('Grid', 'Container[Container]')"), ('fill(a1, SIX, sfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('apply(a1, product(a2, a2))', "('Callable', 'Container')"), ('occurrences(a1, initset(a2))', "('Tuple[Tuple[int]]', 'Any')"), ('mfilter_f(sizefilter(a1, THREE), hline_o)', "('Container',)"), ('difference(combine_f(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'FrozenSet')"), ('mapply(a1, prapply(multiply, a2, a3))', "('Callable', 'Container', 'Any')"), ('toindices(mfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('paint(a1, mfilter_f(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'Callable')"), ('intersection(a1, mapply(a2, a3))', "('FrozenSet', 'Callable', 'Container[Container]')"), ('fill(a1, THREE, insert(a2, a3))', "('Grid', 'Any', 'FrozenSet')"), ('sfilter_f(sfilter_f(a1, a2), a3)', "('FrozenSet', 'Callable', 'Callable')"), ('size_f(sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('underfill(a1, a2, mapply(a3, a4))', "('Grid', 'C_', 'Callable', 'Container[Container]')"), ('recolor_i(ZERO, initset(ORIGIN))', '()'), ('sizefilter(sfilter_f(a1, square_f), ONE)', "('FrozenSet',)"), ('upscale_f(initset(a1), TWO)', "('Any',)"), ('difference(a1, sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('equality(a1, intersection(a2, a1))', "('FrozenSet', 'FrozenSet')"), ('rbind(occurrences, initset(a1))', "('Any',)"), ('mapply(hfrontier, difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('combine_f(a1, mapply(hfrontier, a2))', "('FrozenSet', 'Container[Container]')"), ('mfilter_f(prapply(connect, a1, a1), vline_i)', "('Container',)"), ('extract(difference(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'Callable')"), ('paint(a1, combine_f(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'FrozenSet')"), ('mapply(a1, sizefilter(a2, ONE))', "('Callable', 'Container')"), ('upscale_f(initset(a1), THREE)', "('Any',)"), ('merge_f(prapply(shift, a1, a2))', "('Container', 'Any')"), ('paint(a1, mapply(a2, a3))', "('Tuple[Tuple[int]]', 'Callable', 'Container[Container]')"), ('rbind(manhattan, initset(a1))', "('Any',)"), ('get_nth_f(sizefilter(a1, FOUR), F0)', "('Container',)"), ('underfill(a1, THREE, combine_f(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('corner(combine_f(a1, a2), R3)', "('FrozenSet', 'FrozenSet')"), ('branch(a1, a2, mfilter_f(a3, hline_i))', "('bool', 'Any', 'FrozenSet')"), ('merge_f(sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('difference(a1, sfilter_f(a1, vline_o))', "('FrozenSet',)"), ('mapply(vfrontier, mapply(toindices, a1))', "('Container[Container]',)"), ('cover(a1, insert(a2, a3))', "('Tuple[Tuple[int]]', 'Any', 'FrozenSet')"), ('mapply(a1, product(a2, a3))', "('Callable', 'Container', 'Container')"), ('combine_f(a1, mapply(a2, a3))', "('FrozenSet', 'Callable', 'Container[Container]')"), ('mapply(vfrontier, sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('lbind(shift, insert(UNITY, a1))', "('FrozenSet',)"), ('mapply(a1, mapply(a2, a3))', "('Callable', 'Callable', 'Container[Container]')"), ('sfilter_f(prapply(connect, a1, a1), a2)', "('Container', 'Callable')"), ('fill(a1, ZERO, difference(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('fill(a1, EIGHT, intersection(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('lbind(shift, difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('underfill(a1, a2, mapply(vfrontier, a3))', "('Grid', 'C_', 'Container[Container]')"), ('fill(a1, a2, mapply(delta, a3))', "('Grid', 'C_', 'Container[Container]')"), ('branch(a1, mfilter_f(a2, vline_i), a3)', "('bool', 'FrozenSet', 'Any')"), ('fill(a1, a2, mapply(a3, a4))', "('Grid', 'C_', 'Callable', 'Container[Container]')"), ('shift(mapply(a1, a2), DOWN_LEFT)', "('Callable', 'Container[Container]')"), ('product(sizefilter(a1, ONE), a2)', "('Container', 'Container')"), ('get_arg_rank_f(sfilter_f(a1, a2), size, F0)', "('FrozenSet', 'Callable')"), ('mapply(a1, product(a2, a2))', "('Callable', 'Container')"), ('sfilter_f(mapply(a1, a2), a3)', "('Callable', 'Container[Container]', 'Callable')"), ('merge_f(difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('merge_f(sfilter_f(a1, square_f))', "('FrozenSet',)"), ('fill(a1, NINE, intersection(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('astuple(difference(a1, a2), a2)', "('FrozenSet', 'FrozenSet')"), ('fill(a1, THREE, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('sfilter_f(product(a1, a1), a2)', "('Container', 'Callable')"), ('delta(mapply(toindices, a1))', "('Container[Container]',)"), ('sfilter_f(sizefilter(a1, ONE), a2)', "('Container', 'Callable')"), ('merge_f(remove_f(a1, a2))', "('Any', 'FrozenSet')"), ('difference(a1, initset(a2))', "('FrozenSet', 'Any')"), ('fill(a1, a2, mfilter_f(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'Callable')"), ('toindices(mfilter_f(a1, hline_o))', "('FrozenSet',)"), ('insert(a1, initset(identity))', "('Any',)"), ('size_f(mfilter_f(a1, hline_i))', "('FrozenSet',)"), ('shift(mapply(a1, a2), UNITY)', "('Callable', 'Container[Container]')"), ('astuple(a1, mapply(vfrontier, a2))', "('int', 'Container[Container]')"), ('apply(a1, mapply(neighbors, a2))', "('Callable', 'Container[Container]')"), ('pair(remove_f(a1, a2), a3)', "('Any', 'FrozenSet', 'Tuple')"), ('fill(a1, EIGHT, mapply(neighbors, a2))', "('Grid', 'Container[Container]')"), ('mapply(a1(a2), a3)', "('Callable', 'Any', 'Container[Container]')"), ('lbind(shift, sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('mfilter_f(sizefilter(a1, TWO), a2)', "('Container', 'Callable')"), ('rbind(contained, insert(a1, a2))', "('Any', 'FrozenSet')"), ('intersection(a1, a2(a3))', "('FrozenSet', 'Callable', 'Any')"), ('lbind(a1, mapply(toindices, a2))', "('Callable', 'Container[Container]')"), ('insert(insert(a1, a2), a3)', "('Any', 'FrozenSet', 'FrozenSet')"), ('mapply(neighbors, intersection(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('get_arg_rank_f(sfilter_f(a1, square_f), size, F0)', "('FrozenSet',)"), ('sfilter_f(sfilter_f(a1, square_f), a2)', "('FrozenSet', 'Callable')"), ('get_arg_rank_f(difference(a1, a2), size, F0)', "('FrozenSet', 'FrozenSet')"), ('shift(mapply(a1, a2), a3)', "('Callable', 'Container[Container]', 'Tuple[int, int]')"), ('corner(combine_f(a1, a2), R1)', "('FrozenSet', 'FrozenSet')"), ('get_nth_f(sfilter_f(a1, a2), L1)', "('FrozenSet', 'Callable')"), ('astuple(initset(a1), a2)', "('Any', 'int')"), ('corner(combine_f(a1, a2), R2)', "('FrozenSet', 'FrozenSet')"), ('rbind(adjacent, mapply(a1, a2))', "('Callable', 'Container[Container]')"), ('mfilter_f(prapply(connect, a1, a1), hline_i)', "('Container',)"), ('fill(a1, TWO, mapply(vfrontier, a2))', "('Grid', 'Container[Container]')"), ('fill(a1, a2, intersection(a3, a4))', "('Grid', 'C_', 'FrozenSet', 'FrozenSet')"), ('position(a1, difference(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet', 'FrozenSet')"), ('corner(combine_f(a1, a2), R0)', "('FrozenSet', 'FrozenSet')"), ('apply(a1, sfilter_f(a2, a3))', "('Callable', 'FrozenSet', 'Callable')"), ('apply(decrement, insert(a1, a2))', "('Any', 'FrozenSet')"), ('underfill(a1, EIGHT, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('rbind(adjacent, mfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('underfill(a1, EIGHT, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('fill(a1, RED, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('product(a1, sfilter_f(a2, a3))', "('Container', 'FrozenSet', 'Callable')"), ('order(insert(a1, a2), a3)', "('Any', 'FrozenSet', 'Callable')"), ('mapply(a1, sizefilter(a2, FOUR))', "('Callable', 'Container')"), ('mfilter_f(prapply(connect, a1, a1), a2)', "('Container', 'Callable')"), ('fill(a1, FOUR, mapply(delta, a2))', "('Grid', 'Container[Container]')"), ('get_nth_f(difference(a1, a2), F0)', "('FrozenSet', 'FrozenSet')"), ('intersection(a1, combine_f(a2, a3))', "('FrozenSet', 'FrozenSet', 'FrozenSet')"), ('difference(a1, sizefilter(a1, ONE))', "('Container',)"), ('lbind(shift, mfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('apply(color, sizefilter(a1, ONE))', "('Container',)"), ('merge(difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('get_nth_f(sizefilter(a1, ONE), F0)', "('Container',)"), ('apply(color, difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('underfill(a1, ONE, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('initset(DOWN)', '()'), ('underfill(a1, a2, mapply(ineighbors, a3))', "('Grid', 'C_', 'Container[Container]')"), ('extract(remove_f(a1, a2), a3)', "('Any', 'FrozenSet', 'Callable')"), ('corners(difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('sfilter_f(insert(a1, a2), a3)', "('Any', 'FrozenSet', 'Callable')"), ('shift(mapply(a1, a2), UP_RIGHT)', "('Callable', 'Container[Container]')"), ('mapply(a1, a2(THREE))', "('Callable', 'Callable')"), ('product(insert(a1, a2), a3)', "('Any', 'FrozenSet', 'Container')"), ('size_f(mapply(hfrontier, a1))', "('Container[Container]',)"), ('underpaint(a1, mapply(a2, a3))', "('Tuple[Tuple[int]]', 'Callable', 'Container[Container]')"), ('apply(a1, difference(a2, a3))', "('Callable', 'FrozenSet', 'FrozenSet')"), ('apply(a1, product(a2, a3))', "('Callable', 'Container', 'Container')"), ('cover(a1, difference(a2, a3))', "('Tuple[Tuple[int]]', 'FrozenSet', 'FrozenSet')"), ('order(insert(ZERO, a1), identity)', "('FrozenSet',)"), ('size_f(mapply(vfrontier, a1))', "('Container[Container]',)"), ('paint(a1, mfilter_f(a2, hline_o))', "('Tuple[Tuple[int]]', 'FrozenSet')"), ('combine_f(mapply(a1, a2), a3)', "('Callable', 'Container[Container]', 'FrozenSet')"), ('difference(a1, sfilter_f(a1, square_f))', "('FrozenSet',)"), ('fill(a1, ZERO, combine_f(a2, a3))', "('Grid', 'FrozenSet', 'FrozenSet')"), ('normalize(difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('mapply(a1, difference(a2, a3))', "('Callable', 'FrozenSet', 'FrozenSet')"), ('combine_t(a1, remove_f(a2, a3))', "('Tuple', 'Any', 'FrozenSet')"), ('fill(a1, FOUR, mapply(box, a2))', "('Grid', 'Container[Container]')"), ('apply(a1, sizefilter(a2, FOUR))', "('Callable', 'Container')"), ('insert(FOUR, initset(ZERO))', '()'), ('size_f(sfilter_f(a1, hline_o))', "('FrozenSet',)"), ('fill(a1, TWO, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('fill(a1, a2, mapply(neighbors, a3))', "('Grid', 'C_', 'Container[Container]')"), ('lbind(colorfilter, difference(a1, a2))', "('FrozenSet', 'FrozenSet')"), ('underfill(a1, NEG_ONE, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('mfilter_f(prapply(connect, a1, a2), a3)', "('Container', 'Any', 'Callable')"), ('branch(a1, a2, mapply(vfrontier, a3))', "('bool', 'Any', 'Container[Container]')"), ('get_nth_t(remove_f(a1, a2), L1)', "('Any', 'FrozenSet')"), ('combine(difference(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'Container')"), ('fill(a1, ONE, mapply(corners, a2))', "('Grid', 'Container[Container]')"), ('get_arg_rank_t(remove_f(a1, a2), a3, F0)', "('Any', 'FrozenSet', 'Callable')"), ('difference(sfilter_f(a1, square_f), a2)', "('FrozenSet', 'FrozenSet')"), ('fill(a1, ZERO, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('intersection(mfilter_f(a1, a2), a3)', "('FrozenSet', 'Callable', 'FrozenSet')"), ('difference(a1, mapply(a2, a3))', "('FrozenSet', 'Callable', 'Container[Container]')"), ('combine(a1, sfilter_f(a2, a3))', "('Container', 'FrozenSet', 'Callable')"), ('initset(identity)', '()'), ('normalize(sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('fill(a1, EIGHT, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('move(a1, difference(a2, a3), RIGHT)', "('Tuple[Tuple[int]]', 'FrozenSet', 'FrozenSet')"), ('sfilter_f(mfilter_f(a1, a2), a3)', "('FrozenSet', 'Callable', 'Callable')"), ('lbind(rapply, initset(a1))', "('Any',)"), ('fill(a1, FIVE, sfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('combine_f(mapply(vfrontier, a1), a2)', "('Container[Container]', 'FrozenSet')"), ('lbind(a1, sizefilter(a2, ONE))', "('Callable', 'Container')"), ('get_nth_f(sfilter_f(a1, a2), F0)', "('FrozenSet', 'Callable')"), ('initset(ZERO)', '()'), ('corner(sfilter_f(a1, a2), R0)', "('FrozenSet', 'Callable')"), ('merge_f(sizefilter(a1, EIGHT))', "('Container',)"), ('initset(ORIGIN)', '()'), ('apply(merge, sfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('remove_f(a1, sfilter_f(a2, a3))', "('Any', 'FrozenSet', 'Callable')"), ('box(mapply(toindices, a1))', "('Container[Container]',)"), ('fill(a1, FIVE, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('sfilter_f(difference(a1, a2), a3)', "('FrozenSet', 'FrozenSet', 'Callable')"), ('fill(a1, ONE, mapply(a2, a3))', "('Grid', 'Callable', 'Container[Container]')"), ('totuple(product(a1, a1))', "('Container',)"), ('fill(a1, ONE, mfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('difference(a1, sizefilter(a1, FOUR))', "('Container',)"), ('fill(a1, a2, mfilter_f(a3, square_f))', "('Grid', 'C_', 'FrozenSet')"), ('shift(mapply(box, a1), a2)', "('Container[Container]', 'Tuple[int, int]')"), ('fill(a1, SEVEN, sfilter_f(a2, a3))', "('Grid', 'FrozenSet', 'Callable')"), ('insert(EIGHT, insert(FOUR, a1))', "('FrozenSet',)"), ('merge_f(sizefilter(a1, a2))', "('Container', 'int')"), ('recolor_o(ONE, mfilter_f(a1, a2))', "('FrozenSet', 'Callable')"), ('rbind(adjacent, mapply(toindices, a1))', "('Container[Container]',)"), ('recolor_i(ZERO, initset(a1))', "('Any',)"), ('insert(a1, insert(UNITY, a2))', "('Any', 'FrozenSet')"), ('mapply(a1, rapply_f(a2, a3))', "('Callable', 'FrozenSet', 'Any')")}, 'bool': {('astuple(a1, equality(a2, FIVE))', "('int', 'Any')"), ('branch(equality(a1, a2), identity, a3)', "('Any', 'Any', 'Any')"), ('branch(equality(a1, THREE), TWO_BY_ZERO, ORIGIN)', "('Any',)"), ('greater(a1, a2(a3))', "('int', 'Callable', 'Any')"), ('equality(a1, a2(a3))', "('Any', 'Callable', 'Any')"), ('branch(portrait_t(a1), vsplit, hsplit)', "('Tuple[Tuple[int]]',)"), ('branch(equality(a1, ZERO), width_f, height_f)', "('Any',)"), ('flip(equality(a1, EIGHT))', "('Any',)"), ('branch(greater(a1, SEVEN), EIGHT, a2)', "('int', 'Any')"), ('branch(equality(a1, FOUR), NEG_ONE, ONE)', "('Any',)"), ('branch(both(a1, a2), a3, a4)', "('bool', 'bool', 'Any', 'Any')"), ('branch(equality(a1, FOUR), THREE, a2)', "('Any', 'Any')"), ('branch(contained(TWO_BY_TWO, a1), a2, a3)', "('Container', 'Any', 'Any')"), ('branch(equality(a1, ONE), UNITY, TWO_BY_TWO)', "('Any',)"), ('branch(portrait_f(a1), tojvec, toivec)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('greater(a1(a2), a3)', "('Callable', 'Any', 'int')"), ('branch(portrait_f(a1), a2, a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Any', 'Any')"), ('branch(hline_o(a1), a2, ZERO)', "('Object', 'Any')"), ('astuple(equality(a1, FIVE), a2)', "('Any', 'int')"), ('equality(a1(a2), ONE)', "('Callable', 'Any')"), ('branch(equality(a1, TWO), TWO_BY_TWO, ZERO_BY_TWO)', "('Any',)"), ('both(a1, greater(a2, a3))', "('bool', 'int', 'int')"), ('branch(greater(a1, ONE), ZERO, EIGHT)', "('int',)"), ('branch(portrait_t(a1), tophalf, lefthalf)', "('Tuple[Tuple[int]]',)"), ('branch(vline_o(a1), a2, identity)', "('Object', 'Any')"), ('branch(contained(TWO_BY_ZERO, a1), a2, a3)', "('Container', 'Any', 'Any')"), ('branch(portrait_f(a1), hsplit, vsplit)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('branch(equality(a1, a2), a3, a4)', "('Any', 'Any', 'Any', 'Any')"), ('both(vline_i(a1), a2)', "('FrozenSet[Tuple[int, int]]', 'bool')"), ('equality(a1(a2), a3)', "('Callable', 'Any', 'Any')"), ('greater(a1(vline_o), a2)', "('Callable', 'int')"), ('greater(a1, a2(hline_o))', "('int', 'Callable')"), ('branch(vline_i(a1), a2, a3)', "('FrozenSet[Tuple[int, int]]', 'Any', 'Any')"), ('branch(equality(a1, TWO), a2, a3)', "('Any', 'Any', 'Any')"), ('branch(equality(a1, a2), ONE, SEVEN)', "('Any', 'Any')"), ('branch(portrait_f(a1), identity, a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Any')"), ('branch(equality(a1, FIVE), SIX, a2)', "('Any', 'Any')"), ('branch(equality(a1, TWO), RIGHT, a2)', "('Any', 'Any')"), ('branch(equality(a1, FIVE), UP, RIGHT)', "('Any',)"), ('branch(contained(ZERO_BY_TWO, a1), a2, a3)', "('Container', 'Any', 'Any')"), ('branch(contained(ONE, a1), a2, a3)', "('Container', 'Any', 'Any')"), ('branch(equality(a1, ONE), TWO, ONE)', "('Any',)"), ('branch(equality(a1, ONE), a2, identity)', "('Any', 'Any')"), ('branch(equality(a1, FOUR), a2, a3)', "('Any', 'Any', 'Any')"), ('branch(portrait_t(a1), a2, identity)', "('Tuple[Tuple[int]]', 'Any')"), ('branch(positive(a1), identity, a2)', "('int', 'Any')"), ('branch(greater(a1, a2), vupscale, hupscale)', "('int', 'int')"), ('branch(greater(a1, a2), height_t, width_t)', "('int', 'int')"), ('branch(equality(a1, FIVE), a2, a3)', "('Any', 'Any', 'Any')"), ('branch(hline_o(a1), a2, a3)', "('Object', 'Any', 'Any')"), ('branch(greater(a1, a2), righthalf, bottomhalf)', "('int', 'int')"), ('branch(flip(a1), UNITY, DOWN_LEFT)', "('bool',)"), ('branch(even(a1), a2, a3)', "('int', 'Any', 'Any')"), ('branch(portrait_t(a1), height_t, width_t)', "('Tuple[Tuple[int]]',)"), ('branch(hline_o(a1), ZERO, a2)', "('Object', 'Any')"), ('branch(vmatching(a1, a2), DOWN, RIGHT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('branch(equality(a1, ONE), ZERO_BY_TWO, TWO_BY_ZERO)', "('Any',)"), ('branch(portrait_f(a1), width_f, height_f)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('branch(greater(a1, FOUR), a2, a3)', "('int', 'Any', 'Any')"), ('branch(equality(a1, a2), a2, a3)', "('Any', 'Any', 'Any')"), ('branch(equality(a1, ZERO), identity, a2)', "('Any', 'Any')"), ('branch(equality(a1, ZERO), LEFT, RIGHT)', "('Any',)"), ('branch(greater(a1, a2), lefthalf, tophalf)', "('int', 'int')"), ('branch(greater(a1, THREE), FOUR, ZERO)', "('int',)"), ('branch(positive(a1), a2, a3)', "('int', 'Any', 'Any')"), ('branch(greater(a1, a2), a3, a4)', "('int', 'int', 'Any', 'Any')"), ('branch(equality(a1, a2), NEG_ONE, ONE)', "('Any', 'Any')"), ('branch(vmatching(a1, a2), a3, a4)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Any', 'Any')"), ('branch(greater(a1, a2), hconcat, vconcat)', "('int', 'int')"), ('branch(equality(a1, ONE), identity, outbox)', "('Any',)"), ('branch(equality(a1, EIGHT), UNITY, DOWN_LEFT)', "('Any',)"), ('branch(equality(a1, EIGHT), a2, a3)', "('Any', 'Any', 'Any')")}, 'Tuple': {('get_nth_t(order(a1, numcolors_t), L1)', "('Container',)"), ('interval(ZERO, FIVE, ONE)', '()'), ('apply(a1, interval(a2, TEN, FOUR))', "('Callable', 'int')"), ('extract(hsplit(a1, TWO), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('combine(astuple(UNITY, NEG_UNITY), a1)', "('Container',)"), ('astuple(FIVE, ONE)', '()'), ('pair(a1, order(a2, identity))', "('Tuple', 'Container')"), ('product(interval(ZERO, THREE, ONE), interval(ZERO, THREE, ONE))', '()'), ('apply(asobject, astuple(a1, a2))', "('int', 'int')"), ('combine_t(astuple(a1, a2), a3)', "('int', 'int', 'Tuple')"), ('interval(ONE, FIVE, ONE)', '()'), ('apply(a1, interval(ZERO, NINE, ONE))', "('Callable',)"), ('paint(a1, mpapply(recolor_o, a2, a3))', "('Tuple[Tuple[int]]', 'Tuple', 'Tuple')"), ('astuple(TWO, TWO)', '()'), ('crop(a1, ORIGIN, astuple(a2, a3))', "('Tuple[Tuple[int]]', 'int', 'int')"), ('rbind(multiply, astuple(a1, a2))', "('int', 'int')"), ('merge(sfilter_t(a1, a2))', "('Tuple', 'Callable')"), ('canvas(BLACK, astuple(TEN, TEN))', '()'), ('canvas(EIGHT, astuple(ONE, a1))', "('int',)"), ('apply(a1, hsplit(a2, THREE))', "('Callable', 'Tuple[Tuple[int]]')"), ('canvas(EIGHT, astuple(TWO, ONE))', '()'), ('apply(color, order(a1, size))', "('Container',)"), ('apply(a1, interval(ZERO, a2, NEG_ONE))', "('Callable', 'int')"), ('size_t(dedupe(a1))', "('Tuple',)"), ('mir_rot_t(dedupe(a1), R6)', "('Tuple',)"), ('invert(astuple(TEN, TEN))', '()'), ('extract(hsplit(a1, a2), a3)', "('Tuple[Tuple[int]]', 'int', 'Callable')"), ('remove_f(a1, order(a2, a3))', "('Any', 'Container', 'Callable')"), ('crop(a1, ORIGIN, astuple(a2, a2))', "('Tuple[Tuple[int]]', 'int')"), ('astuple(a1, order(a2, a3))', "('int', 'Container', 'Callable')"), ('merge(papply(shift, a1, a2))', "('Tuple', 'Tuple')"), ('crop(a1, TWO_BY_ZERO, astuple(ONE, THREE))', "('Tuple[Tuple[int]]',)"), ('interval(TWO, TEN, ONE)', '()'), ('shift(a1, astuple(ZERO, NEG_TWO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('get_nth_f(order(a1, numcolors_t), F0)', "('Container',)"), ('rbind(pair, interval(ZERO, a1, ONE))', "('int',)"), ('combine(a1, astuple(UP_RIGHT, DOWN_LEFT))', "('Container',)"), ('rbind(contained, interval(a1, TEN, TWO))', "('int',)"), ('rbind(apply, interval(FOUR, a1, FOUR))', "('int',)"), ('rbind(contained, astuple(TWO, FOUR))', '()'), ('initset(astuple(ZERO, ORIGIN))', '()'), ('initset(astuple(ONE, THREE))', '()'), ('astuple(NEG_TWO, NEG_TWO)', '()'), ('interval(ZERO, NINE, ONE)', '()'), ('pair(interval(ZERO, a1, ONE), a2)', "('int', 'Tuple')"), ('canvas(ZERO, astuple(ONE, NINE))', '()'), ('fill(a1, ONE, mpapply(mapply, a2, a3))', "('Grid', 'Tuple', 'Tuple')"), ('interval(ZERO, NINE, FOUR)', '()'), ('a1(astuple(a2, a3))', "('Callable', 'int', 'int')"), ('canvas(ZERO, astuple(ONE, a1))', "('int',)"), ('get_nth_t(hsplit(a1, TWO), F0)', "('Tuple[Tuple[int]]',)"), ('hsplit(a1(a2), a3)', "('Callable', 'Any', 'int')"), ('apply(normalize, order(a1, a2))', "('Container', 'Callable')"), ('crop(a1, astuple(a2, a3), THREE_BY_THREE)', "('Tuple[Tuple[int]]', 'int', 'int')"), ('initset(astuple(THREE, ORIGIN))', '()'), ('mapply(a1, rapply_t(a2, a3))', "('Callable', 'Tuple', 'Any')"), ('interval(TWO, NEG_ONE, NEG_ONE)', '()'), ('shift(a1, astuple(NEG_TWO, NEG_TWO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('get_nth_t(remove_t(a1, a2), F0)', "('Any', 'Tuple')"), ('mapply(a1, papply(astuple, a2, a3))', "('Callable', 'Tuple', 'Tuple')"), ('get_nth_t(hsplit(a1, THREE), F0)', "('Tuple[Tuple[int]]',)"), ('get_common_rank_t(combine_t(a1, a2), L2)', "('Tuple', 'Tuple')"), ('astuple(FOUR, EIGHT)', '()'), ('apply(tojvec, interval(a1, TEN, FOUR))', "('int',)"), ('remove_t(a1, hsplit(a2, THREE))', "('Any', 'Tuple[Tuple[int]]')"), ('astuple(ZERO, ORIGIN)', '()'), ('astuple(ZERO, DOWN_LEFT)', '()'), ('canvas(BLACK, astuple(ONE, a1))', "('int',)"), ('apply(a1, papply(pair, a2, a3))', "('Callable', 'Tuple', 'Tuple')"), ('canvas(ZERO, astuple(ONE, THREE))', '()'), ('paint(a1, mpapply(shift, a2, a3))', "('Tuple[Tuple[int]]', 'Tuple', 'Tuple')"), ('underfill(a1, TWO, remove_t(a2, a3))', "('Grid', 'Any', 'Tuple')"), ('get_nth_t(order(a1, a2), F0)', "('Container', 'Callable')"), ('mapply(vfrontier, sfilter_t(a1, a2))', "('Tuple', 'Callable')"), ('prapply(astuple, interval(TWO, TEN, ONE), interval(TWO, TEN, ONE))', '()'), ('apply(a1, interval(ZERO, a2, ONE))', "('Callable', 'int')"), ('crop(a1, astuple(TWO, FOUR), THREE_BY_THREE)', "('Tuple[Tuple[int]]',)"), ('multiply(a1, astuple(a2, a3))', "('Union[int, Tuple[int, int]]', 'int', 'int')"), ('apply(a1, interval(ZERO, FIVE, ONE))', "('Callable',)"), ('crop(a1, a2, astuple(TWO, a3))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int')"), ('apply(center, totuple(a1))', "('FrozenSet',)"), ('lbind(shift, papply(astuple, a1, a1))', "('Tuple',)"), ('canvas(a1, astuple(FOUR, FOUR))', "('C_',)"), ('get_nth_t(order(a1, a2), L1)', "('Container', 'Callable')"), ('initset(astuple(EIGHT, a1))', "('int',)"), ('pair(a1, interval(ZERO, a2, ONE))', "('Tuple', 'int')"), ('apply(a1, papply(compose, a2, a3))', "('Callable', 'Tuple', 'Tuple')"), ('add(astuple(EIGHT, a1), DOWN)', "('int',)"), ('merge(repeat(a1, NINE))', "('Any',)"), ('canvas(ZERO, astuple(SIX, SIX))', '()'), ('astuple(TWO, FOUR)', '()'), ('merge_t(repeat(a1, a2))', "('Any', 'int')"), ('get_nth_t(remove_t(a1, a2), L1)', "('Any', 'Tuple')"), ('crop(a1, ORIGIN, astuple(a2, ONE))', "('Tuple[Tuple[int]]', 'int')"), ('remove_f(a1, order(a2, size))', "('Any', 'Container')"), ('apply(tojvec, interval(ZERO, a1, TWO))', "('int',)"), ('crop(a1, ORIGIN, astuple(TWO, a2))', "('Tuple[Tuple[int]]', 'int')"), ('combine(astuple(a1, a2), a3)', "('int', 'int', 'Container')"), ('canvas(a1, astuple(a2, a2))', "('C_', 'int')"), ('canvas(FIVE, astuple(NINE, NINE))', '()'), ('astuple(THREE, ORIGIN)', '()'), ('extract(vsplit(a1, THREE), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('astuple(ONE, TWO)', '()'), ('initset(astuple(ZERO, DOWN_LEFT))', '()'), ('canvas(BLACK, astuple(NINE, NINE))', '()'), ('branch(a1, repeat(a2, ONE), a3)', "('bool', 'Any', 'Any')"), ('apply(size, astuple(a1, a2))', "('int', 'int')"), ('merge_t(hsplit(a1, THREE))', "('Tuple[Tuple[int]]',)"), ('sfilter_t(vsplit(a1, a2), a3)', "('Tuple[Tuple[int]]', 'int', 'Callable')"), ('merge_t(hsplit(a1, a2))', "('Tuple[Tuple[int]]', 'int')"), ('mir_rot_t(repeat(a1, ONE), R4)', "('Any',)"), ('get_nth_t(hsplit(a1, TWO), L1)', "('Tuple[Tuple[int]]',)"), ('initset(astuple(TWO, a1))', "('int',)"), ('get_nth_t(order(a1, size), L1)', "('Container',)"), ('pair(order(a1, identity), a2)', "('Container', 'Tuple')"), ('apply(a1, order(a2, size))', "('Callable', 'Container')"), ('shoot(astuple(a1, ONE), UP_RIGHT)', "('int',)"), ('apply(color, order(a1, a2))', "('Container', 'Callable')"), ('crop(a1, ORIGIN, astuple(TWO, ONE))', "('Tuple[Tuple[int]]',)"), ('a1(astuple(FIVE, FIVE))', "('Callable',)"), ('crop(a1, DOWN, astuple(THREE, ONE))', "('Tuple[Tuple[int]]',)"), ('connect(astuple(a1, a2), a3)', "('int', 'int', 'Tuple[int, int]')"), ('astuple(FIVE, FIVE)', '()'), ('mir_rot_t(dedupe(a1), R4)', "('Tuple',)"), ('crop(a1, DOWN, astuple(ONE, THREE))', "('Tuple[Tuple[int]]',)"), ('astuple(TWO, ONE)', '()'), ('canvas(FIVE, astuple(ONE, THREE))', '()'), ('get_rank(astuple(a1, a2), L1)', "('int', 'int')"), ('astuple(ZERO, NEG_TWO)', '()'), ('merge_t(astuple(a1, a2))', "('int', 'int')"), ('a1(repeat(a2, ONE))', "('Callable', 'Any')"), ('apply(tojvec, interval(TWO, NEG_ONE, NEG_ONE))', '()'), ('connect(a1, astuple(a2, a3))', "('Tuple[int, int]', 'int', 'int')"), ('apply(toivec, interval(ZERO, a1, ONE))', "('int',)"), ('add(UNITY, astuple(a1, a2))', "('int', 'int')"), ('rbind(contained, interval(a1, a2, TWO))', "('int', 'int')"), ('product(interval(ZERO, NINE, FOUR), interval(ZERO, NINE, FOUR))', '()'), ('shoot(astuple(a1, ONE), RIGHT)', "('int',)"), ('mapply(a1, sfilter_t(a2, a3))', "('Callable', 'Tuple', 'Callable')"), ('interval(ONE, FOUR, ONE)', '()'), ('canvas(a1, astuple(ONE, a2))', "('C_', 'int')"), ('apply(tojvec, interval(ZERO, a1, ONE))', "('int',)"), ('combine(a1, astuple(a2, a3))', "('Container', 'int', 'int')"), ('get_nth_f(vsplit(a1, THREE), F0)', "('Tuple[Tuple[int]]',)"), ('apply(color, totuple(a1))', "('FrozenSet',)"), ('subtract(astuple(a1, a2), a3)', "('int', 'int', 'Union[int, Tuple[int, int]]')"), ('apply(a1, interval(ONE, FOUR, ONE))', "('Callable',)"), ('combine(a1, totuple(a2))', "('Container', 'FrozenSet')"), ('insert(astuple(ONE, TWO), a1)', "('FrozenSet',)"), ('size_t(totuple(a1))', "('FrozenSet',)"), ('mpapply(mapply, a1, papply(sfilter, a2, a3))', "('Tuple', 'Tuple', 'Tuple')"), ('astuple(THREE, ONE)', '()'), ('mapply(hfrontier, sfilter_t(a1, a2))', "('Tuple', 'Callable')"), ('shoot(astuple(a1, a2), a3)', "('int', 'int', 'Tuple[int, int]')"), ('crop(a1, ORIGIN, astuple(ONE, a2))', "('Tuple[Tuple[int]]', 'int')"), ('prapply(multiply, a1, interval(ZERO, NINE, ONE))', "('Container',)"), ('astuple(interval(THREE, TEN, ONE), a1)', "('int',)"), ('mpapply(recolor_o, a1, combine_t(a2, a3))', "('Tuple', 'Tuple', 'Tuple')"), ('rbind(contained, interval(ZERO, a1, a2))', "('int', 'int')"), ('crop(a1, a2, astuple(a3, a4))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int', 'int')"), ('crop(a1, DOWN, astuple(a2, a3))', "('Tuple[Tuple[int]]', 'int', 'int')"), ('insert(astuple(TWO, ONE), a1)', "('FrozenSet',)"), ('astuple(TEN, TEN)', '()'), ('extract(vsplit(a1, TWO), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('interval(ZERO, THREE, ONE)', '()'), ('lbind(multiply, astuple(a1, a2))', "('int', 'int')"), ('interval(NEG_TWO, FOUR, ONE)', '()'), ('rbind(canvas, astuple(ONE, a1))', "('int',)"), ('canvas(a1, astuple(NINE, a2))', "('C_', 'int')"), ('astuple(NINE, NINE)', '()'), ('mpapply(recolor_o, interval(a1, ZERO, NEG_ONE), a2)', "('int', 'Tuple')"), ('apply(double, interval(ONE, NINE, ONE))', '()'), ('remove_f(a1, order(a2, height_f))', "('Any', 'Container')"), ('apply(a1, order(a2, a3))', "('Callable', 'Container', 'Callable')"), ('insert(astuple(THREE, ONE), a1)', "('FrozenSet',)"), ('crop(a1, a2, astuple(a3, TWO))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'int')"), ('insert(astuple(TWO, SIX), a1)', "('FrozenSet',)"), ('other_f(a1, astuple(a2, a3))', "('FrozenSet', 'int', 'int')"), ('apply(a1, hsplit(a2, a3))', "('Callable', 'Tuple[Tuple[int]]', 'int')"), ('get_nth_f(order(a1, a2), F0)', "('Container', 'Callable')"), ('insert(astuple(THREE, a1), a2)', "('int', 'FrozenSet')"), ('combine_t(a1, astuple(a2, a3))', "('Tuple', 'int', 'int')"), ('order(a1(a2, TWO), numcolors_t)', "('Callable', 'Any')"), ('initset(astuple(a1, ORIGIN))', "('int',)"), ('get_nth_t(order(a1, height_f), L1)', "('Container',)"), ('canvas(BLUE, astuple(ONE, a1))', "('int',)"), ('astuple(FOUR, FOUR)', '()'), ('apply(normalize, totuple(a1))', "('FrozenSet',)"), ('shift(a1, astuple(FOUR, FOUR))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('apply(a1, interval(NEG_TWO, FOUR, ONE))', "('Callable',)"), ('papply(astuple, a1, papply(add, a2, a3))', "('Tuple', 'Tuple', 'Tuple')"), ('interval(ONE, NINE, ONE)', '()'), ('apply(tojvec, astuple(FOUR, EIGHT))', '()'), ('lbind(multiply, astuple(NEG_TWO, TWO))', '()'), ('canvas(ZERO, astuple(THREE, a1))', "('int',)"), ('astuple(UP_RIGHT, DOWN_LEFT)', '()'), ('crop(a1, ORIGIN, astuple(ONE, THREE))', "('Tuple[Tuple[int]]',)"), ('astuple(NEG_TWO, TWO)', '()'), ('apply(a1, interval(ONE, FIVE, ONE))', "('Callable',)"), ('canvas(BLACK, astuple(a1, a1))', "('int',)"), ('combine_t(repeat(a1, ONE), a2)', "('Any', 'Tuple')"), ('initset(astuple(a1, a2))', "('int', 'int')"), ('pair(a1, papply(equality, a1, a2))', "('Tuple', 'Tuple')"), ('mir_rot_t(dedupe(a1), R2)', "('Tuple',)"), ('astuple(interval(THREE, a1, ONE), a2)', "('int', 'int')"), ('astuple(ONE, THREE)', '()'), ('astuple(UNITY, NEG_UNITY)', '()'), ('insert(astuple(FIVE, ONE), a1)', "('FrozenSet',)"), ('astuple(SIX, SIX)', '()'), ('astuple(ONE, a1(a2))', "('Callable', 'Any')"), ('merge_t(repeat(a1, TWO))', "('Any',)"), ('insert(astuple(TWO, TWO), a1)', "('FrozenSet',)"), ('astuple(TWO, SIX)', '()'), ('papply(astuple, papply(add, a1, a2), a3)', "('Tuple', 'Tuple', 'Tuple')"), ('size_t(order(a1, a2))', "('Container', 'Callable')"), ('canvas(ZERO, astuple(a1, a1))', "('int',)"), ('matcher(a1, astuple(TWO, ONE))', "('Callable',)"), ('pair(interval(ZERO, a1, ONE), interval(ZERO, a1, ONE))', "('int',)"), ('pair(papply(connect, a1, a2), a3)', "('Tuple', 'Tuple', 'Tuple')"), ('index(a1, astuple(EIGHT, a2))', "('Tuple[Tuple[int]]', 'int')"), ('astuple(a1(a2), a3)', "('Callable', 'Any', 'int')"), ('get_rank(astuple(a1, a2), F0)', "('int', 'int')"), ('interval(THREE, TEN, ONE)', '()'), ('apply(double, interval(ZERO, FIVE, ONE))', '()'), ('mpapply(recolor_o, a1, order(a2, size))', "('Tuple', 'Container')"), ('astuple(a1, a2(a3))', "('int', 'Callable', 'Any')"), ('mpapply(recolor_o, a1, order(a2, height_f))', "('Tuple', 'Container')"), ('pair(order(a1, a2), a3)', "('Container', 'Callable', 'Tuple')"), ('crop(a1, ORIGIN, astuple(FIVE, a2))', "('Tuple[Tuple[int]]', 'int')"), ('apply(a1, dedupe(a2))', "('Callable', 'Tuple')"), ('rbind(contained, interval(ZERO, a1, THREE))', "('int',)"), ('apply(a1, totuple(a2))', "('Callable', 'FrozenSet')"), ('astuple(ONE, NINE)', '()'), ('canvas(ZERO, astuple(FOUR, FOUR))', '()'), ('mapply(a1, combine_t(a2, a3))', "('Callable', 'Tuple', 'Tuple')")}, 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]': {('intersection(a1, shift(a2, LEFT))', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('underpaint(a1, shift(a2, a3))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('paint(a1, shift(a2, UNITY))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, SEVEN, shift(a2, UNITY))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('col_row(shift(a1, DOWN), R2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, ZERO, shift(a2, TWO_BY_TWO))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shift(a1, a2(a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Callable', 'Any')"), ('sfilter_f(shift(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]', 'Callable')"), ('combine_f(a1, shift(a2, a3))', "('FrozenSet', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('fill(a1, a2, shift(a3, UP))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, FIVE, shift(a2, a3))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('branch(a1, a2, shift(a3, a4))', "('bool', 'Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('fill(a1, SEVEN, shift(a2, LEFT))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(shift, shift(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('combine(a1, shift(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('fill(a1, EIGHT, shift(a2, DOWN))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, SIX, shift(a2, RIGHT))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('hperiod(shift(a1, LEFT))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('vperiod(shift(a1, LEFT))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('toindices(shift(a1, UNITY))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, TWO, shift(a2, a3))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('fill(a1, a2, shift(a3, DOWN))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('col_row(shift(a1, DOWN), R1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('mapply(hfrontier, shift(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('intersection(shift(a1, RIGHT), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('shift(shift(a1, a2), NEG_UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('paint(a1, shift(a2, NEG_UNITY))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('paint(a1, shift(a2, UP_RIGHT))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('paint(a1, shift(a2, a3))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('shift(shift(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]', 'Tuple[int, int]')"), ('apply(a1, shift(a2, a3))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('mapply(a1, shift(a2, UNITY))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, THREE, shift(a2, NEG_UNITY))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('paint(a1, shift(a2, DOWN))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, SIX, shift(a2, UP_RIGHT))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('combine_f(shift(a1, ZERO_BY_TWO), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'FrozenSet')"), ('corner(shift(a1, UP), R1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, EIGHT, shift(a2, a3))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('paint(a1, shift(a2, DOWN_LEFT))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('corner(shift(a1, UP), R0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, TWO, shift(a2, UP))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('underfill(a1, a2, shift(a3, a4))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('difference(shift(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]', 'FrozenSet')"), ('fill(a1, a2, shift(a3, a4))', "('Grid', 'C_', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('lbind(shift, shift(a1, NEG_UNITY))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('lbind(shift, shift(a1, LEFT))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('fill(a1, EIGHT, shift(a2, DOWN_LEFT))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('lbind(a1, shift(a2, UNITY))', "('Callable', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('fill(a1, FIVE, shift(a2, RIGHT))', "('Grid', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')")}, 'Tuple[int, int]': {('tojvec(FOUR)', '()'), ('canvas(a1, shape_t(a2))', "('C_', 'Tuple[Tuple[int]]')"), ('sign(gravitate(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('connect(a1, corner(a2, R3))', "('Tuple[int, int]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(corner(a1, R0), NEG_UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('connect(a1, corner(a2, R1))', "('Tuple[int, int]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('rbind(add, tojvec(NEG_TWO))', '()'), ('rbind(add, toivec(a1))', "('int',)"), ('lbind(multiply, position(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('hfrontier(center(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('crop(a1, tojvec(FOUR), THREE_BY_THREE)', "('Tuple[Tuple[int]]',)"), ('rbind(subtract, center(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('neighbors(center(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('canvas(ZERO, shape_t(a1))', "('Tuple[Tuple[int]]',)"), ('shift(a1, corner(a2, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('invert(corner(a1, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shoot(center(a1), RIGHT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('connect(a1, centerofmass(a2))', "('Tuple[int, int]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(corner(a1, R1), DOWN_LEFT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shift(a1, toivec(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'int')"), ('shoot(corner(a1, R3), UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('lbind(multiply, toivec(a1))', "('int',)"), ('multiply(a1, position(a2, a3))', "('Union[int, Tuple[int, int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(corner(a1, R0), UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('add(shape_f(a1), TWO_BY_ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shoot(corner(a1, R3), NEG_UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('subtract(a1, toivec(a2))', "('Union[int, Tuple[int, int]]', 'int')"), ('shoot(center(a1), UP)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shift(a1, tojvec(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'int')"), ('lbind(multiply, corner(a1, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('toivec(NEG_TWO)', '()'), ('shoot(corner(a1, R1), NEG_UNITY)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('add(tojvec(a1), ZERO_BY_TWO)', "('int',)"), ('rbind(subtract, toivec(a1))', "('int',)"), ('shoot(a1, position(a2, a3))', "('Tuple[int, int]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('connect(ORIGIN, tojvec(a1))', "('int',)"), ('get_nth_t(position(a1, a2), F0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('increment(shape_f(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('subtract(center(a1), TWO_BY_ZERO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shoot(center(a1), DOWN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shift(a1, center(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('add(DOWN, shape_f(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('index(a1, center(a2))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(tojvec(a1), DOWN_LEFT)', "('int',)"), ('shoot(corner(a1, R2), UP_RIGHT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('crop(a1, toivec(a2), a3)', "('Tuple[Tuple[int]]', 'int', 'Tuple[int, int]')"), ('subtract(corner(a1, R0), DOWN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('subtract(a1, center(a2))', "('Union[int, Tuple[int, int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('move(a1, a2, gravitate(a2, a3))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('tojvec(SIX)', '()'), ('shift(a1, shape_f(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('crement(gravitate(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('crop(a1, tojvec(SIX), THREE_BY_THREE)', "('Tuple[Tuple[int]]',)"), ('get_nth_t(position(a1, a2), L1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('add(shape_t(a1), DOWN_LEFT)', "('Tuple[Tuple[int]]',)"), ('rbind(add, tojvec(a1))', "('int',)"), ('subtract(a1, corner(a2, R0))', "('Union[int, Tuple[int, int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(center(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('index(a1, corner(a2, R0))', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('shoot(corner(a1, R3), UP_RIGHT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('multiply(shape_f(a1), THREE)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('subtract(center(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('connect(corner(a1, R0), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('get_nth_t(corner(a1, R3), L1)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('branch(a1, a2, corner(a3, R2))', "('bool', 'Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('vfrontier(center(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('multiply(shape_f(a1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('shift(a1, toivec(NEG_TWO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('connect(a1, center(a2))', "('Tuple[int, int]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('decrement(shape_t(a1))', "('Tuple[Tuple[int]]',)"), ('branch(a1, corner(a2, R0), a3)', "('bool', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Any')"), ('rbind(subtract, tojvec(a1))', "('int',)"), ('shift(a1, gravitate(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('branch(a1, a2, shape_t(a3))', "('bool', 'Any', 'Tuple[Tuple[int]]')"), ('lbind(multiply, shape_f(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('add(centerofmass(a1), DOWN)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('add(toivec(a1), TWO_BY_ZERO)', "('int',)"), ('connect(corner(a1, R2), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('crop(a1, corner(a2, R0), a3)', "('Tuple[Tuple[int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[int, int]')"), ('subtract(corner(a1, R0), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('lbind(shoot, center(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('canvas(BLACK, shape_t(a1))', "('Tuple[Tuple[int]]',)"), ('add(a1, center(a2))', "('Union[int, Tuple[int, int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('crop(a1, tojvec(a2), a3)', "('Tuple[Tuple[int]]', 'int', 'Tuple[int, int]')"), ('shape_t(a1(a2))', "('Callable', 'Any')"), ('tojvec(a1(a2))', "('Callable', 'Any')"), ('shoot(corner(a1, R2), DOWN_LEFT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('initset(centerofmass(a1))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('subtract(a1, shape_f(a2))', "('Union[int, Tuple[int, int]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('get_nth_f(gravitate(a1, a2), F0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]')"), ('remove_t(corner(a1, R1), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple')"), ('add(shape_t(a1), TWO)', "('Tuple[Tuple[int]]',)"), ('toivec(a1(a2))', "('Callable', 'Any')"), ('double(shape_t(a1))', "('Tuple[Tuple[int]]',)"), ('add(corner(a1, R0), a2)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('shoot(corner(a1, R1), UP_RIGHT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('increment(corner(a1, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('shoot(center(a1), LEFT)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('rbind(shift, corner(a1, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]',)"), ('tojvec(NEG_TWO)', '()'), ('add(a1, toivec(a2))', "('Union[int, Tuple[int, int]]', 'int')")}, 'Union[int, Tuple[int, int]]': {('sign(subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('tojvec(halve(a1))', "('Union[int, Tuple[int, int]]',)"), ('initset(add(a1, DOWN_LEFT))', "('Union[int, Tuple[int, int]]',)"), ('add(a1, multiply(a2, a3))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('subtract(a1, double(a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('multiply(sign(a1), a2)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(divide(a1, THREE), divide(a1, THREE))', "('Union[int, Tuple[int, int]]',)"), ('astuple(a1, double(a2))', "('int', 'Union[int, Tuple[int, int]]')"), ('astuple(double(a1), a2)', "('Union[int, Tuple[int, int]]', 'int')"), ('multiply(a1, a2(a3))', "('Union[int, Tuple[int, int]]', 'Callable', 'Any')"), ('astuple(ONE, subtract(SIX, a1))', "('Union[int, Tuple[int, int]]',)"), ('downscale(a1, divide(a2, a3))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('matcher(a1, subtract(a2, TWO))', "('Callable', 'Union[int, Tuple[int, int]]')"), ('shoot(a1, subtract(a2, a1))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('invert(add(UNITY, a1))', "('Union[int, Tuple[int, int]]',)"), ('astuple(decrement(a1), decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('astuple(TWO, invert(a1))', "('Union[int, Tuple[int, int]]',)"), ('astuple(ONE, subtract(NINE, a1))', "('Union[int, Tuple[int, int]]',)"), ('divide(double(a1), a2)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(THREE, decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('shift(a1, increment(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('connect(a1, add(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('canvas(ZERO, add(a1, TWO))', "('Union[int, Tuple[int, int]]',)"), ('connect(add(a1, a2), a3)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]', 'Tuple[int, int]')"), ('interval(increment(a1), TEN, FOUR)', "('Union[int, Tuple[int, int]]',)"), ('interval(FOUR, double(TEN), FOUR)', '()'), ('astuple(THREE, invert(a1))', "('Union[int, Tuple[int, int]]',)"), ('move(a1, a2, increment(a3))', "('Tuple[Tuple[int]]', 'Object', 'Union[int, Tuple[int, int]]')"), ('shift(a1, add(a2, ZERO_BY_TWO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('move(a1, a2, sign(a3))', "('Tuple[Tuple[int]]', 'Object', 'Union[int, Tuple[int, int]]')"), ('crop(a1, subtract(a2, DOWN), a3)', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]', 'Tuple[int, int]')"), ('canvas(a1, increment(a2))', "('C_', 'Union[int, Tuple[int, int]]')"), ('add(multiply(a1, THREE), TWO_BY_TWO)', "('Union[int, Tuple[int, int]]',)"), ('subtract(decrement(a1), a2)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('move(a1, a2, subtract(a3, a4))', "('Tuple[Tuple[int]]', 'Object', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('apply(a1, multiply(a2, a3))', "('Callable', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('multiply(NEG_ONE, NINE)', '()'), ('double(TEN)', '()'), ('lbind(multiply, divide(a1, THREE))', "('Union[int, Tuple[int, int]]',)"), ('add(a1, crement(a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(ONE, subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('insert(halve(a1), a2)', "('Union[int, Tuple[int, int]]', 'FrozenSet')"), ('vupscale(a1, halve(a2))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('interval(add(a1, THREE), TEN, FOUR)', "('Union[int, Tuple[int, int]]',)"), ('astuple(halve(a1), a2)', "('Union[int, Tuple[int, int]]', 'int')"), ('rbind(subtract, increment(a1))', "('Union[int, Tuple[int, int]]',)"), ('multiply(TWO, SIX)', '()'), ('canvas(a1, multiply(UNITY, TEN))', "('C_',)"), ('add(SIX, SIX)', '()'), ('branch(a1, decrement(a2), a2)', "('bool', 'Union[int, Tuple[int, int]]')"), ('downscale(a1, divide(a2, THREE))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('double(a1(a2))', "('Callable', 'Any')"), ('double(multiply(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('decrement(subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(THREE, subtract(a1, THREE))', "('Union[int, Tuple[int, int]]',)"), ('increment(divide(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(decrement(a1), a2)', "('Union[int, Tuple[int, int]]', 'int')"), ('insert(add(a1, DOWN), a2)', "('Union[int, Tuple[int, int]]', 'FrozenSet')"), ('rbind(shoot, multiply(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('upscale_t(a1, halve(a2))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('subtract(a1, subtract(a2, TWO_BY_ZERO))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('upscale_f(a1, divide(a2, THREE))', "('Object', 'Union[int, Tuple[int, int]]')"), ('shift(a1, add(a2, TWO_BY_ZERO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('shift(a1, invert(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('rbind(greater, increment(a1))', "('Union[int, Tuple[int, int]]',)"), ('interval(ZERO, increment(a1), ONE)', "('Union[int, Tuple[int, int]]',)"), ('shift(a1, crement(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('astuple(multiply(a1, FIVE), multiply(a1, FIVE))', "('Union[int, Tuple[int, int]]',)"), ('toivec(add(THREE, a1))', "('Union[int, Tuple[int, int]]',)"), ('shoot(a1, subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(ONE, subtract(FIVE, a1))', "('Union[int, Tuple[int, int]]',)"), ('add(multiply(DOWN_LEFT, a1), a2)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('upscale_t(a1, decrement(a2))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('interval(subtract(a1, TEN), a2, TWO)', "('Union[int, Tuple[int, int]]', 'int')"), ('invert(a1(a2))', "('Callable', 'Any')"), ('a1(decrement(a2))', "('Callable', 'Union[int, Tuple[int, int]]')"), ('subtract(SIX, subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('connect(a1, subtract(a2, a3))', "('Tuple[int, int]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('a1(double(a2))', "('Callable', 'Union[int, Tuple[int, int]]')"), ('repeat(a1, increment(a2))', "('Any', 'Union[int, Tuple[int, int]]')"), ('shift(a1, subtract(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('astuple(EIGHT, add(SIX, SIX))', '()'), ('matcher(a1, halve(a2))', "('Callable', 'Union[int, Tuple[int, int]]')"), ('multiply(UNITY, TEN)', '()'), ('add(a1, double(a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('power(a1, subtract(a2, FOUR))', "('Callable', 'Union[int, Tuple[int, int]]')"), ('branch(a1, a2, increment(a2))', "('bool', 'Union[int, Tuple[int, int]]')"), ('shift(a1, subtract(a2, TWO_BY_ZERO))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('index(a1, add(a2, a3))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('interval(THREE, multiply(TWO, SIX), ONE)', '()'), ('hsplit(a1, decrement(a2))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('decrement(decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('shift(a1, multiply(a2, FOUR))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('shift(a1, add(a2, a3))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('decrement(double(a1))', "('Union[int, Tuple[int, int]]',)"), ('tojvec(multiply(a1, THREE))', "('Union[int, Tuple[int, int]]',)"), ('astuple(decrement(a1), ONE)', "('Union[int, Tuple[int, int]]',)"), ('crop(a1, a2, add(a3, TWO_BY_TWO))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Union[int, Tuple[int, int]]')"), ('subtract(multiply(a1, a2), THREE)', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('crop(a1, decrement(a2), a3)', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]', 'Tuple[int, int]')"), ('a1(add(a2, a3))', "('Callable', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('interval(ZERO, multiply(NEG_ONE, NINE), NEG_ONE)', '()'), ('decrement(add(DOWN, a1))', "('Union[int, Tuple[int, int]]',)"), ('tojvec(decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('crement(multiply(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('toivec(halve(a1))', "('Union[int, Tuple[int, int]]',)"), ('interval(ZERO, double(a1), TWO)', "('Union[int, Tuple[int, int]]',)"), ('canvas(a1, double(a2))', "('C_', 'Union[int, Tuple[int, int]]')"), ('interval(a1, add(a2, TEN), TWO)', "('int', 'Union[int, Tuple[int, int]]')"), ('shift(a1, decrement(a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Union[int, Tuple[int, int]]')"), ('interval(ZERO, subtract(NINE, a1), ONE)', "('Union[int, Tuple[int, int]]',)"), ('index(a1, decrement(a2))', "('Tuple[Tuple[int]]', 'Union[int, Tuple[int, int]]')"), ('lbind(multiply, subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('dneighbors(halve(a1))', "('Union[int, Tuple[int, int]]',)"), ('double(decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('interval(ZERO, a1, increment(a2))', "('int', 'Union[int, Tuple[int, int]]')"), ('divide(subtract(a1, TWO), THREE)', "('Union[int, Tuple[int, int]]',)"), ('crop(a1, a2, add(a3, TWO_BY_ZERO))', "('Tuple[Tuple[int]]', 'Tuple[int, int]', 'Union[int, Tuple[int, int]]')"), ('lbind(astuple, decrement(a1))', "('Union[int, Tuple[int, int]]',)"), ('increment(subtract(a1, a2))', "('Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('multiply(multiply(a1, THREE), a1)', "('Union[int, Tuple[int, int]]',)"), ('upscale_f(a1, divide(a2, a3))', "('Object', 'Union[int, Tuple[int, int]]', 'Union[int, Tuple[int, int]]')"), ('halve(a1(a2))', "('Callable', 'Any')")}, 'Tuple[Tuple]': {('extract(pair(a1, a2), a3)', "('Tuple', 'Tuple', 'Callable')"), ('mpapply(shift, a1, pair(a2, a2))', "('Tuple', 'Tuple')"), ('mapply(box, pair(a1, a2))', "('Tuple', 'Tuple')"), ('pair(a1, a2(a3))', "('Tuple', 'Callable', 'Any')"), ('mapply(a1, pair(a2, a3))', "('Callable', 'Tuple', 'Tuple')"), ('pair(a1(a2), a3)', "('Callable', 'Any', 'Tuple')"), ('paint(a1, pair(a2, a3))', "('Tuple[Tuple[int]]', 'Tuple', 'Tuple')"), ('apply(a1, pair(a2, a3))', "('Callable', 'Tuple', 'Tuple')"), ('sfilter_t(pair(a1, a2), a3)', "('Tuple', 'Tuple', 'Callable')")}, 'Grid': {('mir_rot_t(a1(a2), R1)', "('Callable', 'Any')"), ('hconcat(a1, mir_rot_t(a2, R5))', "('Tuple[Tuple[int]]', 'Grid')"), ('f_ofcolor(mir_rot_t(a1, R4), ONE)', "('Grid',)"), ('papply(pair, a1, mir_rot_t(a1, R3))', "('Grid',)"), ('insert(mir_rot_t(a1, R4), a2)', "('Grid', 'FrozenSet')"), ('astuple(a1, mir_rot_t(a1, R4))', "('Grid',)"), ('fgpartition(mir_rot_t(a1, R2))', "('Grid',)"), ('insert(mir_rot_t(a1, R5), a2)', "('Grid', 'FrozenSet')"), ('vsplit(mir_rot_t(a1, R4), a2)', "('Grid', 'int')"), ('papply(pair, a1, mir_rot_t(a2, R5))', "('Tuple', 'Grid')"), ('apply(a1, mir_rot_t(a2, R6))', "('Callable', 'Grid')"), ('f_ofcolor(mir_rot_t(a1, R6), a2)', "('Grid', 'C_')"), ('f_ofcolor(mir_rot_t(a1, R2), FIVE)', "('Grid',)"), ('switch(mir_rot_t(a1, R6), ONE, TWO)', "('Grid',)"), ('mir_rot_t(mir_rot_t(a1, R1), R2)', "('Grid',)"), ('cellwise(a1, mir_rot_t(a1, R0), a2)', "('Grid', 'int')"), ('asobject(mir_rot_t(a1, R1))', "('Grid',)"), ('hconcat(mir_rot_t(a1, R1), a2)', "('Grid', 'Tuple[Tuple[int]]')"), ('papply(pair, a1, mir_rot_t(a1, R2))', "('Grid',)"), ('subgrid(a1, mir_rot_t(a2, R0))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid')"), ('o_g(mir_rot_t(a1, R2), R5)', "('Grid',)"), ('o_g(mir_rot_t(a1, R6), R5)', "('Grid',)"), ('cellwise(a1, mir_rot_t(a2, R2), ZERO)', "('Tuple[Tuple[int]]', 'Grid')"), ('hconcat(mir_rot_t(a1, R6), a2)', "('Grid', 'Tuple[Tuple[int]]')"), ('fill(mir_rot_t(a1, R2), a2, a3)', "('Grid', 'C_', 'Patch')"), ('hconcat(a1, mir_rot_t(a1, R0))', "('Grid',)"), ('replace(mir_rot_t(a1, R0), a2, a3)', "('Grid', 'C_', 'C_')"), ('hconcat(a1, mir_rot_t(a1, R2))', "('Grid',)"), ('sfilter(mir_rot_t(a1, R4), a2)', "('Grid', 'Callable')"), ('righthalf(mir_rot_t(a1, R2))', "('Grid',)"), ('branch(a1, a2, mir_rot_t(a2, R4))', "('bool', 'Grid')"), ('papply(pair, a1, mir_rot_t(a2, R6))', "('Tuple', 'Grid')"), ('dedupe(mir_rot_t(a1, R4))', "('Grid',)"), ('get_color_rank_t(mir_rot_t(a1, R6), L1)', "('Grid',)"), ('vconcat(a1, mir_rot_t(a2, R2))', "('Tuple[Tuple[int]]', 'Grid')"), ('branch(a1, mir_rot_t(a2, R0), a3)', "('bool', 'Grid', 'Any')"), ('astuple(a1, mir_rot_t(a2, R6))', "('int', 'Grid')"), ('astuple(a1, mir_rot_t(a2, R5))', "('int', 'Grid')"), ('vconcat(mir_rot_t(a1, R0), a1)', "('Grid',)"), ('o_g(mir_rot_t(a1, R0), R3)', "('Grid',)"), ('lefthalf(mir_rot_t(a1, R2))', "('Grid',)"), ('astuple(mir_rot_t(a1, R5), a2)', "('Grid', 'int')"), ('fill(mir_rot_t(a1, R5), FIVE, a2)', "('Grid', 'Patch')"), ('vconcat(a1, mir_rot_t(a2, R5))', "('Tuple[Tuple[int]]', 'Grid')"), ('o_g(mir_rot_t(a1, R0), R7)', "('Grid',)"), ('hupscale(mir_rot_t(a1, R1), a2)', "('Grid', 'int')"), ('paint(mir_rot_t(a1, R4), a2)', "('Grid', 'Object')"), ('subgrid(a1, mir_rot_t(a2, R2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Grid')"), ('vconcat(a1, mir_rot_t(a1, R0))', "('Grid',)"), ('fill(mir_rot_t(a1, R6), a2, a3)', "('Grid', 'C_', 'Patch')"), ('branch(a1, a2, mir_rot_t(a3, R2))', "('bool', 'Any', 'Grid')"), ('o_g(mir_rot_t(a1, R2), R7)', "('Grid',)"), ('astuple(mir_rot_t(a1, R4), a2)', "('Grid', 'int')"), ('o_g(mir_rot_t(a1, R2), R3)', "('Grid',)"), ('asobject(mir_rot_t(a1, R0))', "('Grid',)"), ('insert(mir_rot_t(a1, R6), a2)', "('Grid', 'FrozenSet')"), ('branch(a1, mir_rot_t(a2, R4), a2)', "('bool', 'Grid')"), ('downscale(mir_rot_t(a1, R2), a2)', "('Grid', 'int')"), ('papply(pair, a1, mir_rot_t(a1, R4))', "('Grid',)"), ('replace(mir_rot_t(a1, R0), ZERO, EIGHT)', "('Grid',)"), ('branch(a1, mir_rot_t(a2, R5), a3)', "('bool', 'Grid', 'Any')"), ('rbind(subgrid, mir_rot_t(a1, R0))', "('Grid',)"), ('upscale_t(mir_rot_t(a1, R5), FOUR)', "('Grid',)"), ('f_ofcolor(mir_rot_t(a1, R0), FIVE)', "('Grid',)"), ('equality(mir_rot_t(a1, R2), a1)', "('Grid',)"), ('branch(a1, mir_rot_t(a2, R6), a3)', "('bool', 'Grid', 'Any')"), ('repeat(mir_rot_t(a1, R4), a2)', "('Grid', 'int')"), ('hconcat(a1, mir_rot_t(a1, R4))', "('Grid',)"), ('f_ofcolor(mir_rot_t(a1, R5), EIGHT)', "('Grid',)"), ('papply(pair, a1, mir_rot_t(a1, R1))', "('Grid',)"), ('branch(a1, a2, mir_rot_t(a2, R6))', "('bool', 'Grid')"), ('a1(mir_rot_t(a2, R1))', "('Callable', 'Grid')"), ('downscale(mir_rot_t(a1, R5), TWO)', "('Grid',)"), ('asobject(mir_rot_t(a1, R2))', "('Grid',)"), ('hconcat(mir_rot_t(a1, R2), a1)', "('Grid',)"), ('apply(a1, mir_rot_t(a2, R4))', "('Callable', 'Grid')"), ('cellwise(a1, mir_rot_t(a1, R2), a2)', "('Grid', 'int')"), ('branch(a1, a2, mir_rot_t(a3, R4))', "('bool', 'Any', 'Grid')"), ('crop(mir_rot_t(a1, R6), ORIGIN, a2)', "('Grid', 'Tuple[int, int]')")}, 'FrozenSet[Tuple[int, Tuple[int, int]]]': {('shift(asobject(a1), UNITY)', "('Tuple[Tuple[int]]',)"), ('lbind(shift, upscale_f(a1, TWO))', "('Object',)"), ('branch(a1, a2, toobject(a3, a4))', "('bool', 'Any', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('combine_f(a1, recolor_o(TWO, a2))', "('FrozenSet', 'Object')"), ('upscale_f(upscale_f(a1, TWO), TWO)', "('Object',)"), ('normalize(upscale_f(a1, a2))', "('Object', 'int')"), ('shift(recolor_i(a1, a2), a3)', "('C_', 'FrozenSet[Tuple[int, int]]', 'Tuple[int, int]')"), ('upscale_f(recolor_i(ZERO, a1), TWO)', "('FrozenSet[Tuple[int, int]]',)"), ('palette_f(asobject(a1))', "('Tuple[Tuple[int]]',)"), ('paint(a1, recolor_o(TWO, a2))', "('Tuple[Tuple[int]]', 'Object')"), ('shift(toobject(a1, a2), ZERO_BY_TWO)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('move(a1, recolor_i(TWO, a2), a3)', "('Tuple[Tuple[int]]', 'FrozenSet[Tuple[int, int]]', 'Tuple[int, int]')"), ('corner(asobject(a1), R0)', "('Tuple[Tuple[int]]',)"), ('occurrences(a1, recolor_i(ZERO, a2))', "('Tuple[Tuple[int]]', 'FrozenSet[Tuple[int, int]]')"), ('combine(upscale_f(a1, TWO), a2)', "('Object', 'Container')"), ('shape_f(upscale_f(a1, TWO))', "('Object',)"), ('normalize(toobject(a1, a2))', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('vperiod(asobject(a1))', "('Tuple[Tuple[int]]',)"), ('shift(recolor_i(FIVE, a1), a2)', "('FrozenSet[Tuple[int, int]]', 'Tuple[int, int]')"), ('occurrences(a1, upscale_f(a2, TWO))', "('Tuple[Tuple[int]]', 'Object')"), ('hperiod(asobject(a1))', "('Tuple[Tuple[int]]',)"), ('lbind(a1, normalize_o(a2))', "('Callable', 'Object')"), ('paint(a1, recolor_o(ONE, a2))', "('Tuple[Tuple[int]]', 'Object')"), ('occurrences(a1, asobject(a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('upscale_f(normalize_o(a1), a2)', "('Object', 'int')"), ('lbind(shift, recolor_i(ZERO, a1))', "('FrozenSet[Tuple[int, int]]',)"), ('insert(recolor_i(ZERO, a1), a2)', "('FrozenSet[Tuple[int, int]]', 'FrozenSet')"), ('lbind(shift, normalize_o(a1))', "('Object',)"), ('paint(a1, asobject(a2))', "('Tuple[Tuple[int]]', 'Tuple[Tuple[int]]')"), ('move(a1, recolor_i(GREEN, a2), a3)', "('Tuple[Tuple[int]]', 'FrozenSet[Tuple[int, int]]', 'Tuple[int, int]')"), ('combine_f(recolor_o(ONE, a1), a2)', "('Object', 'FrozenSet')"), ('lbind(shift, asobject(a1))', "('Tuple[Tuple[int]]',)"), ('height_f(recolor_i(FIVE, a1))', "('FrozenSet[Tuple[int, int]]',)"), ('upscale_f(a1(a2), THREE)', "('Callable', 'Any')"), ('paint(a1, upscale_f(a2, FOUR))', "('Tuple[Tuple[int]]', 'Object')"), ('shift(toobject(a1, a2), a3)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Tuple[int, int]')"), ('sfilter_f(normalize_o(a1), a2)', "('Object', 'Callable')"), ('shift(normalize_o(a1), UNITY)', "('Object',)"), ('shift(upscale_f(a1, TWO), a2)', "('Object', 'Tuple[int, int]')"), ('lbind(shift, recolor_i(a1, a2))', "('C_', 'FrozenSet[Tuple[int, int]]')"), ('shift(upscale_f(a1, THREE), a2)', "('Object', 'Tuple[int, int]')"), ('get_color_rank_f(toobject(a1, a2), F0)', "('Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]')"), ('paint(a1, recolor_o(a2, a3))', "('Tuple[Tuple[int]]', 'C_', 'Object')"), ('shift(upscale_f(a1, a2), a3)', "('Object', 'int', 'Tuple[int, int]')"), ('normalize(recolor_i(ZERO, a1))', "('FrozenSet[Tuple[int, int]]',)"), ('branch(a1, toobject(a2, a3), a4)', "('bool', 'Union[FrozenSet[Tuple[int, Tuple[int, int]]], FrozenSet[Tuple[int, int]]]', 'Tuple[Tuple[int]]', 'Any')"), ('toindices(upscale_f(a1, THREE))', "('Object',)"), ('sfilter_f(asobject(a1), a2)', "('Tuple[Tuple[int]]', 'Callable')"), ('height_f(asobject(a1))', "('Tuple[Tuple[int]]',)"), ('remove_f(recolor_i(ZERO, a1), a2)', "('FrozenSet[Tuple[int, int]]', 'FrozenSet')")}, 'FrozenSet[int]': {('remove(ZERO, palette_t(a1))', "('Tuple',)"), ('order(palette_t(a1), a2)', "('Tuple', 'Callable')"), ('other_f(palette_t(a1), ZERO)', "('Tuple',)"), ('decrement(numcolors_t(a1))', "('Tuple[Tuple[int]]',)"), ('contained(ONE, palette_t(a1))', "('Tuple',)"), ('get_nth_f(palette_t(a1), L1)', "('Tuple',)"), ('equality(numcolors_t(a1), THREE)', "('Tuple[Tuple[int]]',)"), ('difference(a1, palette_f(a2))', "('FrozenSet', 'FrozenSet')"), ('a1(palette_t(a2))', "('Callable', 'Tuple')"), ('equality(numcolors_t(a1), TWO)', "('Tuple[Tuple[int]]',)"), ('get_nth_f(palette_t(a1), F0)', "('Tuple',)"), ('difference(palette_f(a1), a2)', "('FrozenSet', 'FrozenSet')")}, 'Patch': {('paint(a1, mir_rot_f(a2, R2))', "('Tuple[Tuple[int]]', 'Patch')"), ('shift(mir_rot_f(a1, R2), a2)', "('Patch', 'Tuple[int, int]')"), ('paint(a1, mir_rot_f(a2, R0))', "('Tuple[Tuple[int]]', 'Patch')"), ('paint(a1, mir_rot_f(a2, R1))', "('Tuple[Tuple[int]]', 'Patch')"), ('paint(a1, mir_rot_f(a2, R3))', "('Tuple[Tuple[int]]', 'Patch')"), ('lbind(shift, mir_rot_f(a1, R2))', "('Patch',)"), ('a1(mir_rot_f(a2, R2))', "('Callable', 'Patch')"), ('shift(mir_rot_f(a1, R0), a2)', "('Patch', 'Tuple[int, int]')")}}